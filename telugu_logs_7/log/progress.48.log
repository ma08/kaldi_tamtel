# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/48.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/47.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/48.mdl 
# Started at Tue Jul 19 17:05:19 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/48.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005763, bias-{mean,stddev}=-0.0009489,0.01289
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.16,0.20 0.22,0.25,0.29,0.35,0.42 0.49,0.62,0.65,0.78), mean=0.31, stddev=0.0953], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.44,0.46 0.49,0.52,0.64,0.81,0.93 1.0,1.1,1.1,1.2), mean=0.677, stddev=0.175], bias-{mean,stddev}=-0.006063,0.02093, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.06e+06, self-repaired-proportion=0.00601774, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.002,0.002 0.003,0.005,0.01,0.02,0.03 0.03,0.03,0.04,0.04), mean=0.0137, stddev=0.00936], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.12 0.17,0.23,0.41,0.65,0.77 0.87,0.91,0.93,0.96), mean=0.439, stddev=0.226], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.10,0.11,0.14,0.17,0.19 0.21,0.24,0.27,0.37), mean=0.144, stddev=0.037], oderiv-count=4.7033e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47413.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.003,0.005,0.01,0.02,0.03 0.03,0.04,0.04,0.04), mean=0.0138, stddev=0.00947], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.008 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.019, stddev=0.00649]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01372, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.621, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.13,0.13,0.15,0.17,0.19 0.20,0.21,0.22,0.28), mean=0.153, stddev=0.0243], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01203, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.24 0.27,0.29,0.31,0.33), mean=0.189, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.33,0.35 0.36,0.36,0.38,0.41,0.41 0.42,0.43,0.44,0.46), mean=0.384, stddev=0.0239], bias-{mean,stddev}=-0.03659,0.04133, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0491, stddev=0.0143], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.16,0.24 0.29,0.32,0.40,0.49,0.55 0.60,0.66,0.70,0.79), mean=0.408, stddev=0.109], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.07), mean=0.0246, stddev=0.00638], oderiv-count=4.52986e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46901.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0491, stddev=0.0143], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.14), mean=0.0867, stddev=0.0136]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.491, stddev=0.000791], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.122, stddev=0.0133], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009971, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.12 0.13,0.14,0.16,0.17,0.19 0.20,0.22,0.23,0.27), mean=0.158, stddev=0.0234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.29 0.29,0.30,0.32,0.33,0.34 0.35,0.36,0.37,0.37), mean=0.319, stddev=0.0186], bias-{mean,stddev}=-0.02346,0.02215, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.31e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.07,0.08,0.09,0.09 0.09,0.10,0.11,0.16), mean=0.0765, stddev=0.0123], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.32,0.33,0.36 0.39,0.41,0.45,0.49,0.51 0.53,0.55,0.56,0.61), mean=0.447, stddev=0.0499], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.0125, stddev=0.00208], oderiv-count=4.68518e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46389.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.06,0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.15), mean=0.076, stddev=0.0124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.23), mean=0.129, stddev=0.0142]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.009963, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.451, stddev=0.000573], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.17), mean=0.112, stddev=0.0112], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.12 0.13,0.13,0.15,0.16,0.17 0.18,0.19,0.19,0.22), mean=0.148, stddev=0.0162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.28,0.28,0.30,0.31,0.32 0.33,0.33,0.34,0.36), mean=0.297, stddev=0.0176], bias-{mean,stddev}=-0.01558,0.01547, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.09 0.10,0.11,0.11,0.19), mean=0.0827, stddev=0.0106], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.39 0.40,0.42,0.45,0.48,0.50 0.52,0.53,0.55,0.59), mean=0.452, stddev=0.0388], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0186, stddev=0.0024], oderiv-count=1.50694e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15463.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.19), mean=0.0817, stddev=0.0106], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.17,0.18,0.27), mean=0.139, stddev=0.0136]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.33 0.33,0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33), mean=0.326, stddev=0.000366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.10,0.11,0.12,0.12,0.13 0.13,0.13,0.13,0.17), mean=0.115, stddev=0.00806], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.17), mean=0.113, stddev=0.0135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.30,0.31,0.32,0.34,0.35 0.35,0.37,0.37,0.37), mean=0.322, stddev=0.0186], bias-{mean,stddev}=-0.01783,0.02316, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.044, stddev=0.0113], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.21,0.25 0.28,0.32,0.40,0.47,0.50 0.53,0.56,0.59,0.65), mean=0.396, stddev=0.0871], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.07), mean=0.0334, stddev=0.00552], oderiv-count=1.52979e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15463.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.06,0.07,0.08), mean=0.0438, stddev=0.0115], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.09 0.10,0.10,0.10,0.14), mean=0.0793, stddev=0.0113]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009816, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.45 0.45,0.45,0.45,0.45), mean=0.444, stddev=0.000701], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.10,0.11,0.12,0.12 0.13,0.13,0.13,0.15), mean=0.111, stddev=0.00984], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00949, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.16,0.17 0.18,0.18,0.19,0.21), mean=0.151, stddev=0.0149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.26,0.27 0.28,0.28,0.30,0.32,0.33 0.34,0.35,0.35,0.37), mean=0.303, stddev=0.0221], bias-{mean,stddev}=-0.03051,0.01578, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.06,0.07,0.07,0.08,0.09 0.09,0.09,0.10,0.12), mean=0.0749, stddev=0.0088], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.34,0.36 0.37,0.39,0.43,0.47,0.49 0.51,0.52,0.53,0.55), mean=0.433, stddev=0.0451], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.02, stddev=0.00215], oderiv-count=1.49325e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14951.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.06 0.06,0.07,0.07,0.08,0.09 0.09,0.09,0.10,0.11), mean=0.0747, stddev=0.00894], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.12,0.12,0.13,0.14,0.15 0.15,0.15,0.16,0.21), mean=0.132, stddev=0.0107]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009578, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.433, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.12 0.12,0.13,0.13,0.14), mean=0.108, stddev=0.00986], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00938, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.15,0.16,0.17 0.17,0.18,0.18,0.23), mean=0.149, stddev=0.0142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.27 0.27,0.28,0.30,0.32,0.33 0.33,0.35,0.35,0.36), mean=0.299, stddev=0.0218], bias-{mean,stddev}=-0.03231,0.01606, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.47e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.06 0.06,0.07,0.07,0.08,0.09 0.09,0.09,0.10,0.13), mean=0.0748, stddev=0.00912], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.32,0.33,0.35 0.37,0.39,0.43,0.47,0.49 0.51,0.52,0.53,0.56), mean=0.429, stddev=0.0473], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0199, stddev=0.00215], oderiv-count=1.41242e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14439.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.06,0.07,0.07,0.08,0.09 0.09,0.09,0.10,0.12), mean=0.0739, stddev=0.00929], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.22), mean=0.131, stddev=0.0117]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009553, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.432, stddev=0.000559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.12 0.13,0.13,0.13,0.15), mean=0.108, stddev=0.0101], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00929, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.15,0.16,0.17 0.17,0.18,0.18,0.20), mean=0.148, stddev=0.0143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.26 0.27,0.28,0.30,0.31,0.32 0.33,0.34,0.34,0.36), mean=0.297, stddev=0.0206], bias-{mean,stddev}=-0.03497,0.01913, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.11), mean=0.0708, stddev=0.0101], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.29,0.33 0.35,0.38,0.42,0.46,0.49 0.50,0.52,0.53,0.59), mean=0.417, stddev=0.0532], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0199, stddev=0.00242], oderiv-count=1.35264e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13927.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.11), mean=0.0702, stddev=0.0103], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.11,0.12,0.13,0.13,0.14 0.15,0.15,0.16,0.25), mean=0.126, stddev=0.0128]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00956, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.433, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.13,0.13,0.16), mean=0.108, stddev=0.0107], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.13,0.13,0.15,0.16,0.17 0.17,0.18,0.18,0.19), mean=0.147, stddev=0.0157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.26 0.27,0.27,0.29,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.295, stddev=0.0219], bias-{mean,stddev}=-0.03274,0.01949, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.47e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.05 0.06,0.06,0.07,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.0712, stddev=0.012], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.27,0.30,0.32 0.34,0.37,0.42,0.47,0.49 0.51,0.53,0.54,0.58), mean=0.419, stddev=0.0584], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.05), mean=0.0192, stddev=0.00267], oderiv-count=1.31578e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13415.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.05 0.06,0.06,0.07,0.08,0.09 0.09,0.09,0.10,0.12), mean=0.0704, stddev=0.0122], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.10,0.11 0.11,0.12,0.12,0.13,0.14 0.15,0.15,0.16,0.24), mean=0.125, stddev=0.013]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009517, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.431, stddev=0.000366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.14,0.14,0.19), mean=0.107, stddev=0.0117], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.13,0.13,0.15,0.16,0.16 0.17,0.18,0.18,0.19), mean=0.146, stddev=0.0147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.26 0.27,0.28,0.29,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.293, stddev=0.0205], bias-{mean,stddev}=-0.02986,0.01853, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.73e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.05 0.06,0.06,0.07,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.072, stddev=0.0121], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.25,0.28,0.32 0.35,0.37,0.42,0.47,0.49 0.50,0.52,0.53,0.59), mean=0.416, stddev=0.0574], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0185, stddev=0.0024], oderiv-count=1.29818e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12903.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.05 0.06,0.06,0.07,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.0713, stddev=0.0122], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.17,0.26), mean=0.127, stddev=0.0152]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009684, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.438, stddev=0.000585], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.17), mean=0.109, stddev=0.0126], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.10,0.12 0.13,0.14,0.15,0.16,0.17 0.17,0.18,0.18,0.19), mean=0.147, stddev=0.0166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.26 0.27,0.28,0.29,0.31,0.32 0.33,0.33,0.34,0.35), mean=0.295, stddev=0.0206], bias-{mean,stddev}=-0.02743,0.01749, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.06,0.07,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.0714, stddev=0.0132], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.28,0.31 0.34,0.36,0.41,0.46,0.48 0.50,0.51,0.53,0.59), mean=0.409, stddev=0.0565], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.018, stddev=0.00219], oderiv-count=1.22246e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12391.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.07,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.0705, stddev=0.0132], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.19), mean=0.129, stddev=0.0137]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009838, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.445, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.18), mean=0.11, stddev=0.0148], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009512, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.13 0.13,0.14,0.15,0.16,0.17 0.18,0.18,0.18,0.20), mean=0.151, stddev=0.0158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.27,0.28,0.30,0.32,0.33 0.34,0.35,0.37,0.38), mean=0.303, stddev=0.0235], bias-{mean,stddev}=-0.0239,0.01666, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.63e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.08,0.09,0.09 0.10,0.11,0.11,0.13), mean=0.0769, stddev=0.0142], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.25,0.28,0.32 0.35,0.38,0.42,0.46,0.48 0.50,0.51,0.52,0.56), mean=0.416, stddev=0.0535], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04), mean=0.0175, stddev=0.00228], oderiv-count=1.16102e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11879.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.08,0.09,0.09 0.10,0.11,0.11,0.13), mean=0.0762, stddev=0.0143], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.23), mean=0.138, stddev=0.0146]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009672, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.438, stddev=0.000905], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.11,0.12,0.13 0.14,0.15,0.16,0.19), mean=0.108, stddev=0.0171], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.12,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.19,0.20,0.22), mean=0.157, stddev=0.0172], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.28 0.29,0.30,0.31,0.33,0.34 0.36,0.36,0.37,0.38), mean=0.315, stddev=0.022], bias-{mean,stddev}=-0.02403,0.01445, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.55e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.06,0.07,0.09,0.09 0.10,0.11,0.12,0.17), mean=0.075, stddev=0.0155], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.27,0.30,0.32 0.34,0.37,0.41,0.45,0.47 0.49,0.52,0.53,0.62), mean=0.408, stddev=0.0544], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0199, stddev=0.00245], oderiv-count=1.11667e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11367.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.06,0.07,0.09,0.09 0.10,0.11,0.11,0.17), mean=0.0744, stddev=0.0154], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.18,0.18,0.24), mean=0.142, stddev=0.0159]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.419753, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, params-rms=0.01333, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.426, stddev=0.000573], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.20,0.20,0.21,0.22,0.23 0.24,0.25,0.25,0.31), mean=0.213, stddev=0.0148], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.19 0.19,0.20,0.20,0.26), mean=0.165, stddev=0.0171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.30 0.31,0.31,0.33,0.34,0.35 0.36,0.37,0.37,0.39), mean=0.33, stddev=0.0173], bias-{mean,stddev}=-0.04429,0.02261, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.07 0.08,0.08,0.08,0.10), mean=0.0564, stddev=0.0118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.20,0.23,0.26 0.28,0.32,0.37,0.42,0.44 0.46,0.48,0.49,0.54), mean=0.364, stddev=0.0627], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.09), mean=0.0272, stddev=0.00382], oderiv-count=1.09779e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11367.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.07 0.08,0.08,0.08,0.10), mean=0.0559, stddev=0.0118], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.12 0.13,0.13,0.13,0.16), mean=0.11, stddev=0.0105]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, params-rms=0.01317, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.421, stddev=0.000345], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.18 0.19,0.20,0.21,0.22,0.23 0.24,0.25,0.25,0.32), mean=0.21, stddev=0.0172], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11367.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-5e-08,-4e-08,-3e-08 -2e-08,-2e-08,1e-09,2e-08,2e-08 3e-08,4e-08,4e-08,5e-08), mean=8.86e-10, stddev=1.85e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.50 0.51,0.51,0.54,0.56,0.57 0.58,0.59,0.60,0.61), mean=0.537, stddev=0.0249]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000197158, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.17 0.22,0.26,0.31,0.37,0.41 0.46,0.50,0.52,0.90), mean=0.311, stddev=0.0884], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.0434], bias-{mean,stddev}=0.0002836,0.05477, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.006541, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.02,0.04 0.06,0.09,0.10,0.12,0.13 0.13,0.14,0.14,0.21), mean=0.101, stddev=0.0261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.19,0.20,0.21,0.22,0.22 0.23,0.23,0.24,0.25), mean=0.209, stddev=0.0119], bias-{mean,stddev}=-0.05956,0.0547, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.44e+05, self-repaired-proportion=0.0232264, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.002,0.003,0.005 0.007,0.01,0.02,0.05,0.06 0.08,0.09,0.10,0.16), mean=0.0305, stddev=0.0237], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.05,0.06 0.08,0.12,0.24,0.43,0.51 0.62,0.72,0.75,0.81), mean=0.278, stddev=0.175], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.03), mean=0.0183, stddev=0.00537], oderiv-count=1.11706e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11367.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.002,0.003,0.005 0.007,0.01,0.02,0.05,0.06 0.08,0.09,0.10,0.15), mean=0.0304, stddev=0.0235], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.09,0.10,0.12,0.18), mean=0.0593, stddev=0.0223]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000197158, l2-regularize=0.008, max-change=0.75, params-rms=0.008702, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.28 0.28,0.28,0.28,0.28,0.28 0.28,0.28,0.28,0.28), mean=0.278, stddev=8.63e-05], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.12,0.15,0.20 0.24,0.26,0.26,0.28), mean=0.133, stddev=0.0426], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11367.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-3e-08,-2e-08 -2e-08,-1e-08,4e-10,1e-08,2e-08 2e-08,2e-08,3e-08,3e-08), mean=-4.17e-10, stddev=1.3e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.23,0.24 0.24,0.25,0.26,0.26,0.27 0.27,0.28,0.28,0.28), mean=0.256, stddev=0.0108]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00098579, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03448, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.09 0.16,0.30,0.53,0.69,0.78 0.85,0.92,0.94,1.3), mean=0.503, stddev=0.226], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,1.8,1.9,1.9 1.9,2.0,2.0,2.0), mean=1.83, stddev=0.0812], bias-{mean,stddev}=4.857e-09,0.06423, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-08,5e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.10278e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/47.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/48.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.52465 tdnnf2.linear:2.32012 tdnnf2.affine:2.28976 tdnnf3.linear:1.87225 tdnnf3.affine:1.92481 tdnnf4.linear:1.74121 tdnnf4.affine:1.81704 tdnnf5.linear:1.36292 tdnnf5.affine:1.46859 tdnnf6.linear:1.6721 tdnnf6.affine:1.78867 tdnnf7.linear:1.57787 tdnnf7.affine:1.71897 tdnnf8.linear:1.53522 tdnnf8.affine:1.67968 tdnnf9.linear:1.50256 tdnnf9.affine:1.63097 tdnnf10.linear:1.46868 tdnnf10.affine:1.5954 tdnnf11.linear:1.44607 tdnnf11.affine:1.56745 tdnnf12.linear:1.40818 tdnnf12.affine:1.5686 tdnnf13.linear:1.38571 tdnnf13.affine:1.65355 prefinal-l:1.7533 prefinal-chain.affine:1.79766 prefinal-chain.linear:1.36403 output.affine:1.51972 prefinal-xent.affine:1.00853 prefinal-xent.linear:0.628049 output-xent.affine:1.24283 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:10.387 tdnnf2.linear:7.02421 tdnnf2.affine:6.40737 tdnnf3.linear:5.55677 tdnnf3.affine:5.20861 tdnnf4.linear:5.1013 tdnnf4.affine:4.81244 tdnnf5.linear:3.68699 tdnnf5.affine:3.76743 tdnnf6.linear:5.02594 tdnnf6.affine:4.98146 tdnnf7.linear:4.90378 tdnnf7.affine:4.93943 tdnnf8.linear:4.89091 tdnnf8.affine:4.92466 tdnnf9.linear:4.89463 tdnnf9.affine:4.88553 tdnnf10.linear:4.87294 tdnnf10.affine:4.83966 tdnnf11.linear:4.95842 tdnnf11.affine:4.84407 tdnnf12.linear:5.03719 tdnnf12.affine:4.95831 tdnnf13.linear:4.952 tdnnf13.affine:5.13397 prefinal-l:6.82244 prefinal-chain.affine:5.52791 prefinal-chain.linear:6.74282 output.affine:17.4502 prefinal-xent.affine:4.23224 prefinal-xent.linear:4.45556 output-xent.affine:29.5144 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.337066 tdnnf2.linear:0.328093 tdnnf2.affine:0.354178 tdnnf3.linear:0.334251 tdnnf3.affine:0.366372 tdnnf4.linear:0.338233 tdnnf4.affine:0.374327 tdnnf5.linear:0.365953 tdnnf5.affine:0.385799 tdnnf6.linear:0.330268 tdnnf6.affine:0.356287 tdnnf7.linear:0.319059 tdnnf7.affine:0.344969 tdnnf8.linear:0.311759 tdnnf8.affine:0.338692 tdnnf9.linear:0.305173 tdnnf9.affine:0.331197 tdnnf10.linear:0.299011 tdnnf10.affine:0.326873 tdnnf11.linear:0.289378 tdnnf11.affine:0.320813 tdnnf12.linear:0.27771 tdnnf12.affine:0.314093 tdnnf13.linear:0.277824 tdnnf13.affine:0.319941 prefinal-l:0.255885 prefinal-chain.affine:0.324466 prefinal-chain.linear:0.201593 output.affine:0.08703 prefinal-xent.affine:0.237181 prefinal-xent.linear:0.140447 output-xent.affine:0.042107 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 19 17:05:20 EDT 2022, elapsed time 1 seconds
