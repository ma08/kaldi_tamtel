# nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl 
# Started at Tue Jul 19 17:09:18 EDT 2022
#
nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005763, bias-{mean,stddev}=-0.0009489,0.01289
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.007019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.08,0.09,0.10,0.12,0.13 0.14,0.15,0.16,0.18), mean=0.102, stddev=0.0211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.16,0.20,0.25,0.31 0.39,0.42,0.42,0.47), mean=0.214, stddev=0.0691], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.09,0.12,0.19,0.27,0.33 0.40,0.44,0.46,0.51), mean=0.204, stddev=0.0946], bias-{mean,stddev}=3.458e-05,0.005422, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.12,-0.11,-0.08 -0.05,-0.03,0.01,0.06,0.09 0.12,0.16,0.17,0.26), mean=0.0163, stddev=0.0595], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.6,-2.3,-2.1,-1.4 -1.0,-0.52,0.42,1.4,1.9 2.6,3.2,3.5,5.8), mean=0.459, stddev=1.22], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.11,0.21,0.25 0.28,0.32,0.37,0.57), mean=0.113, stddev=0.103], oderiv-count=297920
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=266.502, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.3,-1.1,-0.84 -0.62,-0.37,0.02,0.40,0.64 0.89,1.1,1.2,1.5), mean=0.00999, stddev=0.502], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.03,0.08,0.10,0.19), mean=0.00438, stddev=0.0195]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0043, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.18,0.18,0.19,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.194, stddev=0.0112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.04,0.05,0.06,0.06 0.06,0.06,0.06,0.07), mean=0.0478, stddev=0.00926], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.09,0.17,0.26,0.30 0.32,0.33,0.34,0.36), mean=0.177, stddev=0.0818], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.004213, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.07,0.07,0.08 0.08,0.09,0.09,0.09), mean=0.0669, stddev=0.00846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.13 0.13,0.13,0.13,0.14,0.14 0.14,0.15,0.15,0.15), mean=0.135, stddev=0.00586], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.09,0.18,0.23 0.26,0.29,0.30,0.32), mean=0.109, stddev=0.0791], bias-{mean,stddev}=-0.000706,0.004591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.3e+04, self-repaired-proportion=-0.00416324, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.38,-0.30,-0.20 -0.12,-0.02,0.17,0.39,0.49 0.58,0.70,0.77,0.95), mean=0.18, stddev=0.243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.6,-3.0,-2.6,-1.9 -1.3,-0.59,0.46,1.5,2.1 2.6,3.3,3.4,6.1), mean=0.429, stddev=1.35], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.04,0.05 0.06,0.08,0.08,0.12), mean=0.0184, stddev=0.0239], oderiv-count=145152
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=266.502, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.6,-1.4,-1.0 -0.75,-0.41,0.17,0.67,0.92 1.2,1.4,1.7,2.4), mean=0.123, stddev=0.674], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.25 0.33,0.39,0.44,0.62), mean=0.0498, stddev=0.113]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.003428, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.14 0.15,0.15,0.15,0.16,0.17 0.17,0.17,0.18,0.18), mean=0.155, stddev=0.00845], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0385, stddev=0.00444], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.08,0.13,0.20,0.23 0.25,0.26,0.27,0.28), mean=0.142, stddev=0.0622], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.003531, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.06,0.06,0.06 0.07,0.07,0.07,0.09), mean=0.0561, stddev=0.00629], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.11,0.11,0.11,0.12,0.12 0.12,0.12,0.12,0.13), mean=0.113, stddev=0.00513], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.08,0.15,0.19 0.21,0.23,0.25,0.26), mean=0.0947, stddev=0.0616], bias-{mean,stddev}=-3.193e-05,0.003758, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.65e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.76,-0.64,-0.42 -0.22,0.01,0.43,0.87,1.1 1.3,1.5,1.7,2.4), mean=0.44, stddev=0.523], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.1,-4.3,-3.7,-2.8 -2.0,-1.0,0.63,2.3,3.2 4.2,5.2,5.9,10), mean=0.664, stddev=2.12], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.03,0.04 0.05,0.06,0.06,0.08), mean=0.0132, stddev=0.0184], oderiv-count=49728
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=266.502, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.5,-1.3,-0.95 -0.63,-0.29,0.31,0.96,1.3 1.6,2.0,2.2,3.6), mean=0.348, stddev=0.789], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.18,0.40 0.50,0.55,0.59,0.87), mean=0.0828, stddev=0.168]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.003174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.13 0.13,0.14,0.14,0.15,0.15 0.16,0.16,0.16,0.16), mean=0.143, stddev=0.00719], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0357, stddev=0.00341], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.12,0.19,0.22 0.23,0.24,0.25,0.25), mean=0.131, stddev=0.0591], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.003307, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.06,0.06 0.06,0.07,0.07,0.08), mean=0.0526, stddev=0.00572], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.10,0.10,0.11,0.11,0.11 0.11,0.12,0.12,0.12), mean=0.106, stddev=0.00488], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.04,0.07,0.14,0.18 0.20,0.23,0.23,0.25), mean=0.0896, stddev=0.0562], bias-{mean,stddev}=-0.0001453,0.003183, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.28e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.10,-0.07,-0.03 0.02,0.06,0.14,0.22,0.26 0.30,0.34,0.38,0.44), mean=0.137, stddev=0.0984], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.53,-0.38,-0.16 0.02,0.16,0.44,0.74,0.92 1.0,1.3,1.3,1.9), mean=0.454, stddev=0.373]
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-1.6,-1.4,-1.1 -0.75,-0.37,0.31,0.94,1.3 1.6,2.0,2.3,3.9), mean=0.293, stddev=0.811], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.22,0.44 0.55,0.65,0.70,0.88), mean=0.0979, stddev=0.191]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.003534, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.11,0.11,0.11,0.12,0.12 0.12,0.12,0.12,0.13), mean=0.113, stddev=0.00564], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0398, stddev=0.00375], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.09,0.15,0.17 0.18,0.19,0.19,0.20), mean=0.104, stddev=0.0448], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.003762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.05,0.05,0.05,0.06), mean=0.0422, stddev=0.00521], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.11,0.12,0.12,0.12,0.13 0.13,0.13,0.13,0.14), mean=0.12, stddev=0.00579], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.06,0.07,0.10,0.16,0.18 0.19,0.20,0.21,0.22), mean=0.112, stddev=0.043], bias-{mean,stddev}=-0.0001516,0.003701, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.2,-0.97,-0.72 -0.47,-0.22,0.25,0.70,0.93 1.2,1.4,1.5,2.1), mean=0.237, stddev=0.569], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.13,0.24 0.31,0.38,0.41,0.53), mean=0.0567, stddev=0.113]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.003036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.13 0.13,0.13,0.14,0.14,0.15 0.15,0.15,0.15,0.15), mean=0.137, stddev=0.00591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0342, stddev=0.00329], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.07,0.12,0.18,0.20 0.21,0.22,0.23,0.23), mean=0.127, stddev=0.0519], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003254, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.05,0.06,0.06 0.06,0.06,0.06,0.07), mean=0.0518, stddev=0.00493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.10,0.10,0.10,0.11,0.11 0.11,0.11,0.11,0.12), mean=0.104, stddev=0.00533], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.05,0.08,0.14,0.17 0.19,0.21,0.21,0.22), mean=0.0916, stddev=0.0495], bias-{mean,stddev}=-0.0001703,0.00285, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.07e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.01,0.03,0.04,0.05 0.06,0.07,0.09,0.12,0.13 0.14,0.15,0.16,0.20), mean=0.0949, stddev=0.0287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.003,0.09,0.16,0.21 0.28,0.34,0.46,0.57,0.63 0.69,0.76,0.82,0.97), mean=0.455, stddev=0.144]
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.3,-1.2,-0.79 -0.54,-0.26,0.29,0.82,1.1 1.3,1.6,1.9,2.5), mean=0.286, stddev=0.656], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.28,0.42 0.52,0.60,0.64,0.88), mean=0.11, stddev=0.186]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.12,0.12,0.13,0.14,0.14 0.14,0.14,0.14,0.14), mean=0.13, stddev=0.00577], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0323, stddev=0.00282], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.12,0.17,0.18 0.19,0.20,0.20,0.21), mean=0.121, stddev=0.046], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.05, stddev=0.00475], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.09,0.10,0.10,0.10,0.11 0.11,0.11,0.11,0.11), mean=0.1, stddev=0.00408], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.08,0.13,0.16 0.18,0.20,0.21,0.22), mean=0.0885, stddev=0.0472], bias-{mean,stddev}=-5.63e-05,0.00257, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.008,0.04,0.04 0.05,0.06,0.06,0.08), mean=0.0166, stddev=0.0191], oderiv-count=39808
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.1,-1.0,-0.74 -0.49,-0.24,0.28,0.77,1.0 1.3,1.6,1.8,2.5), mean=0.277, stddev=0.622], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.28,0.43 0.50,0.59,0.65,0.90), mean=0.107, stddev=0.186]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.12,0.12,0.13,0.13,0.13 0.13,0.14,0.14,0.14), mean=0.126, stddev=0.0056], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0314, stddev=0.00276], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.12,0.16,0.18 0.19,0.19,0.19,0.20), mean=0.118, stddev=0.0434], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0489, stddev=0.00503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.09,0.09,0.10,0.10,0.10 0.11,0.11,0.11,0.12), mean=0.0981, stddev=0.00467], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.07,0.13,0.16 0.18,0.19,0.20,0.22), mean=0.0866, stddev=0.0465], bias-{mean,stddev}=7.061e-05,0.002546, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.2,-0.96,-0.72 -0.47,-0.22,0.23,0.72,0.97 1.2,1.5,1.8,4.6), mean=0.254, stddev=0.611], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.30,0.42 0.51,0.60,0.67,0.80), mean=0.112, stddev=0.186]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002744, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.12,0.12,0.12,0.13,0.13 0.13,0.13,0.13,0.14), mean=0.124, stddev=0.00477], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0309, stddev=0.00282], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.11,0.16,0.18 0.18,0.19,0.19,0.20), mean=0.117, stddev=0.0429], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002985, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.06), mean=0.0475, stddev=0.00503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.09,0.10,0.10,0.10 0.10,0.10,0.10,0.11), mean=0.0954, stddev=0.00401], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.07,0.13,0.16 0.17,0.19,0.20,0.21), mean=0.0839, stddev=0.0457], bias-{mean,stddev}=-0.0001002,0.002648, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.04 0.05,0.05,0.06,0.07), mean=0.0161, stddev=0.0172], oderiv-count=48064
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.1,-0.91,-0.68 -0.42,-0.13,0.31,0.78,1.1 1.3,1.6,1.9,2.5), mean=0.318, stddev=0.591], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.30,0.42 0.53,0.64,0.70,1.2), mean=0.116, stddev=0.196]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00268, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.12,0.12,0.12,0.13,0.13 0.13,0.13,0.13,0.13), mean=0.121, stddev=0.00484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0302, stddev=0.00291], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.11,0.15,0.17 0.18,0.18,0.19,0.20), mean=0.114, stddev=0.0412], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002935, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.06), mean=0.0467, stddev=0.00496], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.09,0.09,0.10,0.10 0.10,0.10,0.10,0.10), mean=0.0938, stddev=0.00389], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.07,0.13,0.15 0.17,0.19,0.20,0.21), mean=0.0816, stddev=0.0464], bias-{mean,stddev}=9.255e-05,0.002413, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.4e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.07,-0.04,-0.008 0.02,0.06,0.13,0.21,0.24 0.28,0.32,0.34,0.39), mean=0.135, stddev=0.0878], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.43,-0.35,-0.18 -0.02,0.18,0.51,0.80,0.98 1.1,1.4,1.5,1.9), mean=0.497, stddev=0.403], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.03 0.04,0.04,0.04,0.07), mean=0.0135, stddev=0.0136], oderiv-count=69696
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.97,-0.83,-0.57 -0.36,-0.14,0.29,0.78,1.0 1.2,1.4,1.7,2.9), mean=0.312, stddev=0.553], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.32,0.44 0.53,0.68,0.73,1.0), mean=0.124, stddev=0.201]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002661, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.11,0.12,0.12,0.12,0.13 0.13,0.13,0.13,0.13), mean=0.12, stddev=0.00459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0299, stddev=0.0032], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.11,0.15,0.17 0.18,0.18,0.19,0.19), mean=0.113, stddev=0.041], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0458, stddev=0.00514], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.09,0.10,0.10 0.10,0.10,0.10,0.10), mean=0.0921, stddev=0.00383], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.04,0.07,0.12,0.15 0.17,0.18,0.19,0.21), mean=0.0795, stddev=0.0466], bias-{mean,stddev}=6.396e-05,0.00235, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.81e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.13,-0.06,-0.03,-0.009 0.01,0.05,0.11,0.17,0.21 0.24,0.27,0.29,0.45), mean=0.112, stddev=0.0747], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.65,-0.32,-0.22,-0.07 0.06,0.19,0.44,0.70,0.83 0.95,1.1,1.2,1.6), mean=0.443, stddev=0.312]
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.92,-0.80,-0.61 -0.39,-0.16,0.31,0.77,1.0 1.2,1.4,1.6,2.3), mean=0.309, stddev=0.55], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.29,0.41 0.49,0.55,0.60,0.75), mean=0.115, stddev=0.178]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002577, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.11,0.11,0.12,0.12,0.12 0.12,0.13,0.13,0.13), mean=0.117, stddev=0.0048], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.029, stddev=0.00326], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.11,0.15,0.16 0.17,0.18,0.18,0.18), mean=0.11, stddev=0.0383], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002887, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.046, stddev=0.00474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.09,0.10,0.10 0.10,0.10,0.10,0.10), mean=0.0923, stddev=0.00398], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.06,0.12,0.15 0.17,0.19,0.20,0.20), mean=0.0789, stddev=0.048], bias-{mean,stddev}=4.368e-05,0.002175, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0132, stddev=0.00942], oderiv-count=115648
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-1.0,-0.82,-0.55 -0.32,-0.13,0.33,0.80,1.0 1.3,1.5,1.6,2.1), mean=0.338, stddev=0.55], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.31,0.42 0.50,0.61,0.63,0.89), mean=0.127, stddev=0.188]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002547, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.11,0.11,0.12,0.12,0.12 0.12,0.12,0.12,0.12), mean=0.115, stddev=0.004], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0287, stddev=0.00306], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.07,0.11,0.14,0.16 0.17,0.17,0.17,0.18), mean=0.11, stddev=0.0347], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003048, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0485, stddev=0.00475], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.09,0.09,0.10,0.10,0.10 0.10,0.10,0.11,0.11), mean=0.0975, stddev=0.00345], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.07,0.13,0.16 0.18,0.19,0.20,0.21), mean=0.0836, stddev=0.0502], bias-{mean,stddev}=8.055e-05,0.002157, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.05,0.07 0.09,0.10,0.11,0.14), mean=0.0207, stddev=0.0311], oderiv-count=9408
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.98,-0.84,-0.53 -0.35,-0.11,0.37,0.88,1.1 1.3,1.6,1.8,2.4), mean=0.384, stddev=0.588], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.25,0.40 0.50,0.63,0.66,1.1), mean=0.098, stddev=0.185]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, params-rms=0.003209, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.10,0.10,0.11,0.11 0.11,0.11,0.11,0.12), mean=0.103, stddev=0.00424], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0512, stddev=0.00443], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.08,0.14,0.16 0.18,0.18,0.19,0.20), mean=0.091, stddev=0.0475], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.003333, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.05,0.06,0.06 0.06,0.06,0.07,0.09), mean=0.0531, stddev=0.00535], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.10,0.10,0.11,0.11,0.11 0.11,0.12,0.12,0.12), mean=0.107, stddev=0.00423], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.09,0.14,0.16 0.18,0.20,0.20,0.22), mean=0.097, stddev=0.0444], bias-{mean,stddev}=0.0002328,0.00328, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.04,0.05 0.06,0.07,0.08,0.11), mean=0.0144, stddev=0.0221], oderiv-count=28608
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.77,-0.67,-0.49 -0.29,-0.11,0.31,0.69,0.92 1.1,1.4,1.5,2.2), mean=0.305, stddev=0.487], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.21,0.30 0.36,0.42,0.46,0.59), mean=0.0791, stddev=0.132]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, params-rms=0.00253, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.08,0.08,0.08,0.08,0.09 0.09,0.09,0.09,0.09), mean=0.0809, stddev=0.00383], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.05 0.05,0.05,0.05,0.06), mean=0.0403, stddev=0.00397], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.07,0.11,0.13 0.14,0.15,0.16,0.17), mean=0.0716, stddev=0.0377], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-06,-8e-06,-7e-06,-6e-06 -5e-06,-3e-06,-3e-08,2e-06,4e-06 5e-06,7e-06,7e-06,1e-05), mean=-2.2e-07, stddev=3.22e-06], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.97,1.9,2.1 2.2,2.4,2.6,2.8), mean=0.957, stddev=0.849]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000191632, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.001652, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0008,0.002,0.006 0.009,0.01,0.02,0.03,0.04 0.05,0.05,0.05,0.07), mean=0.0235, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.08,0.09,0.09,0.09 0.09,0.09,0.10,0.10), mean=0.0877, stddev=0.00351], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.07,0.12,0.14 0.16,0.17,0.18,0.19), mean=0.0776, stddev=0.0411], bias-{mean,stddev}=3.128e-07,0.001613, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.001881, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.008,0.01,0.01 0.02,0.02,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0291, stddev=0.00753], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.06,0.06,0.06,0.06 0.06,0.06,0.07,0.07), mean=0.0602, stddev=0.00221], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.05,0.08,0.09 0.10,0.10,0.11,0.12), mean=0.0558, stddev=0.0225], bias-{mean,stddev}=-0.0004785,0.002013, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.03 0.03,0.04,0.04,0.06), mean=0.00903, stddev=0.0121], oderiv-count=36096
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.62,-0.38,-0.34,-0.24 -0.17,-0.06,0.10,0.33,0.47 0.62,0.81,0.94,1.4), mean=0.137, stddev=0.267], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.13,0.18 0.21,0.24,0.26,0.34), mean=0.0521, stddev=0.0762]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000191632, l2-regularize=0.008, max-change=0.75, params-rms=0.001167, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.04,0.04), mean=0.0373, stddev=0.002], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.009 0.01,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0182, stddev=0.004], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.009,0.03,0.05,0.06 0.06,0.07,0.07,0.07), mean=0.0316, stddev=0.02], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-06,-5e-06,-4e-06,-3e-06 -2e-06,-1e-06,4e-07,2e-06,3e-06 3e-06,4e-06,4e-06,5e-06), mean=1.99e-07, stddev=1.94e-06], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.48,0.74,0.83 0.90,0.95,0.99,1.1), mean=0.445, stddev=0.315]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000958161, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.001361, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.002,0.005 0.008,0.01,0.02,0.03,0.03 0.04,0.04,0.05,0.08), mean=0.0196, stddev=0.0096], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.07,0.08,0.08 0.08,0.08,0.08,0.08), mean=0.0722, stddev=0.0042], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.006 0.007,0.01,0.06,0.10,0.12 0.13,0.14,0.15,0.19), mean=0.0592, stddev=0.0415], bias-{mean,stddev}=2.733e-10,0.001508, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824

LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.3359 tdnnf2.linear:2.20143 tdnnf2.affine:2.16193 tdnnf3.linear:1.75524 tdnnf3.affine:1.81197 tdnnf4.linear:1.6249 tdnnf4.affine:1.69628 tdnnf5.linear:1.27933 tdnnf5.affine:1.36709 tdnnf6.linear:1.55428 tdnnf6.affine:1.66879 tdnnf7.linear:1.46895 tdnnf7.affine:1.60776 tdnnf8.linear:1.42624 tdnnf8.affine:1.57425 tdnnf9.linear:1.40502 tdnnf9.affine:1.53075 tdnnf10.linear:1.37199 tdnnf10.affine:1.50451 tdnnf11.linear:1.36244 tdnnf11.affine:1.47655 tdnnf12.linear:1.31964 tdnnf12.affine:1.48001 tdnnf13.linear:1.30419 tdnnf13.affine:1.56195 prefinal-l:1.64293 prefinal-chain.affine:1.70972 prefinal-chain.linear:1.29559 output.affine:1.40726 prefinal-xent.affine:0.965571 prefinal-xent.linear:0.597598 output-xent.affine:1.16032 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:10.2466 tdnnf2.linear:6.91175 tdnnf2.affine:6.27606 tdnnf3.linear:5.4511 tdnnf3.affine:5.10813 tdnnf4.linear:4.99426 tdnnf4.affine:4.70714 tdnnf5.linear:3.60373 tdnnf5.affine:3.67272 tdnnf6.linear:4.92396 tdnnf6.affine:4.8884 tdnnf7.linear:4.82048 tdnnf7.affine:4.85401 tdnnf8.linear:4.81096 tdnnf8.affine:4.89361 tdnnf9.linear:4.81189 tdnnf9.affine:4.80715 tdnnf10.linear:4.79592 tdnnf10.affine:4.76798 tdnnf11.linear:4.88028 tdnnf11.affine:4.76289 tdnnf12.linear:4.96856 tdnnf12.affine:4.88499 tdnnf13.linear:4.88917 tdnnf13.affine:5.06276 prefinal-l:6.73835 prefinal-chain.affine:5.47733 prefinal-chain.linear:6.66117 output.affine:17.4278 prefinal-xent.affine:4.18955 prefinal-xent.linear:4.41739 output-xent.affine:29.5011 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.323354 tdnnf2.linear:0.315929 tdnnf2.affine:0.34113 tdnnf3.linear:0.318912 tdnnf3.affine:0.351237 tdnnf4.linear:0.321804 tdnnf4.affine:0.356305 tdnnf5.linear:0.350769 tdnnf5.affine:0.367562 tdnnf6.linear:0.312172 tdnnf6.affine:0.337969 tdnnf7.linear:0.301741 tdnnf7.affine:0.328205 tdnnf8.linear:0.293788 tdnnf8.affine:0.318767 tdnnf9.linear:0.289563 tdnnf9.affine:0.31606 tdnnf10.linear:0.284046 tdnnf10.affine:0.313516 tdnnf11.linear:0.277021 tdnnf11.affine:0.307457 tdnnf12.linear:0.263706 tdnnf12.affine:0.300874 tdnnf13.linear:0.265105 tdnnf13.affine:0.306382 prefinal-l:0.242329 prefinal-chain.affine:0.310496 prefinal-chain.linear:0.193386 output.affine:0.0807094 prefinal-xent.affine:0.229474 prefinal-xent.linear:0.134771 output-xent.affine:0.0393436 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:PrintProfile():cu-device.cc:563) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=21 threads=1
# Ended (code 0) at Tue Jul 19 17:09:39 EDT 2022, elapsed time 21 seconds
