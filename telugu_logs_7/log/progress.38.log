# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/38.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/37.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/38.mdl 
# Started at Tue Jul 19 09:40:52 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/38.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005763, bias-{mean,stddev}=-0.0009489,0.01289
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.13,0.17 0.21,0.25,0.31,0.38,0.44 0.54,0.67,0.72,0.88), mean=0.325, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.50 0.51,0.54,0.68,0.86,0.98 1.1,1.2,1.2,1.3), mean=0.718, stddev=0.19], bias-{mean,stddev}=-0.005427,0.02393, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.24e+06, self-repaired-proportion=0.0102085, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.002,0.002 0.003,0.005,0.01,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0157, stddev=0.0115], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.11 0.15,0.21,0.41,0.66,0.79 0.87,0.92,0.93,0.97), mean=0.44, stddev=0.236], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.13,0.16,0.19 0.21,0.24,0.27,0.36), mean=0.136, stddev=0.0404], oderiv-count=4.7015e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45768.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0009,0.001,0.002 0.003,0.005,0.01,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0155, stddev=0.0115], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.004,0.005,0.007 0.01,0.01,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.0206, stddev=0.00826]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01487, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.67,0.67,0.67 0.67,0.67,0.67,0.67,0.67 0.67,0.67,0.67,0.67), mean=0.673, stddev=0.000457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.14,0.16,0.19,0.20 0.22,0.24,0.25,0.30), mean=0.165, stddev=0.0308], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.15,0.17,0.19,0.24,0.26 0.30,0.32,0.34,0.37), mean=0.203, stddev=0.0452], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.37 0.39,0.39,0.41,0.44,0.45 0.46,0.46,0.48,0.48), mean=0.415, stddev=0.0248], bias-{mean,stddev}=-0.04077,0.05024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.11e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.04,0.05,0.06,0.08,0.08 0.09,0.09,0.10,0.11), mean=0.063, stddev=0.017], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.20,0.26 0.30,0.34,0.41,0.50,0.55 0.59,0.67,0.69,0.76), mean=0.42, stddev=0.104], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.04,0.04,0.06), mean=0.0209, stddev=0.00556], oderiv-count=4.50298e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45256.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.04,0.05,0.06,0.08,0.08 0.09,0.09,0.10,0.11), mean=0.0622, stddev=0.0174], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.08 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.21), mean=0.108, stddev=0.0181]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.54), mean=0.533, stddev=0.000712], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.132, stddev=0.016], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.17,0.19,0.20 0.22,0.24,0.25,0.29), mean=0.169, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.31 0.32,0.32,0.34,0.36,0.37 0.38,0.39,0.39,0.40), mean=0.341, stddev=0.0206], bias-{mean,stddev}=-0.023,0.02369, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.18), mean=0.0917, stddev=0.0138], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.34,0.36,0.38 0.40,0.42,0.46,0.49,0.51 0.53,0.55,0.56,0.60), mean=0.455, stddev=0.0456], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.009,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03), mean=0.0113, stddev=0.00194], oderiv-count=4.51104e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=44744.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.13,0.13,0.17), mean=0.0915, stddev=0.0142], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.17 0.18,0.19,0.20,0.25), mean=0.154, stddev=0.017]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01076, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.487, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.14,0.16,0.16,0.18), mean=0.121, stddev=0.0128], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.00998, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.25), mean=0.158, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.29 0.30,0.30,0.32,0.33,0.34 0.35,0.36,0.37,0.38), mean=0.319, stddev=0.0191], bias-{mean,stddev}=-0.01564,0.01716, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.10,0.10,0.11 0.11,0.12,0.12,0.21), mean=0.0957, stddev=0.0118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.43,0.46,0.49,0.50 0.51,0.53,0.54,0.60), mean=0.455, stddev=0.0358], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0173, stddev=0.0023], oderiv-count=1.54106e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14914.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.21), mean=0.0961, stddev=0.0123], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.19,0.20,0.20,0.31), mean=0.163, stddev=0.0165]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.0111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.35,0.35,0.36,0.36,0.36 0.36,0.36,0.36,0.36), mean=0.355, stddev=0.000669], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.11,0.12,0.12,0.13,0.14 0.14,0.14,0.15,0.31), mean=0.125, stddev=0.0109], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.121, stddev=0.0152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.31 0.32,0.32,0.34,0.36,0.37 0.38,0.39,0.39,0.39), mean=0.345, stddev=0.0203], bias-{mean,stddev}=-0.01633,0.02508, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.07,0.08,0.09), mean=0.051, stddev=0.0124], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.22,0.26 0.30,0.33,0.41,0.48,0.51 0.54,0.57,0.58,0.68), mean=0.406, stddev=0.0851], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.07), mean=0.0313, stddev=0.00494], oderiv-count=1.50394e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14914.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0519, stddev=0.0125], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.16), mean=0.0934, stddev=0.0132]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01068, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.49), mean=0.483, stddev=0.000559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.17), mean=0.12, stddev=0.0112], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.16,0.18,0.18 0.19,0.20,0.20,0.23), mean=0.162, stddev=0.0173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.30,0.30,0.32,0.35,0.36 0.36,0.38,0.38,0.39), mean=0.325, stddev=0.0236], bias-{mean,stddev}=-0.03042,0.01696, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.10 0.11,0.11,0.11,0.14), mean=0.088, stddev=0.00994], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.34,0.36,0.37 0.38,0.40,0.44,0.47,0.49 0.50,0.52,0.53,0.57), mean=0.437, stddev=0.042], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.018, stddev=0.00185], oderiv-count=1.52947e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14402.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.10 0.10,0.11,0.11,0.13), mean=0.0881, stddev=0.0103], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.14,0.15,0.15,0.17,0.17 0.18,0.18,0.19,0.26), mean=0.156, stddev=0.013]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.467, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.13 0.14,0.14,0.14,0.15), mean=0.116, stddev=0.0112], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.19,0.20,0.20,0.25), mean=0.16, stddev=0.0162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.32,0.34,0.35 0.36,0.37,0.37,0.39), mean=0.321, stddev=0.0219], bias-{mean,stddev}=-0.03164,0.01749, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.11,0.16), mean=0.0882, stddev=0.0108], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.34,0.37 0.38,0.40,0.43,0.47,0.49 0.52,0.53,0.54,0.56), mean=0.435, stddev=0.0449], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0178, stddev=0.00201], oderiv-count=1.4391e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13890.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.11,0.17), mean=0.0882, stddev=0.0111], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.18,0.18,0.19,0.28), mean=0.154, stddev=0.0135]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.47,0.47,0.47,0.47), mean=0.464, stddev=0.000622], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.11,0.12,0.13 0.14,0.14,0.14,0.16), mean=0.116, stddev=0.0114], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009932, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.19,0.20,0.22), mean=0.158, stddev=0.0167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.28 0.29,0.30,0.32,0.34,0.34 0.35,0.36,0.37,0.37), mean=0.317, stddev=0.0213], bias-{mean,stddev}=-0.03427,0.02026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.14), mean=0.0836, stddev=0.0115], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.32,0.34 0.36,0.39,0.43,0.46,0.49 0.50,0.52,0.53,0.57), mean=0.425, stddev=0.0491], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.018, stddev=0.00218], oderiv-count=1.4231e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13378.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0835, stddev=0.0118], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.16,0.17 0.17,0.18,0.18,0.25), mean=0.149, stddev=0.0143]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01027, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.465, stddev=0.00044], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.11,0.13,0.13 0.14,0.14,0.15,0.18), mean=0.116, stddev=0.012], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009896, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.19,0.20,0.22), mean=0.157, stddev=0.0179], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.28 0.29,0.30,0.32,0.34,0.34 0.35,0.36,0.37,0.38), mean=0.316, stddev=0.0225], bias-{mean,stddev}=-0.03163,0.02168, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.0843, stddev=0.0135], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.29,0.31,0.34 0.36,0.39,0.43,0.48,0.50 0.52,0.53,0.54,0.58), mean=0.428, stddev=0.0552], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.05), mean=0.0174, stddev=0.00246], oderiv-count=1.37843e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12866.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.0842, stddev=0.0135], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.13 0.13,0.14,0.15,0.16,0.16 0.17,0.18,0.18,0.22), mean=0.147, stddev=0.014]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.464, stddev=0.00127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.22), mean=0.115, stddev=0.0133], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009861, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.14,0.14,0.16,0.17,0.18 0.18,0.19,0.20,0.21), mean=0.157, stddev=0.0166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.28 0.29,0.29,0.31,0.33,0.34 0.35,0.36,0.36,0.38), mean=0.315, stddev=0.0212], bias-{mean,stddev}=-0.02914,0.02002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.06 0.07,0.08,0.09,0.10,0.10 0.10,0.11,0.11,0.14), mean=0.0849, stddev=0.0131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.30,0.34 0.36,0.38,0.43,0.47,0.49 0.51,0.52,0.54,0.59), mean=0.426, stddev=0.0533], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0169, stddev=0.00216], oderiv-count=1.28077e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12354.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.06 0.07,0.07,0.09,0.10,0.10 0.11,0.11,0.11,0.14), mean=0.0849, stddev=0.0132], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.12,0.13 0.13,0.14,0.15,0.16,0.17 0.17,0.18,0.20,0.27), mean=0.149, stddev=0.0155]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01043, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.472, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.16,0.18), mean=0.117, stddev=0.0141], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.19,0.20,0.21), mean=0.157, stddev=0.0185], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.29,0.30,0.32,0.33,0.34 0.35,0.36,0.36,0.39), mean=0.316, stddev=0.0218], bias-{mean,stddev}=-0.02717,0.0191, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.0839, stddev=0.0139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.27,0.29,0.32 0.35,0.38,0.42,0.46,0.48 0.50,0.52,0.53,0.61), mean=0.416, stddev=0.053], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0164, stddev=0.00191], oderiv-count=1.23366e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11842.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.07,0.07,0.08,0.10,0.10 0.11,0.11,0.12,0.15), mean=0.0841, stddev=0.0143], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.12,0.13 0.13,0.14,0.15,0.16,0.17 0.18,0.18,0.19,0.21), mean=0.151, stddev=0.0151]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48), mean=0.478, stddev=0.000323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.118, stddev=0.0163], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.12,0.13 0.14,0.15,0.16,0.18,0.18 0.19,0.20,0.20,0.22), mean=0.163, stddev=0.0174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.32,0.35,0.36 0.37,0.38,0.38,0.41), mean=0.326, stddev=0.0246], bias-{mean,stddev}=-0.02385,0.01796, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.22e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.14), mean=0.0908, stddev=0.0148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.27,0.30,0.34 0.36,0.39,0.43,0.46,0.48 0.50,0.52,0.53,0.55), mean=0.425, stddev=0.0508], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0159, stddev=0.00196], oderiv-count=1.16026e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11330.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.12,0.12,0.13,0.14), mean=0.0914, stddev=0.0152], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.19,0.19,0.20,0.24), mean=0.161, stddev=0.0157]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.471, stddev=0.000405], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.13,0.14 0.15,0.17,0.17,0.21), mean=0.116, stddev=0.0188], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.15,0.17,0.18,0.19 0.20,0.21,0.21,0.25), mean=0.17, stddev=0.0192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.39,0.40,0.41), mean=0.34, stddev=0.0234], bias-{mean,stddev}=-0.02483,0.01556, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.05e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.07,0.08,0.09,0.11,0.12 0.12,0.13,0.14,0.18), mean=0.0953, stddev=0.0169], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.31,0.33,0.35 0.36,0.38,0.43,0.46,0.49 0.50,0.52,0.54,0.57), mean=0.424, stddev=0.0489], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0173, stddev=0.002], oderiv-count=1.09274e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.07,0.08,0.09,0.11,0.11 0.12,0.13,0.14,0.19), mean=0.0947, stddev=0.0173], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.14,0.14 0.15,0.16,0.17,0.18,0.20 0.20,0.21,0.22,0.27), mean=0.17, stddev=0.0186]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.427984, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, params-rms=0.01427, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.457, stddev=0.000701], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.21,0.23,0.24,0.25 0.25,0.27,0.27,0.33), mean=0.228, stddev=0.0157], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.14 0.15,0.16,0.17,0.19,0.20 0.20,0.21,0.22,0.27), mean=0.172, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.32,0.33,0.34,0.36,0.37 0.37,0.38,0.39,0.41), mean=0.345, stddev=0.0181], bias-{mean,stddev}=-0.03935,0.02359, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.05 0.05,0.06,0.07,0.08,0.08 0.09,0.09,0.09,0.11), mean=0.0673, stddev=0.0122], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.23,0.26,0.28 0.31,0.34,0.39,0.44,0.46 0.48,0.50,0.51,0.56), mean=0.388, stddev=0.0587], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.09), mean=0.023, stddev=0.00331], oderiv-count=1.12691e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.05 0.05,0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.11), mean=0.0669, stddev=0.0124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.14,0.15,0.15,0.16), mean=0.127, stddev=0.0109]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, params-rms=0.01376, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.44, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.23,0.24 0.25,0.26,0.26,0.33), mean=0.219, stddev=0.0187], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -2e-08,-1e-08,2e-09,2e-08,3e-08 3e-08,4e-08,4e-08,5e-08), mean=2.39e-09, stddev=1.91e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.54,0.54 0.55,0.57,0.59,0.61,0.63 0.64,0.65,0.65,0.66), mean=0.591, stddev=0.0286]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000261982, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.17 0.22,0.26,0.31,0.37,0.41 0.45,0.49,0.51,0.94), mean=0.312, stddev=0.0871], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.96,0.99,1.0 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.07, stddev=0.048], bias-{mean,stddev}=0.0002831,0.05606, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.006847, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.02,0.05 0.06,0.09,0.11,0.13,0.14 0.14,0.15,0.15,0.18), mean=0.106, stddev=0.0274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.20 0.20,0.21,0.22,0.23,0.24 0.24,0.25,0.25,0.26), mean=0.219, stddev=0.012], bias-{mean,stddev}=-0.05982,0.05762, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.62e+05, self-repaired-proportion=0.0148712, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.002,0.004,0.006 0.009,0.01,0.03,0.06,0.07 0.09,0.10,0.11,0.16), mean=0.0353, stddev=0.0254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.06,0.07 0.09,0.13,0.26,0.44,0.51 0.62,0.72,0.74,0.81), mean=0.293, stddev=0.171], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0159, stddev=0.00468], oderiv-count=1.15334e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.002,0.004,0.006 0.008,0.01,0.03,0.06,0.07 0.09,0.10,0.11,0.16), mean=0.0351, stddev=0.0255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.09 0.10,0.11,0.14,0.21), mean=0.0676, stddev=0.0239]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000261982, l2-regularize=0.008, max-change=0.75, params-rms=0.009028, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.29 0.29,0.29,0.29,0.29,0.29 0.29,0.29,0.29,0.29), mean=0.289, stddev=0.000193], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.20 0.24,0.27,0.27,0.29), mean=0.138, stddev=0.0421], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-3e-08,-3e-08,-3e-08 -2e-08,-1e-08,-1e-09,1e-08,1e-08 2e-08,2e-08,3e-08,3e-08), mean=-2.11e-09, stddev=1.31e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.26 0.27,0.27,0.28,0.29,0.30 0.30,0.31,0.31,0.32), mean=0.283, stddev=0.0117]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00130991, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.09 0.16,0.29,0.53,0.70,0.78 0.85,0.91,0.94,1.3), mean=0.502, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,1.8,1.9,1.9 1.9,2.0,2.0,2.0), mean=1.83, stddev=0.0801], bias-{mean,stddev}=3.482e-09,0.06483, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-08,6e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00103, stddev=0.00117], oderiv-count=1.12992e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/37.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/38.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.40557 tdnnf2.linear:2.92108 tdnnf2.affine:2.90584 tdnnf3.linear:2.3755 tdnnf3.affine:2.4487 tdnnf4.linear:2.20756 tdnnf4.affine:2.31486 tdnnf5.linear:1.80589 tdnnf5.affine:1.8797 tdnnf6.linear:2.12649 tdnnf6.affine:2.25308 tdnnf7.linear:1.97833 tdnnf7.affine:2.15895 tdnnf8.linear:1.93048 tdnnf8.affine:2.10934 tdnnf9.linear:1.90211 tdnnf9.affine:2.06213 tdnnf10.linear:1.86081 tdnnf10.affine:2.00174 tdnnf11.linear:1.81761 tdnnf11.affine:1.96648 tdnnf12.linear:1.7767 tdnnf12.affine:1.96019 tdnnf13.linear:1.7354 tdnnf13.affine:2.05635 prefinal-l:2.18495 prefinal-chain.affine:2.16302 prefinal-chain.linear:1.60874 output.affine:2.00608 prefinal-xent.affine:1.21117 prefinal-xent.linear:0.762952 output-xent.affine:1.60453 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.0433 tdnnf2.linear:7.61184 tdnnf2.affine:6.96509 tdnnf3.linear:6.03488 tdnnf3.affine:5.57293 tdnnf4.linear:5.51083 tdnnf4.affine:5.16343 tdnnf5.linear:4.01685 tdnnf5.affine:4.02185 tdnnf6.linear:5.46967 tdnnf6.affine:5.3297 tdnnf7.linear:5.28253 tdnnf7.affine:5.26978 tdnnf8.linear:5.25263 tdnnf8.affine:5.24233 tdnnf9.linear:5.25928 tdnnf9.affine:5.21334 tdnnf10.linear:5.24919 tdnnf10.affine:5.17386 tdnnf11.linear:5.33935 tdnnf11.affine:5.1718 tdnnf12.linear:5.40707 tdnnf12.affine:5.32009 tdnnf13.linear:5.32508 tdnnf13.affine:5.53933 prefinal-l:7.3061 prefinal-chain.affine:5.71411 prefinal-chain.linear:7.04424 output.affine:17.4518 prefinal-xent.affine:4.3994 prefinal-xent.linear:4.62214 output-xent.affine:29.4644 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.397858 tdnnf2.linear:0.381158 tdnnf2.affine:0.416459 tdnnf3.linear:0.392065 tdnnf3.affine:0.438918 tdnnf4.linear:0.39958 tdnnf4.affine:0.447548 tdnnf5.linear:0.458307 tdnnf5.affine:0.467528 tdnnf6.linear:0.387369 tdnnf6.affine:0.422416 tdnnf7.linear:0.3729 tdnnf7.affine:0.409701 tdnnf8.linear:0.366723 tdnnf8.affine:0.401797 tdnnf9.linear:0.360114 tdnnf9.affine:0.394259 tdnnf10.linear:0.352706 tdnnf10.affine:0.385705 tdnnf11.linear:0.339039 tdnnf11.affine:0.379419 tdnnf12.linear:0.327021 tdnnf12.affine:0.367071 tdnnf13.linear:0.3246 tdnnf13.affine:0.369586 prefinal-l:0.29722 prefinal-chain.affine:0.378029 prefinal-chain.linear:0.227702 output.affine:0.114999 prefinal-xent.affine:0.2747 prefinal-xent.linear:0.16432 output-xent.affine:0.0544827 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 19 09:40:53 EDT 2022, elapsed time 1 seconds
