# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/0.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
# Started at Wed Jul 20 13:49:54 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001006,0.01285
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05901, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.78,0.79,0.80 0.82,0.84,0.87,0.91,0.94 0.95,0.97,0.99,1.0), mean=0.874, stddev=0.046], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.9,1.9,2.0 2.0,2.1,2.1,2.3), mean=1.89, stddev=0.0679], bias-{mean,stddev}=-0.01716,0.8488, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.06e+06, self-repaired-proportion=0.843033, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.78,1.2 1.5,1.9,2.1,3.2), mean=0.364, stddev=0.533], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.41,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.488, stddev=0.47], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.05,0.09,0.13,0.14 0.14,0.15,0.16,0.19), mean=0.0911, stddev=0.0418], oderiv-count=4.73552e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=23133.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.71,1.1 1.4,1.7,1.9,3.0), mean=0.337, stddev=0.495], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.11,0.13 0.15,0.16,0.17,0.26), mean=0.0592, stddev=0.0572]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02497, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.13, stddev=0.0012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.22,0.23 0.24,0.25,0.28,0.31,0.33 0.34,0.35,0.36,0.40), mean=0.28, stddev=0.0348], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.78,0.79,0.81 0.82,0.84,0.88,0.91,0.93 0.94,0.95,0.97,1.0), mean=0.876, stddev=0.0408], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.8,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.75, stddev=0.0376], bias-{mean,stddev}=0.004454,0.8396, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.09e+06, self-repaired-proportion=0.127194, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.006,0.01,0.04 0.08,0.14,0.43,0.91,1.2 1.5,1.8,2.2,3.5), mean=0.553, stddev=0.491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.03,0.07 0.12,0.20,0.51,0.78,0.87 0.93,0.96,0.98,1.0), mean=0.498, stddev=0.277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.005,0.009,0.01 0.02,0.04,0.05,0.08), mean=0.00798, stddev=0.00921], oderiv-count=4.66381e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=22877.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.01,0.03,0.06 0.11,0.18,0.46,0.90,1.2 1.4,1.7,2.1,3.3), mean=0.566, stddev=0.449], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.17,0.25 0.35,0.46,0.67,0.87,0.97 1.1,1.1,1.2,1.5), mean=0.664, stddev=0.244]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0), mean=1.03, stddev=0.000598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.23,0.24,0.26,0.27,0.28 0.29,0.30,0.31,0.35), mean=0.257, stddev=0.0205], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0546, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.78,0.79,0.81 0.82,0.84,0.87,0.91,0.92 0.94,0.96,0.97,1.0), mean=0.873, stddev=0.0395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.75, stddev=0.041], bias-{mean,stddev}=-0.00628,0.8408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.02e+06, self-repaired-proportion=0.028779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.06,0.09,0.13 0.18,0.27,0.58,1.0,1.4 1.6,1.9,2.0,3.3), mean=0.68, stddev=0.466], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.07,0.08,0.14 0.19,0.27,0.50,0.71,0.80 0.86,0.91,0.93,0.98), mean=0.497, stddev=0.224], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.01,0.04), mean=0.0034, stddev=0.00207], oderiv-count=4.63315e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=22621.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.11,0.17 0.21,0.31,0.62,1.0,1.3 1.5,1.8,1.9,3.0), mean=0.689, stddev=0.429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.37,0.44,0.50 0.58,0.69,0.92,1.1,1.2 1.3,1.4,1.5,1.7), mean=0.915, stddev=0.251]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02205, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.998, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.28,0.29,0.30,0.36), mean=0.249, stddev=0.0183], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.78,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.93,0.95,0.96,1.0), mean=0.87, stddev=0.0395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.74, stddev=0.0391], bias-{mean,stddev}=0.01133,0.9135, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.0210592, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.07,0.10,0.15 0.22,0.33,0.68,1.1,1.5 1.8,2.1,2.3,3.6), mean=0.771, stddev=0.511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.07,0.09,0.14 0.21,0.30,0.50,0.70,0.79 0.86,0.90,0.92,0.99), mean=0.499, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.003,0.004,0.006,0.007 0.009,0.01,0.01,0.05), mean=0.00473, stddev=0.00259], oderiv-count=1.51798e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7540.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.09,0.12,0.19 0.26,0.37,0.68,1.1,1.4 1.7,2.0,2.2,3.4), mean=0.773, stddev=0.473], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.41,0.48,0.59 0.68,0.80,1.0,1.3,1.4 1.5,1.6,1.7,1.8), mean=1.04, stddev=0.279]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02923, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.93 0.93,0.93,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.935, stddev=0.00171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.29,0.29 0.30,0.31,0.33,0.35,0.36 0.37,0.38,0.38,0.40), mean=0.33, stddev=0.0226], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.07678, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.74,0.75,0.78 0.80,0.82,0.86,0.91,0.94 0.97,0.99,1.0,1.0), mean=0.867, stddev=0.0569], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.4,2.4,2.4 2.4,2.4,2.5,2.5,2.5 2.5,2.6,2.6,2.6), mean=2.46, stddev=0.0545], bias-{mean,stddev}=-0.0002693,0.8736, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.0250988, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.06,0.09,0.14 0.19,0.29,0.59,1.1,1.4 1.7,2.1,2.2,3.1), mean=0.714, stddev=0.499], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.08,0.09,0.14 0.20,0.28,0.49,0.72,0.80 0.86,0.91,0.96,0.99), mean=0.494, stddev=0.223], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.004,0.006,0.007 0.008,0.01,0.01,0.08), mean=0.0048, stddev=0.0043], oderiv-count=1.4985e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7540.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.06,0.10,0.15 0.20,0.30,0.59,1.0,1.3 1.6,1.9,2.1,2.9), mean=0.698, stddev=0.463], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.30,0.36,0.46 0.57,0.67,0.94,1.2,1.3 1.4,1.5,1.6,1.9), mean=0.923, stddev=0.283]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.97 0.97,0.97,0.97,0.97,0.97 0.97,0.97,0.97,0.97), mean=0.968, stddev=0.00112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.26 0.27,0.28,0.28,0.31), mean=0.241, stddev=0.017], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05443, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.79,0.80 0.82,0.84,0.87,0.90,0.92 0.93,0.95,0.97,0.99), mean=0.87, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0373], bias-{mean,stddev}=-0.025,0.8284, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.49e+05, self-repaired-proportion=0.0107917, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.12,0.19 0.26,0.37,0.69,1.1,1.4 1.6,1.9,2.0,3.4), mean=0.763, stddev=0.457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.11,0.17 0.23,0.30,0.49,0.68,0.75 0.81,0.86,0.88,0.97), mean=0.491, stddev=0.198], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.006,0.008,0.01,0.02), mean=0.00378, stddev=0.00156], oderiv-count=1.44189e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7284.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.11,0.16,0.22 0.29,0.41,0.72,1.1,1.3 1.5,1.8,1.9,3.1), mean=0.774, stddev=0.425], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.43,0.51,0.62 0.73,0.86,1.1,1.3,1.4 1.5,1.7,1.7,1.9), mean=1.09, stddev=0.276]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.962, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.27,0.28,0.31), mean=0.24, stddev=0.0169], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05449, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.79,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.94,0.96,0.97,1.0), mean=0.871, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0375], bias-{mean,stddev}=0.0154,0.8833, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.58e+05, self-repaired-proportion=0.0120518, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.13,0.19 0.25,0.37,0.68,1.2,1.5 1.7,2.1,2.3,3.3), mean=0.798, stddev=0.504], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.12,0.17 0.21,0.30,0.49,0.70,0.77 0.84,0.90,0.92,0.96), mean=0.498, stddev=0.208], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.007,0.008,0.009,0.01), mean=0.00362, stddev=0.00148], oderiv-count=1.43174e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7028.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.16,0.23 0.29,0.41,0.71,1.2,1.4 1.7,2.0,2.2,3.1), mean=0.806, stddev=0.466], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.49,0.53,0.64 0.73,0.86,1.1,1.3,1.5 1.6,1.7,1.7,1.9), mean=1.1, stddev=0.279]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.956, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.27,0.28,0.32), mean=0.238, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05443, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.78,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.94,0.95,0.97,1.0), mean=0.87, stddev=0.0395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0374], bias-{mean,stddev}=-0.02245,0.8981, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.26e+05, self-repaired-proportion=0.0141151, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.12,0.18 0.25,0.36,0.70,1.1,1.5 1.7,2.1,2.4,3.0), mean=0.79, stddev=0.496], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.11,0.15 0.21,0.29,0.49,0.69,0.76 0.82,0.89,0.93,0.97), mean=0.49, stddev=0.206], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.009,0.03), mean=0.00358, stddev=0.00184], oderiv-count=1.40688e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6772.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.15,0.21 0.28,0.38,0.72,1.1,1.4 1.7,2.0,2.2,2.8), mean=0.793, stddev=0.461], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.45,0.49,0.61 0.71,0.84,1.1,1.3,1.5 1.6,1.7,1.8,2.0), mean=1.1, stddev=0.298]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.021, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.95, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.27,0.28,0.32), mean=0.237, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.78,0.79,0.80 0.82,0.84,0.87,0.90,0.92 0.94,0.95,0.96,1.0), mean=0.871, stddev=0.0391], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0392], bias-{mean,stddev}=-0.009699,0.8776, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.99e+05, self-repaired-proportion=0.0117423, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.10,0.13,0.18 0.26,0.38,0.73,1.2,1.4 1.7,2.0,2.2,3.2), mean=0.801, stddev=0.48], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.10,0.11,0.16 0.22,0.30,0.49,0.68,0.77 0.81,0.87,0.90,0.96), mean=0.492, stddev=0.202], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.009,0.03), mean=0.00343, stddev=0.00172], oderiv-count=1.29008e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6516.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.17,0.21 0.30,0.41,0.73,1.2,1.4 1.6,2.0,2.1,3.0), mean=0.804, stddev=0.446], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.41,0.53,0.62 0.73,0.86,1.1,1.4,1.5 1.6,1.7,1.8,2.1), mean=1.11, stddev=0.29]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02089, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.946, stddev=0.00156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.24,0.25,0.26 0.27,0.27,0.28,0.31), mean=0.236, stddev=0.018], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05446, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.79,0.80,0.81 0.82,0.84,0.87,0.90,0.92 0.94,0.96,0.97,1.0), mean=0.87, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0388], bias-{mean,stddev}=0.05926,0.8817, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.15e+05, self-repaired-proportion=0.0156376, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.11,0.14,0.20 0.27,0.39,0.73,1.2,1.5 1.8,2.1,2.4,3.0), mean=0.837, stddev=0.509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.12,0.18 0.24,0.31,0.51,0.71,0.77 0.83,0.89,0.92,0.98), mean=0.507, stddev=0.204], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.007,0.008,0.06), mean=0.00333, stddev=0.00235], oderiv-count=1.28291e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6260.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.15,0.16,0.23 0.30,0.42,0.75,1.2,1.5 1.7,2.0,2.3,2.8), mean=0.835, stddev=0.471], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.48,0.54,0.66 0.74,0.85,1.1,1.4,1.5 1.6,1.7,1.8,2.1), mean=1.12, stddev=0.296]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02078, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.94, stddev=0.000423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.26 0.26,0.27,0.28,0.31), mean=0.234, stddev=0.0172], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05432, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.78,0.79,0.80 0.82,0.83,0.87,0.90,0.92 0.93,0.95,0.96,1.0), mean=0.868, stddev=0.0402], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.74, stddev=0.0368], bias-{mean,stddev}=-0.04621,0.9036, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.17e+05, self-repaired-proportion=0.0119434, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.12,0.18 0.23,0.36,0.69,1.2,1.5 1.7,2.0,2.2,3.0), mean=0.79, stddev=0.492], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.12,0.16 0.21,0.28,0.49,0.67,0.77 0.82,0.87,0.89,0.98), mean=0.485, stddev=0.205], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.007,0.008,0.05), mean=0.00334, stddev=0.00189], oderiv-count=1.22957e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6004.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.15,0.21 0.27,0.38,0.70,1.2,1.4 1.6,1.9,2.1,2.8), mean=0.791, stddev=0.455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.42,0.49,0.60 0.70,0.83,1.1,1.3,1.5 1.6,1.7,1.8,2.0), mean=1.08, stddev=0.297]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.941, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.26 0.26,0.27,0.28,0.31), mean=0.235, stddev=0.0177], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.79,0.81 0.82,0.83,0.87,0.90,0.92 0.93,0.95,0.96,0.99), mean=0.868, stddev=0.0385], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0385], bias-{mean,stddev}=-0.02386,0.8786, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.98e+05, self-repaired-proportion=0.00963632, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.13,0.19 0.27,0.37,0.69,1.2,1.5 1.8,2.1,2.2,3.0), mean=0.797, stddev=0.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.13,0.16 0.22,0.30,0.48,0.67,0.77 0.82,0.88,0.89,0.96), mean=0.488, stddev=0.2], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.005,0.006,0.007,0.02), mean=0.00316, stddev=0.00128], oderiv-count=1.16829e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5748.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.16,0.23 0.30,0.41,0.70,1.1,1.4 1.7,2.0,2.1,2.8), mean=0.793, stddev=0.453], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.46,0.53,0.64 0.73,0.84,1.1,1.3,1.4 1.5,1.7,1.7,2.0), mean=1.07, stddev=0.28]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02065, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.935, stddev=0.00112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.26 0.26,0.27,0.27,0.31), mean=0.233, stddev=0.0174], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05431, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.79,0.80 0.82,0.83,0.87,0.90,0.92 0.93,0.95,0.96,1.0), mean=0.868, stddev=0.0402], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0387], bias-{mean,stddev}=-0.01166,0.8719, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.57e+05, self-repaired-proportion=0.00809385, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.13,0.14,0.19 0.27,0.38,0.71,1.2,1.5 1.7,2.0,2.2,2.8), mean=0.812, stddev=0.483], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.11,0.14,0.18 0.22,0.31,0.49,0.67,0.76 0.81,0.86,0.90,0.94), mean=0.49, stddev=0.195], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.004 0.005,0.006,0.007,0.08), mean=0.00313, stddev=0.00315], oderiv-count=1.1177e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5492.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.15,0.18,0.23 0.31,0.42,0.72,1.2,1.4 1.7,1.9,2.1,2.7), mean=0.81, stddev=0.446], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.47,0.55,0.63 0.73,0.85,1.1,1.3,1.5 1.6,1.7,1.7,2.1), mean=1.09, stddev=0.286]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, params-rms=0.02782, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.89, stddev=0.000846], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.42,0.44,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.444, stddev=0.0262], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05434, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.79,0.81 0.82,0.83,0.87,0.90,0.92 0.93,0.94,0.95,0.97), mean=0.869, stddev=0.0382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.74, stddev=0.0363], bias-{mean,stddev}=-0.007043,0.8877, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.7e+05, self-repaired-proportion=0.0221969, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.05,0.08,0.14 0.21,0.32,0.61,1.1,1.4 1.7,2.2,2.3,2.9), mean=0.736, stddev=0.505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.07,0.10,0.15 0.20,0.29,0.49,0.69,0.78 0.86,0.90,0.94,0.98), mean=0.492, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.007,0.009,0.01,0.08), mean=0.00398, stddev=0.0052], oderiv-count=1.11008e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5492.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.05,0.10,0.15 0.22,0.32,0.59,1.0,1.3 1.6,2.0,2.2,2.7), mean=0.707, stddev=0.465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.24,0.38,0.48 0.57,0.69,0.91,1.1,1.3 1.4,1.5,1.6,1.9), mean=0.915, stddev=0.275]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, params-rms=0.02833, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91), mean=0.907, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.45,0.48,0.49 0.50,0.51,0.52,0.58), mean=0.452, stddev=0.0303], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=5492.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -2e-08,-1e-08,6e-10,1e-08,3e-08 3e-08,4e-08,4e-08,4e-08), mean=4.27e-10, stddev=1.82e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.95,0.95,0.98 1.0,1.0,1.1,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.07, stddev=0.0621]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00075, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01411, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.002,0.01,0.03 0.06,0.10,0.21,0.29,0.32 0.35,0.39,0.40,0.74), mean=0.203, stddev=0.0986], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.65,0.66 0.68,0.71,0.75,0.79,0.82 0.83,0.84,0.85,0.88), mean=0.748, stddev=0.0518], bias-{mean,stddev}=3.651e-05,0.04361, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.77,0.79 0.80,0.82,0.85,0.89,0.91 0.92,0.94,0.95,0.98), mean=0.855, stddev=0.0404], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.9), mean=1.71, stddev=0.0383], bias-{mean,stddev}=0.0003503,0.8621, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.59e+05, self-repaired-proportion=0.0180017, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.07,0.10,0.14 0.22,0.33,0.62,1.1,1.4 1.6,2.0,2.2,3.3), mean=0.726, stddev=0.477], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.08,0.10,0.16 0.21,0.30,0.49,0.70,0.79 0.85,0.91,0.93,1.0), mean=0.495, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0006,0.0006,0.0007 0.0007,0.0008,0.001,0.001,0.002 0.002,0.002,0.003,0.03), mean=0.00126, stddev=0.00182], oderiv-count=1.1352e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5492.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.10,0.12,0.16 0.23,0.33,0.59,1.0,1.3 1.5,1.8,2.0,3.0), mean=0.688, stddev=0.437], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.38,0.41,0.49 0.57,0.67,0.88,1.1,1.2 1.3,1.4,1.4,1.8), mean=0.878, stddev=0.245]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, params-rms=0.02494, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.80,0.80,0.80 0.80,0.80,0.80,0.80,0.80 0.80,0.80,0.80,0.80), mean=0.798, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.33,0.35 0.36,0.37,0.40,0.42,0.44 0.45,0.46,0.46,0.48), mean=0.398, stddev=0.0307], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=5492.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-3e-08,-3e-08 -2e-08,-1e-08,-8e-10,1e-08,2e-08 3e-08,3e-08,4e-08,4e-08), mean=2.66e-11, stddev=1.62e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.67,0.69,0.71 0.73,0.77,0.84,0.92,0.97 1.0,1.0,1.1,1.2), mean=0.85, stddev=0.0913]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00375, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02988, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.07,0.34,0.67,0.78 0.87,0.94,0.97,1.2), mean=0.383, stddev=0.286], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,1.1,1.2,1.2 1.3,1.4,1.6,1.8,1.9 1.9,2.0,2.0,2.1), mean=1.57, stddev=0.215], bias-{mean,stddev}=1.996e-08,0.09513, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-06,5e-05,0.0001 0.0001,0.0002,0.0006,0.001,0.002 0.002,0.003,0.004,0.04), mean=0.000871, stddev=0.00117], oderiv-count=1.12602e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/0.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.74797 tdnnf2.linear:7.54153 tdnnf2.affine:7.6808 tdnnf3.linear:6.41146 tdnnf3.affine:6.75889 tdnnf4.linear:5.88277 tdnnf4.affine:6.7677 tdnnf5.linear:4.92127 tdnnf5.affine:6.23625 tdnnf6.linear:5.50964 tdnnf6.affine:6.33018 tdnnf7.linear:5.38573 tdnnf7.affine:6.44357 tdnnf8.linear:5.25574 tdnnf8.affine:6.45576 tdnnf9.linear:5.1794 tdnnf9.affine:6.38469 tdnnf10.linear:5.15824 tdnnf10.affine:6.43798 tdnnf11.linear:5.0866 tdnnf11.affine:6.47936 tdnnf12.linear:5.11149 tdnnf12.affine:6.44235 tdnnf13.linear:5.23303 tdnnf13.affine:6.45267 prefinal-l:6.7941 prefinal-chain.affine:6.46507 prefinal-chain.linear:5.49394 output.affine:12.2177 prefinal-xent.affine:6.55133 prefinal-xent.linear:6.05775 output-xent.affine:25.8999 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:39.0188 tdnnf2.linear:12.7854 tdnnf2.affine:38.8395 tdnnf3.linear:11.647 tdnnf3.affine:38.7994 tdnnf4.linear:11.2911 tdnnf4.affine:40.3854 tdnnf5.linear:10.5814 tdnnf5.affine:39.4231 tdnnf6.linear:10.9464 tdnnf6.affine:38.4697 tdnnf7.linear:10.8837 tdnnf7.affine:39.7199 tdnnf8.linear:10.8192 tdnnf8.affine:40.0386 tdnnf9.linear:10.7519 tdnnf9.affine:39.5777 tdnnf10.linear:10.6979 tdnnf10.affine:39.712 tdnnf11.linear:10.6387 tdnnf11.affine:40.1483 tdnnf12.linear:10.6432 tdnnf12.affine:39.5445 tdnnf13.linear:10.5751 tdnnf13.affine:39.3918 prefinal-l:14.245 prefinal-chain.affine:39.7641 prefinal-chain.linear:14.5073 output.affine:12.2177 prefinal-xent.affine:38.8844 prefinal-xent.linear:12.7705 output-xent.affine:25.8999 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.194692 tdnnf2.linear:0.666714 tdnnf2.affine:0.171102 tdnnf3.linear:0.567174 tdnnf3.affine:0.151726 tdnnf4.linear:0.519068 tdnnf4.affine:0.146169 tdnnf5.linear:0.434904 tdnnf5.affine:0.137754 tdnnf6.linear:0.486796 tdnnf6.affine:0.143516 tdnnf7.linear:0.476272 tdnnf7.affine:0.14149 tdnnf8.linear:0.464007 tdnnf8.affine:0.140593 tdnnf9.linear:0.458413 tdnnf9.affine:0.140638 tdnnf10.linear:0.456619 tdnnf10.affine:0.14133 tdnnf11.linear:0.449565 tdnnf11.affine:0.140624 tdnnf12.linear:0.450616 tdnnf12.affine:0.141949 tdnnf13.linear:0.463865 tdnnf13.affine:0.142634 prefinal-l:0.424705 prefinal-chain.affine:0.141723 prefinal-chain.linear:0.343721 output.affine:inf prefinal-xent.affine:0.145528 prefinal-xent.linear:0.378662 output-xent.affine:inf ]
# Accounting: time=1 threads=1
# Ended (code 0) at Wed Jul 20 13:49:55 EDT 2022, elapsed time 1 seconds
