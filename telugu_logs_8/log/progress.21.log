# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/21.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/20.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/21.mdl 
# Started at Tue Jul 19 21:06:15 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/21.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.09,0.13 0.18,0.26,0.35,0.50,0.63 0.75,0.91,1.1,1.5), mean=0.389, stddev=0.196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.56,0.60 0.62,0.66,0.84,1.1,1.2 1.5,1.6,1.6,1.6), mean=0.902, stddev=0.261], bias-{mean,stddev}=-0.005231,0.03552, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.96e+06, self-repaired-proportion=0.0394561, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0003,0.0004,0.0008 0.002,0.004,0.02,0.04,0.04 0.05,0.05,0.06,0.08), mean=0.023, stddev=0.0165], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.07 0.10,0.14,0.48,0.69,0.79 0.88,0.93,0.95,0.99), mean=0.444, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.09,0.12,0.14 0.17,0.20,0.23,0.32), mean=0.0959, stddev=0.0397], oderiv-count=4.72704e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47656.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,7e-05,0.0002,0.0006 0.001,0.004,0.02,0.04,0.04 0.05,0.05,0.06,0.07), mean=0.0228, stddev=0.0167], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0006,0.002,0.003 0.006,0.01,0.03,0.04,0.05 0.05,0.05,0.06,0.07), mean=0.0292, stddev=0.0153]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01921, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.86,0.87 0.87,0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87), mean=0.869, stddev=0.00213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.16,0.17,0.20,0.25,0.28 0.31,0.35,0.36,0.44), mean=0.211, stddev=0.0503], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01507, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.18,0.22,0.27,0.32 0.36,0.40,0.41,0.44), mean=0.234, stddev=0.0596], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.42,0.43 0.44,0.45,0.48,0.51,0.52 0.53,0.54,0.56,0.58), mean=0.481, stddev=0.0325], bias-{mean,stddev}=-0.0298,0.0506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.09 0.09,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.21), mean=0.116, stddev=0.0207], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.30,0.32,0.36 0.38,0.41,0.45,0.51,0.54 0.57,0.61,0.63,0.77), mean=0.457, stddev=0.0667], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00971, stddev=0.00224], oderiv-count=4.47181e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47144.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.08 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.17,0.22), mean=0.114, stddev=0.0215], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.19,0.21,0.23 0.25,0.26,0.28,0.38), mean=0.19, stddev=0.0339]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01386, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.627, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.15,0.17,0.19 0.20,0.21,0.22,0.24), mean=0.155, stddev=0.0224], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.19,0.23,0.25 0.27,0.31,0.32,0.37), mean=0.197, stddev=0.0408], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.38,0.40,0.42,0.43 0.44,0.45,0.45,0.49), mean=0.401, stddev=0.0256], bias-{mean,stddev}=-0.01778,0.02637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.82e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.26), mean=0.142, stddev=0.0212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.38,0.40 0.41,0.43,0.46,0.49,0.51 0.53,0.54,0.55,0.60), mean=0.461, stddev=0.0406], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.005,0.006,0.007,0.008 0.008,0.009,0.01,0.01), mean=0.00618, stddev=0.00109], oderiv-count=4.69978e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46632.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.12,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.26), mean=0.141, stddev=0.0222], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.21,0.24,0.27,0.28 0.30,0.32,0.34,0.45), mean=0.239, stddev=0.0367]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01332, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.60,0.60,0.60 0.60,0.60,0.60,0.60,0.60 0.60,0.60,0.61,0.61), mean=0.603, stddev=0.000977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.12 0.13,0.13,0.15,0.16,0.17 0.18,0.20,0.20,0.23), mean=0.149, stddev=0.0191], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.24,0.26,0.27,0.34), mean=0.186, stddev=0.0301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.33 0.35,0.35,0.37,0.40,0.41 0.43,0.44,0.45,0.46), mean=0.376, stddev=0.0271], bias-{mean,stddev}=-0.00951,0.02068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.16 0.17,0.18,0.19,0.27), mean=0.143, stddev=0.0174], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.39,0.41 0.42,0.43,0.46,0.49,0.51 0.52,0.54,0.54,0.56), mean=0.464, stddev=0.0351], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00943, stddev=0.00149], oderiv-count=1.46528e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15544, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.17,0.18,0.19,0.29), mean=0.14, stddev=0.0188], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.24,0.26,0.28 0.30,0.31,0.33,0.52), mean=0.237, stddev=0.0345]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01247, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.399, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.141, stddev=0.0126], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.22), mean=0.137, stddev=0.0227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.33,0.35 0.35,0.36,0.39,0.42,0.43 0.44,0.46,0.47,0.48), mean=0.391, stddev=0.0317], bias-{mean,stddev}=-0.005524,0.03063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.06,0.07,0.08,0.10,0.10 0.11,0.12,0.12,0.14), mean=0.0829, stddev=0.0166], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.26,0.27,0.30 0.33,0.37,0.43,0.50,0.54 0.56,0.60,0.62,0.71), mean=0.433, stddev=0.0789], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.04), mean=0.0171, stddev=0.00303], oderiv-count=1.46746e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15544, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.06,0.07,0.08,0.10,0.10 0.11,0.12,0.12,0.14), mean=0.0821, stddev=0.0168], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.12,0.14,0.16,0.18 0.18,0.20,0.21,0.25), mean=0.143, stddev=0.0255]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01304, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.60), mean=0.59, stddev=0.00209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.19,0.25), mean=0.146, stddev=0.0183], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.16,0.19,0.21,0.22 0.23,0.25,0.26,0.32), mean=0.185, stddev=0.0299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.34 0.34,0.35,0.37,0.39,0.41 0.42,0.43,0.45,0.48), mean=0.375, stddev=0.0265], bias-{mean,stddev}=-0.02374,0.01901, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.24), mean=0.14, stddev=0.0161], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.42,0.45,0.48,0.49 0.51,0.52,0.53,0.56), mean=0.448, stddev=0.0358], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00941, stddev=0.00124], oderiv-count=1.39667e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15032, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.18,0.24), mean=0.139, stddev=0.0169], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.24,0.26,0.28 0.29,0.30,0.30,0.43), mean=0.242, stddev=0.0275]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.539, stddev=0.00201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.16 0.16,0.17,0.18,0.23), mean=0.134, stddev=0.0168], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.29), mean=0.183, stddev=0.0288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.32,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.42,0.43), mean=0.369, stddev=0.0241], bias-{mean,stddev}=-0.02466,0.01907, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.17e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.16,0.17,0.17,0.20), mean=0.136, stddev=0.0157], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.38 0.39,0.41,0.44,0.48,0.50 0.51,0.52,0.54,0.56), mean=0.444, stddev=0.0383], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00984, stddev=0.00137], oderiv-count=1.40371e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14520, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.15,0.16 0.16,0.17,0.17,0.20), mean=0.135, stddev=0.0162], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.24,0.26,0.27 0.28,0.30,0.30,0.34), mean=0.237, stddev=0.026]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.55, stddev=0.00151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.136, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.16,0.18,0.21,0.22 0.24,0.25,0.25,0.29), mean=0.183, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.43,0.44), mean=0.371, stddev=0.0227], bias-{mean,stddev}=-0.02724,0.02175, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.39e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.10 0.11,0.11,0.13,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.13, stddev=0.0189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.33,0.34,0.36 0.38,0.40,0.44,0.48,0.49 0.51,0.53,0.54,0.56), mean=0.438, stddev=0.044], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.0104, stddev=0.00154], oderiv-count=1.3872e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14008, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.09,0.10 0.11,0.11,0.13,0.15,0.15 0.16,0.17,0.18,0.20), mean=0.13, stddev=0.0201], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.28,0.29,0.30,0.34), mean=0.23, stddev=0.0273]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57,0.57 0.57,0.58,0.58,0.58), mean=0.571, stddev=0.00204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.13,0.14,0.16,0.16 0.18,0.19,0.20,0.23), mean=0.141, stddev=0.0191], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.12 0.14,0.15,0.18,0.21,0.22 0.24,0.25,0.26,0.35), mean=0.182, stddev=0.0346], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.33 0.33,0.35,0.37,0.39,0.40 0.41,0.43,0.43,0.45), mean=0.369, stddev=0.0265], bias-{mean,stddev}=-0.02613,0.02326, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.69e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.13,0.14,0.15 0.16,0.17,0.18,0.21), mean=0.128, stddev=0.0211], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.32,0.35 0.37,0.40,0.43,0.47,0.49 0.51,0.52,0.54,0.59), mean=0.432, stddev=0.0485], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.0102, stddev=0.00164], oderiv-count=1.34502e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13496, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.13,0.14,0.16 0.16,0.18,0.18,0.20), mean=0.127, stddev=0.0216], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.26 0.28,0.29,0.30,0.34), mean=0.23, stddev=0.0257]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57), mean=0.572, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.26), mean=0.141, stddev=0.0204], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01165, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.12,0.15,0.18,0.22,0.23 0.24,0.26,0.27,0.30), mean=0.182, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.43,0.45,0.45), mean=0.372, stddev=0.0263], bias-{mean,stddev}=-0.02415,0.02138, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.129, stddev=0.0254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.28,0.32 0.35,0.39,0.43,0.46,0.48 0.50,0.53,0.53,0.56), mean=0.422, stddev=0.0553], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.0101, stddev=0.0017], oderiv-count=1.21504e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12984, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.20,0.21), mean=0.129, stddev=0.0256], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.24,0.26,0.27 0.29,0.30,0.31,0.33), mean=0.24, stddev=0.0266]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.60,0.60,0.60 0.60,0.60,0.60,0.60), mean=0.596, stddev=0.00133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.16,0.18 0.19,0.21,0.23,0.29), mean=0.147, stddev=0.0246], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01214, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.11,0.14,0.20,0.23,0.24 0.26,0.27,0.28,0.31), mean=0.188, stddev=0.05], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.34 0.35,0.37,0.39,0.41,0.42 0.44,0.44,0.45,0.46), mean=0.387, stddev=0.0273], bias-{mean,stddev}=-0.02311,0.01944, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.10,0.11,0.14,0.16,0.17 0.19,0.20,0.21,0.24), mean=0.137, stddev=0.0302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.25,0.30 0.33,0.36,0.41,0.46,0.48 0.49,0.52,0.53,0.57), mean=0.406, stddev=0.0602], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00966, stddev=0.00174], oderiv-count=1.24992e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12472, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.10,0.11,0.14,0.16,0.17 0.19,0.20,0.21,0.24), mean=0.137, stddev=0.0302], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.33,0.34,0.36,0.40), mean=0.272, stddev=0.032]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01296, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.58,0.58 0.58,0.58,0.59,0.59,0.59 0.59,0.59,0.59,0.59), mean=0.586, stddev=0.00184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.11,0.12,0.14,0.16,0.18 0.20,0.22,0.23,0.29), mean=0.144, stddev=0.028], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01255, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.12,0.14,0.19,0.25,0.27 0.29,0.31,0.31,0.35), mean=0.192, stddev=0.0581], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.37,0.40,0.42,0.44 0.45,0.46,0.47,0.49), mean=0.4, stddev=0.0286], bias-{mean,stddev}=-0.02343,0.01856, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.13,0.15,0.17 0.18,0.19,0.21,0.27), mean=0.13, stddev=0.0306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.23,0.24,0.27 0.30,0.33,0.38,0.43,0.45 0.47,0.49,0.50,0.54), mean=0.38, stddev=0.0602], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0108, stddev=0.00217], oderiv-count=1.16544e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11960, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.13,0.15,0.17 0.18,0.20,0.21,0.28), mean=0.129, stddev=0.031], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.24,0.26,0.29,0.32,0.35 0.36,0.38,0.40,0.46), mean=0.291, stddev=0.0414]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.538, stddev=0.00161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.11,0.12,0.15,0.17 0.19,0.22,0.24,0.31), mean=0.131, stddev=0.0312], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01209, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.12,0.14,0.18,0.22,0.26 0.29,0.33,0.34,0.36), mean=0.186, stddev=0.0549], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.35,0.36,0.39,0.41,0.42 0.43,0.44,0.45,0.47), mean=0.386, stddev=0.0253], bias-{mean,stddev}=-0.02187,0.02045, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.06 0.07,0.08,0.10,0.12,0.13 0.15,0.16,0.17,0.20), mean=0.0986, stddev=0.0273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.17,0.18,0.20 0.23,0.26,0.32,0.37,0.41 0.44,0.48,0.50,0.59), mean=0.32, stddev=0.0719], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0162, stddev=0.00324], oderiv-count=1.13574e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11448, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.06,0.08,0.09,0.12,0.13 0.14,0.16,0.16,0.20), mean=0.0969, stddev=0.0276], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.20 0.21,0.23,0.26,0.31,0.32 0.34,0.36,0.38,0.43), mean=0.265, stddev=0.0452]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0781893, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, params-rms=0.02352, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.76,0.76,0.76,0.76), mean=0.753, stddev=0.00174], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.32 0.33,0.35,0.37,0.40,0.42 0.44,0.47,0.49,0.52), mean=0.375, stddev=0.0355], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01404, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.12,0.15,0.21,0.27,0.30 0.33,0.37,0.38,0.51), mean=0.213, stddev=0.0714], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.42,0.43,0.45,0.47,0.48 0.49,0.50,0.51,0.54), mean=0.449, stddev=0.0254], bias-{mean,stddev}=-0.02283,0.02766, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.08,0.11,0.14,0.15 0.16,0.18,0.19,0.22), mean=0.107, stddev=0.0341], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.25 0.28,0.31,0.38,0.44,0.47 0.49,0.51,0.53,0.58), mean=0.374, stddev=0.0726], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.03,0.04), mean=0.0133, stddev=0.00462], oderiv-count=1.09843e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11448, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.07,0.10,0.13,0.15 0.16,0.17,0.18,0.21), mean=0.105, stddev=0.0335], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.19,0.21,0.23,0.25,0.26 0.28,0.29,0.30,0.34), mean=0.23, stddev=0.0286]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, params-rms=0.01848, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59), mean=0.591, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.35 0.37,0.40,0.41,0.49), mean=0.293, stddev=0.0396], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11448, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-5e-08 -4e-08,-3e-08,-1e-09,2e-08,3e-08 4e-08,5e-08,5e-08,8e-08), mean=-2.43e-09, stddev=2.62e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.82,0.84,0.86 0.87,0.90,0.94,1.0,1.0 1.0,1.1,1.1,1.1), mean=0.95, stddev=0.0632]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000849528, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02574, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.08,0.22 0.28,0.34,0.41,0.47,0.51 0.55,0.59,0.62,1.1), mean=0.398, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.4,1.5,1.5 1.5,1.6,1.6,1.7), mean=1.36, stddev=0.115], bias-{mean,stddev}=0.0004085,0.08178, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009905, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.04,0.06 0.07,0.12,0.16,0.19,0.21 0.22,0.23,0.23,0.25), mean=0.151, stddev=0.0472], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.29 0.29,0.30,0.31,0.33,0.34 0.35,0.36,0.37,0.40), mean=0.316, stddev=0.0201], bias-{mean,stddev}=-0.05058,0.05619, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.33e+05, self-repaired-proportion=0.0120785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.005,0.01,0.01 0.02,0.03,0.05,0.08,0.10 0.11,0.12,0.14,0.21), mean=0.0537, stddev=0.0303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.04,0.06,0.10 0.12,0.16,0.30,0.43,0.52 0.67,0.71,0.72,0.77), mean=0.313, stddev=0.162], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.006,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00983, stddev=0.00335], oderiv-count=1.08243e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11448, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.005,0.008,0.01 0.02,0.02,0.05,0.08,0.09 0.11,0.12,0.13,0.21), mean=0.0518, stddev=0.03], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.04,0.05,0.06 0.07,0.08,0.10,0.12,0.13 0.14,0.15,0.16,0.21), mean=0.103, stddev=0.0263]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000849528, l2-regularize=0.008, max-change=0.75, params-rms=0.01138, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.36 0.36,0.36,0.36,0.36,0.36 0.36,0.36,0.36,0.36), mean=0.364, stddev=0.000122], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.14,0.16,0.20,0.25 0.31,0.33,0.35,0.36), mean=0.174, stddev=0.0525], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11448, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -3e-08,-2e-08,-1e-09,2e-08,2e-08 3e-08,3e-08,4e-08,4e-08), mean=-9.52e-10, stddev=1.92e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.38,0.39,0.41,0.43,0.44 0.44,0.45,0.45,0.47), mean=0.409, stddev=0.0212]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00424764, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03404, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.08 0.15,0.28,0.52,0.69,0.78 0.84,0.89,0.92,1.2), mean=0.495, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.81, stddev=0.101], bias-{mean,stddev}=3.747e-09,0.07318, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-07,5e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00102, stddev=0.00117], oderiv-count=1.09459e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/20.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/21.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.78137 tdnnf2.linear:5.01056 tdnnf2.affine:5.04454 tdnnf3.linear:3.75408 tdnnf3.affine:4.26201 tdnnf4.linear:3.64557 tdnnf4.affine:4.12929 tdnnf5.linear:2.87758 tdnnf5.affine:3.19555 tdnnf6.linear:3.40858 tdnnf6.affine:3.88127 tdnnf7.linear:3.07206 tdnnf7.affine:3.66153 tdnnf8.linear:3.09267 tdnnf8.affine:3.62249 tdnnf9.linear:3.11692 tdnnf9.affine:3.51345 tdnnf10.linear:3.00117 tdnnf10.affine:3.46106 tdnnf11.linear:2.8955 tdnnf11.affine:3.45755 tdnnf12.linear:2.84793 tdnnf12.affine:3.6381 tdnnf13.linear:2.93864 tdnnf13.affine:3.88093 prefinal-l:4.29324 prefinal-chain.affine:4.33076 prefinal-chain.linear:3.48797 output.affine:5.93721 prefinal-xent.affine:2.34863 prefinal-xent.linear:1.47462 output-xent.affine:4.32647 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.9745 tdnnf2.linear:9.8366 tdnnf2.affine:7.93916 tdnnf3.linear:7.09534 tdnnf3.affine:6.50897 tdnnf4.linear:6.81886 tdnnf4.affine:6.06916 tdnnf5.linear:4.51572 tdnnf5.affine:4.55215 tdnnf6.linear:6.67664 tdnnf6.affine:6.08774 tdnnf7.linear:6.10239 tdnnf7.affine:6.00781 tdnnf8.linear:6.21828 tdnnf8.affine:6.05379 tdnnf9.linear:6.45566 tdnnf9.affine:6.0246 tdnnf10.linear:6.46846 tdnnf10.affine:6.05245 tdnnf11.linear:6.74259 tdnnf11.affine:6.2896 tdnnf12.linear:6.63318 tdnnf12.affine:6.49421 tdnnf13.linear:6.08657 tdnnf13.affine:6.26569 prefinal-l:12.0448 prefinal-chain.affine:7.28111 prefinal-chain.linear:9.46399 output.affine:22.3101 prefinal-xent.affine:5.61889 prefinal-xent.linear:5.82733 output-xent.affine:29.1995 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.624393 tdnnf2.linear:0.505125 tdnnf2.affine:0.630363 tdnnf3.linear:0.524058 tdnnf3.affine:0.648603 tdnnf4.linear:0.530259 tdnnf4.affine:0.677167 tdnnf5.linear:0.632709 tdnnf5.affine:0.694875 tdnnf6.linear:0.50907 tdnnf6.affine:0.638096 tdnnf7.linear:0.501686 tdnnf7.affine:0.607228 tdnnf8.linear:0.495504 tdnnf8.affine:0.597461 tdnnf9.linear:0.483355 tdnnf9.affine:0.580863 tdnnf10.linear:0.465154 tdnnf10.affine:0.570948 tdnnf11.linear:0.429354 tdnnf11.affine:0.547435 tdnnf12.linear:0.426357 tdnnf12.affine:0.55856 tdnnf13.linear:0.480605 tdnnf13.affine:0.61441 prefinal-l:0.358202 prefinal-chain.affine:0.594129 prefinal-chain.linear:0.366581 output.affine:0.263848 prefinal-xent.affine:0.415912 prefinal-xent.linear:0.251197 output-xent.affine:0.148225 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 19 21:06:15 EDT 2022, elapsed time 0 seconds
