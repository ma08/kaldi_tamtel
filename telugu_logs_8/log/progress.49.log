# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/48.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl 
# Started at Tue Jul 19 22:54:37 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02503, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.21,0.24 0.26,0.28,0.32,0.40,0.48 0.59,0.75,0.82,1.0), mean=0.352, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.48,0.51,0.52 0.54,0.58,0.73,0.91,1.1 1.2,1.3,1.3,1.4), mean=0.773, stddev=0.21], bias-{mean,stddev}=-0.005511,0.02449, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.2e+06, self-repaired-proportion=0.00346411, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.002,0.003,0.004 0.005,0.007,0.02,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.017, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.14 0.18,0.24,0.44,0.65,0.76 0.83,0.89,0.91,0.96), mean=0.456, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.10,0.12,0.14,0.16 0.18,0.23,0.26,0.33), mean=0.124, stddev=0.0344], oderiv-count=4.7625e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46705, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.002,0.003 0.004,0.006,0.02,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0168, stddev=0.0105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.008,0.009,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0231, stddev=0.00716]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01597, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.72,0.72,0.72 0.72,0.72,0.72,0.72,0.72 0.72,0.72,0.72,0.72), mean=0.723, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.14,0.15 0.15,0.16,0.18,0.20,0.21 0.23,0.24,0.26,0.30), mean=0.179, stddev=0.0242], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.17,0.18,0.20,0.23,0.26 0.29,0.32,0.33,0.36), mean=0.209, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.38 0.39,0.40,0.42,0.44,0.45 0.47,0.48,0.48,0.50), mean=0.425, stddev=0.0247], bias-{mean,stddev}=-0.03065,0.04231, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.17e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.06,0.07,0.08,0.09,0.10 0.10,0.10,0.11,0.13), mean=0.0786, stddev=0.015], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.23,0.28,0.32 0.35,0.38,0.44,0.50,0.54 0.57,0.61,0.64,0.76), mean=0.441, stddev=0.0785], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.04), mean=0.015, stddev=0.00332], oderiv-count=4.62176e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46193, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.06,0.06,0.08,0.09,0.10 0.10,0.10,0.11,0.13), mean=0.0768, stddev=0.0154], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.17,0.17,0.20), mean=0.13, stddev=0.0163]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01204, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.55,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.545, stddev=0.000977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.12,0.13,0.15,0.15 0.16,0.17,0.18,0.20), mean=0.136, stddev=0.0134], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.17,0.20,0.21 0.24,0.26,0.26,0.29), mean=0.178, stddev=0.0273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.32 0.33,0.35,0.36,0.38,0.39 0.40,0.40,0.41,0.43), mean=0.36, stddev=0.0217], bias-{mean,stddev}=-0.01953,0.0216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.96e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.109, stddev=0.0131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.41,0.43,0.46,0.50,0.51 0.52,0.54,0.56,0.58), mean=0.461, stddev=0.0411], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.007,0.008,0.008,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00875, stddev=0.00146], oderiv-count=4.5575e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45681, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.14,0.14,0.16), mean=0.107, stddev=0.0136], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.16,0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.27), mean=0.18, stddev=0.0181]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01142, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.517, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.18), mean=0.129, stddev=0.0119], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.15,0.17,0.18,0.19 0.20,0.22,0.22,0.24), mean=0.168, stddev=0.0189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.38,0.39,0.40), mean=0.338, stddev=0.023], bias-{mean,stddev}=-0.01176,0.01519, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.18), mean=0.114, stddev=0.0113], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.42,0.43,0.46,0.49,0.51 0.52,0.54,0.55,0.57), mean=0.463, stddev=0.0332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0136, stddev=0.00174], oderiv-count=1.51488e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15227, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.18), mean=0.112, stddev=0.012], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.16,0.17,0.19,0.20,0.21 0.22,0.23,0.24,0.30), mean=0.187, stddev=0.0193]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01196, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.39), mean=0.383, stddev=0.0012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.12 0.12,0.13,0.13,0.14,0.15 0.15,0.15,0.16,0.16), mean=0.135, stddev=0.00888], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.0116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.17,0.17,0.19), mean=0.13, stddev=0.0161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.34 0.35,0.35,0.37,0.39,0.40 0.41,0.42,0.43,0.43), mean=0.371, stddev=0.0225], bias-{mean,stddev}=-0.01671,0.02696, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.06,2955392000.0,33482596352.0,49295683584.0 61359636480.0,77103194112.0,85924192256.0,113041440768.0), mean=1.59e+10, stddev=2.2e+10], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.24,0.28 0.31,0.35,0.42,0.48,0.51 0.54,0.57,0.59,0.71), mean=0.415, stddev=0.0805], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.05), mean=0.0233, stddev=0.00358], oderiv-count=1.39238e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15227, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.11), mean=0.0633, stddev=0.0136], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.16), mean=0.112, stddev=0.0146]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.5, stddev=0.000913], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.12,0.13,0.14 0.14,0.15,0.15,0.17), mean=0.124, stddev=0.0104], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01063, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.17,0.18,0.19 0.20,0.21,0.21,0.28), mean=0.169, stddev=0.0193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.39,0.40,0.42), mean=0.339, stddev=0.0245], bias-{mean,stddev}=-0.026,0.01495, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.09 0.09,0.10,0.11,0.11,0.12 0.12,0.13,0.13,0.20), mean=0.106, stddev=0.0103], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.36,0.37,0.39 0.40,0.42,0.45,0.48,0.50 0.51,0.52,0.53,0.57), mean=0.45, stddev=0.038], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0141, stddev=0.00149], oderiv-count=1.40826e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14715, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.08,0.09 0.09,0.10,0.11,0.11,0.12 0.12,0.13,0.13,0.19), mean=0.106, stddev=0.0109], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.21,0.22,0.27), mean=0.182, stddev=0.0148]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.486, stddev=0.000559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.17), mean=0.121, stddev=0.0105], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.21,0.21,0.23), mean=0.167, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.31,0.32,0.33,0.35,0.37 0.38,0.39,0.39,0.40), mean=0.335, stddev=0.0223], bias-{mean,stddev}=-0.02866,0.01544, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.08,0.09 0.09,0.10,0.10,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.105, stddev=0.0118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.34,0.36,0.37 0.39,0.41,0.44,0.48,0.50 0.51,0.53,0.54,0.57), mean=0.443, stddev=0.043], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0144, stddev=0.00164], oderiv-count=1.44506e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14203, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.103, stddev=0.0122], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.21,0.22,0.30), mean=0.179, stddev=0.0157]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01086, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.491, stddev=0.000922], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.16), mean=0.122, stddev=0.0115], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.11,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.20,0.21,0.22), mean=0.166, stddev=0.022], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.29,0.30 0.30,0.31,0.33,0.35,0.36 0.37,0.38,0.38,0.42), mean=0.334, stddev=0.0229], bias-{mean,stddev}=-0.03131,0.01715, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.57e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.08,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.102, stddev=0.0142], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.27,0.32,0.35 0.38,0.40,0.44,0.48,0.50 0.51,0.53,0.53,0.57), mean=0.436, stddev=0.0514], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0143, stddev=0.00173], oderiv-count=1.32442e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13691, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.08 0.08,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.101, stddev=0.0146], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.16,0.18,0.19,0.20 0.20,0.21,0.22,0.29), mean=0.176, stddev=0.0166]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.496, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.15,0.15,0.16,0.18), mean=0.123, stddev=0.0127], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.12 0.14,0.15,0.17,0.18,0.19 0.20,0.20,0.21,0.30), mean=0.163, stddev=0.0252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.29 0.30,0.31,0.33,0.35,0.36 0.37,0.39,0.40,0.40), mean=0.329, stddev=0.0239], bias-{mean,stddev}=-0.02832,0.01719, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.07 0.08,0.09,0.10,0.11,0.12 0.13,0.13,0.14,0.23), mean=0.1, stddev=0.0177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.24,0.32 0.36,0.39,0.43,0.48,0.50 0.52,0.53,0.54,0.57), mean=0.428, stddev=0.0648], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0137, stddev=0.00168], oderiv-count=1.29824e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13179, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.07 0.08,0.09,0.10,0.11,0.12 0.13,0.13,0.14,0.23), mean=0.0992, stddev=0.0178], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.16,0.18,0.19,0.20 0.20,0.21,0.22,0.32), mean=0.177, stddev=0.0167]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.492, stddev=0.00112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.15,0.15,0.16,0.19), mean=0.122, stddev=0.0138], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01027, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.10 0.13,0.15,0.17,0.18,0.19 0.20,0.21,0.21,0.24), mean=0.162, stddev=0.0292], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.31,0.32,0.35,0.36 0.37,0.38,0.38,0.40), mean=0.328, stddev=0.0243], bias-{mean,stddev}=-0.02424,0.01661, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.41e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.07,0.08 0.09,0.11,10160683008.0,43176169472.0,62752903168.0 83334807552.0,110037549056.0,126909382656.0,185001508864.0), mean=2.25e+10, stddev=2.97e+10], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.18,0.31 0.34,0.38,0.43,0.48,0.50 0.51,0.53,0.54,0.60), mean=0.42, stddev=0.0721], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0133, stddev=0.00175], oderiv-count=1.28442e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12667, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.07,0.08 0.09,0.11,819,3480,5059 6718,8870,10230.1,14912.8), mean=1.82e+03, stddev=2.4e+03], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.16 0.17,0.19,2467857664.0,10068275200.0,13724487680.0 17582958592.0,22213138432.0,25796870144.0,36271071232.0), mean=5.03e+09, stddev=6.23e+09]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.502, stddev=0.000752], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.15 0.15,0.16,0.16,0.20), mean=0.125, stddev=0.0162], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.10 0.12,0.14,0.17,0.19,0.20 0.21,0.21,0.22,0.23), mean=0.164, stddev=0.0332], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.30,0.31,0.33,0.36,0.37 0.38,0.39,0.39,0.40), mean=0.333, stddev=0.0253], bias-{mean,stddev}=-0.02213,0.0157, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.06 0.07,0.08,0.10,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.103, stddev=0.0236], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.19,0.29 0.33,0.37,0.42,0.46,0.49 0.50,0.52,0.53,0.57), mean=0.411, stddev=0.0721], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0129, stddev=0.00172], oderiv-count=1.12864e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12155, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.06 0.07,0.08,0.10,0.12,0.13 0.14,0.15,0.15,0.18), mean=0.102, stddev=0.0238], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.16,0.17 0.18,0.18,0.20,0.22,0.23 0.24,0.25,0.26,0.28), mean=0.201, stddev=0.0217]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01055, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48), mean=0.477, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.23), mean=0.118, stddev=0.0185], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.10 0.12,0.14,0.16,0.19,0.21 0.22,0.23,0.23,0.25), mean=0.163, stddev=0.0375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.31,0.31,0.33,0.36,0.36 0.37,0.38,0.39,0.40), mean=0.334, stddev=0.0227], bias-{mean,stddev}=-0.02288,0.01391, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.34e+05, self-repaired-proportion=0.00141022, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.06,0.08,0.10,0.10 0.11,0.12,0.12,0.16), mean=0.0792, stddev=0.0198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.14,0.24 0.28,0.31,0.37,0.42,0.44 0.46,0.48,0.51,0.61), mean=0.361, stddev=0.0742], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0157, stddev=0.00226], oderiv-count=1.17683e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11643, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.08,457,1782,2742 3602,4585,4890,8537), mean=955, stddev=1.26e+03], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.19,0.20,2138887424.0,7658420736.0,11688523776.0 15532063744.0,18671482880.0,20913819648.0,31121786880.0), mean=4.12e+09, stddev=5.26e+09]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009907, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.448, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.09,0.10,0.11,0.12,0.14 0.15,0.16,0.17,0.19), mean=0.111, stddev=0.0186], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009967, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.09,0.10 0.11,0.12,0.15,0.19,0.20 0.22,0.23,0.24,0.26), mean=0.155, stddev=0.0364], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.32,0.34,0.35 0.35,0.36,0.36,0.38), mean=0.318, stddev=0.0203], bias-{mean,stddev}=-0.02782,0.02457, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.21e+05, self-repaired-proportion=0.0185406, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.0006,0.005,0.02 0.02,0.03,0.04,0.06,0.07 0.08,0.10,0.11,0.16), mean=0.044, stddev=0.0202], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.06,0.12 0.16,0.20,0.27,0.34,0.39 0.45,0.53,0.59,0.70), mean=0.274, stddev=0.101], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.04 0.05,0.09,0.10,0.15), mean=0.0296, stddev=0.0139], oderiv-count=1.08307e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11131, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.005,0.02 0.02,0.03,0.04,0.05,0.07 0.08,0.10,0.11,0.16), mean=0.0431, stddev=0.0202], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.007,0.03,0.09 0.11,0.13,0.16,0.18,0.19 0.20,0.21,0.22,0.24), mean=0.154, stddev=0.0368]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, params-rms=0.01722, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.551, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.24,0.26,0.27,0.29,0.30 0.31,0.32,0.33,0.36), mean=0.275, stddev=0.0234], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01191, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.13 0.15,0.17,0.19,0.21,0.23 0.24,0.26,0.27,0.35), mean=0.187, stddev=0.0346], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.35,0.36,0.38,0.40,0.41 0.42,0.42,0.44,0.47), mean=0.381, stddev=0.021], bias-{mean,stddev}=-0.03353,0.02435, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.05,0.06,0.08,0.08 0.09,0.10,0.11,0.13), mean=0.0655, stddev=0.016], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.20,0.24 0.27,0.31,0.37,0.42,0.45 0.48,0.51,0.53,0.58), mean=0.367, stddev=0.0714], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.07), mean=0.0249, stddev=0.00475], oderiv-count=1.15424e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11131, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.04,0.05,0.06,0.08,0.08 0.09,0.10,0.11,0.13), mean=0.0638, stddev=0.016], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.21), mean=0.126, stddev=0.0145]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, params-rms=0.01534, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.491, stddev=0.000669], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.20 0.21,0.22,0.24,0.26,0.28 0.30,0.32,0.34,0.39), mean=0.244, stddev=0.0287], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11131, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,-2e-09,2e-08,3e-08 4e-08,4e-08,5e-08,6e-08), mean=-1.26e-09, stddev=2.25e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.58,0.59 0.60,0.61,0.63,0.66,0.68 0.69,0.70,0.71,0.72), mean=0.637, stddev=0.0314]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000383265, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02129, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.19 0.23,0.28,0.33,0.39,0.43 0.47,0.51,0.53,0.99), mean=0.329, stddev=0.088], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,1.0,1.0 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.13, stddev=0.0589], bias-{mean,stddev}=0.000333,0.06335, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.007591, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.02,0.05 0.06,0.10,0.12,0.14,0.15 0.15,0.16,0.17,0.22), mean=0.117, stddev=0.0326], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.26 0.27,0.28,0.28,0.29), mean=0.242, stddev=0.0156], bias-{mean,stddev}=-0.05939,0.05233, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.3e+05, self-repaired-proportion=0.0216789, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.002,0.004,0.006 0.008,0.01,0.03,0.05,0.07 0.08,0.09,0.11,0.16), mean=0.0322, stddev=0.0246], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.07 0.08,0.12,0.24,0.40,0.50 0.67,0.74,0.77,0.82), mean=0.27, stddev=0.173], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.008,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0178, stddev=0.00548], oderiv-count=1.12429e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11131, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.002,0.003,0.006 0.008,0.01,0.03,0.05,0.07 0.08,0.09,0.10,0.15), mean=0.0313, stddev=0.0241], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.11,0.12,0.18), mean=0.0637, stddev=0.0235]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, params-rms=0.00995, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.32,0.32 0.32,0.32,0.32,0.32,0.32 0.32,0.32,0.32,0.32), mean=0.318, stddev=0.000228], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.11 0.11,0.12,0.13,0.16,0.24 0.28,0.31,0.31,0.32), mean=0.151, stddev=0.0516], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11131, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-2e-08 -2e-08,-1e-08,-6e-10,1e-08,2e-08 2e-08,3e-08,4e-08,4e-08), mean=-6.7e-10, stddev=1.49e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.28,0.28,0.29,0.31,0.32 0.32,0.33,0.33,0.35), mean=0.296, stddev=0.016]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00191632, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03451, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.09 0.16,0.29,0.53,0.70,0.79 0.85,0.92,0.94,1.3), mean=0.503, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,1.8,1.9,1.9 2.0,2.0,2.0,2.1), mean=1.83, stddev=0.0935], bias-{mean,stddev}=4.313e-09,0.06973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-09,5e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.09702e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/48.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.53457 tdnnf2.linear:3.66201 tdnnf2.affine:3.49953 tdnnf3.linear:2.84686 tdnnf3.affine:3.00719 tdnnf4.linear:2.7396 tdnnf4.affine:2.89433 tdnnf5.linear:2.1621 tdnnf5.affine:2.31732 tdnnf6.linear:2.58155 tdnnf6.affine:2.75225 tdnnf7.linear:2.40031 tdnnf7.affine:2.64568 tdnnf8.linear:2.3667 tdnnf8.affine:2.57584 tdnnf9.linear:2.32525 tdnnf9.affine:2.49408 tdnnf10.linear:2.25544 tdnnf10.affine:2.43154 tdnnf11.linear:2.19335 tdnnf11.affine:2.42752 tdnnf12.linear:2.10265 tdnnf12.affine:2.52103 tdnnf13.linear:2.19953 tdnnf13.affine:2.6852 prefinal-l:2.86356 prefinal-chain.affine:2.75905 prefinal-chain.linear:2.1461 output.affine:2.83104 prefinal-xent.affine:1.51638 prefinal-xent.linear:0.970819 output-xent.affine:2.27181 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9081 tdnnf2.linear:8.17473 tdnnf2.affine:7.00631 tdnnf3.linear:6.16699 tdnnf3.affine:5.85093 tdnnf4.linear:5.84687 tdnnf4.affine:5.45362 tdnnf5.linear:4.32871 tdnnf5.affine:4.32192 tdnnf6.linear:5.65365 tdnnf6.affine:5.52637 tdnnf7.linear:5.49968 tdnnf7.affine:5.47098 tdnnf8.linear:5.55854 tdnnf8.affine:5.47051 tdnnf9.linear:5.60905 tdnnf9.affine:5.37973 tdnnf10.linear:5.56556 tdnnf10.affine:5.34354 tdnnf11.linear:5.68373 tdnnf11.affine:5.41633 tdnnf12.linear:5.3991 tdnnf12.affine:5.41701 tdnnf13.linear:5.07233 tdnnf13.affine:5.23929 prefinal-l:8.81915 prefinal-chain.affine:6.24166 prefinal-chain.linear:7.85161 output.affine:18.4112 prefinal-xent.affine:4.63902 prefinal-xent.linear:5.09435 output-xent.affine:29.5759 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.461306 tdnnf2.linear:0.443914 tdnnf2.affine:0.493232 tdnnf3.linear:0.455546 tdnnf3.affine:0.507604 tdnnf4.linear:0.463559 tdnnf4.affine:0.526188 tdnnf5.linear:0.493999 tdnnf5.affine:0.529791 tdnnf6.linear:0.452388 tdnnf6.affine:0.493203 tdnnf7.linear:0.433781 tdnnf7.affine:0.47928 tdnnf8.linear:0.422654 tdnnf8.affine:0.46665 tdnnf9.linear:0.410932 tdnnf9.affine:0.459182 tdnnf10.linear:0.402111 tdnnf10.affine:0.451147 tdnnf11.linear:0.382385 tdnnf11.affine:0.443799 tdnnf12.linear:0.385901 tdnnf12.affine:0.461274 tdnnf13.linear:0.429972 tdnnf13.affine:0.508415 prefinal-l:0.322218 prefinal-chain.affine:0.439168 prefinal-chain.linear:0.270817 output.affine:0.153204 prefinal-xent.affine:0.325084 prefinal-xent.linear:0.189606 output-xent.affine:0.0767752 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 19 22:54:37 EDT 2022, elapsed time 0 seconds
