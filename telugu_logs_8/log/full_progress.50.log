# nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl 
# Started at Tue Jul 19 22:56:36 EDT 2022
#
nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.10,0.12 0.13,0.14,0.16,0.19,0.20 0.23,0.24,0.26,0.28), mean=0.166, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.23 0.24,0.26,0.33,0.40,0.50 0.58,0.64,0.67,0.71), mean=0.349, stddev=0.105], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.20,0.31,0.44,0.55 0.62,0.69,0.72,0.77), mean=0.334, stddev=0.146], bias-{mean,stddev}=0.0001643,0.008145, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.21,-0.18,-0.12 -0.08,-0.04,0.01,0.09,0.14 0.18,0.21,0.23,0.42), mean=0.0216, stddev=0.091], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.5,-3.0,-2.5,-1.8 -1.2,-0.60,0.44,1.7,2.4 3.0,3.6,4.0,7.0), mean=0.51, stddev=1.47], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.12,0.20,0.24 0.27,0.31,0.33,0.51), mean=0.111, stddev=0.098], oderiv-count=297920
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=266.502, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.9,-1.6,-1.2 -0.93,-0.57,-0.009,0.62,1.0 1.3,1.7,2.0,3.2), mean=0.0147, stddev=0.781], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.03,0.10,0.13,0.18), mean=0.00482, stddev=0.0218]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.00703, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.30,0.30,0.32,0.33,0.34 0.35,0.35,0.36,0.37), mean=0.318, stddev=0.0181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.07,0.08,0.09,0.09 0.10,0.10,0.10,0.12), mean=0.0785, stddev=0.0129], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.13 0.14,0.17,0.27,0.42,0.47 0.51,0.53,0.54,0.56), mean=0.292, stddev=0.125], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.006708, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.13,0.14,0.15), mean=0.107, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.20,0.20 0.20,0.21,0.21,0.22,0.23 0.23,0.23,0.24,0.24), mean=0.214, stddev=0.00904], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.06,0.15,0.29,0.36 0.41,0.43,0.45,0.49), mean=0.178, stddev=0.12], bias-{mean,stddev}=8.474e-05,0.008645, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.3e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.70,-0.60,-0.41 -0.21,-0.04,0.37,0.76,0.97 1.1,1.3,1.3,1.6), mean=0.365, stddev=0.462], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.6,-3.8,-3.2,-2.2 -1.5,-0.83,0.65,2.0,2.7 3.5,4.3,4.9,5.8), mean=0.619, stddev=1.73], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.03,0.04 0.04,0.05,0.06,0.08), mean=0.0115, stddev=0.016], oderiv-count=145152
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=266.502, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-3.0,-2.7,-2.1 -1.5,-0.92,0.12,1.2,1.8 2.2,2.6,2.8,4.0), mean=0.119, stddev=1.27], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.34 0.49,0.62,0.70,0.90), mean=0.0661, stddev=0.167]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.005431, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.22,0.23 0.23,0.24,0.24,0.26,0.26 0.26,0.27,0.27,0.27), mean=0.245, stddev=0.0114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.07,0.07 0.07,0.07,0.08,0.08), mean=0.0612, stddev=0.00589], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.11 0.12,0.14,0.22,0.32,0.36 0.38,0.41,0.41,0.42), mean=0.229, stddev=0.0897], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.005714, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.13), mean=0.0909, stddev=0.00986], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.17 0.17,0.18,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.183, stddev=0.00761], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.06,0.13,0.25,0.30 0.34,0.36,0.38,0.41), mean=0.155, stddev=0.0967], bias-{mean,stddev}=-0.0001704,0.005491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.65e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.4,-1.0,-0.63 -0.33,0.04,0.77,1.5,1.8 2.1,2.6,2.8,3.2), mean=0.758, stddev=0.866], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-5.4,-4.6,-3.6 -2.6,-1.2,0.85,2.8,4.0 4.9,6.1,7.1,10), mean=0.777, stddev=2.58], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.03 0.04,0.05,0.05,0.09), mean=0.0102, stddev=0.0147], oderiv-count=49728
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=266.502, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.4,-2.8,-2.3,-1.6 -1.1,-0.54,0.51,1.5,2.1 2.5,3.1,3.4,5.2), mean=0.489, stddev=1.28], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.26,0.61 0.76,0.89,0.94,1.2), mean=0.129, stddev=0.263]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.005174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.21 0.22,0.22,0.23,0.24,0.25 0.25,0.26,0.26,0.26), mean=0.234, stddev=0.0121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.05,0.06,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0583, stddev=0.00526], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.11,0.13,0.20,0.31,0.35 0.37,0.39,0.39,0.41), mean=0.216, stddev=0.0898], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.005673, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.10 0.10,0.11,0.12,0.43), mean=0.0888, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.16 0.17,0.17,0.18,0.18,0.19 0.19,0.19,0.19,0.76), mean=0.178, stddev=0.0372], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.13,0.23,0.29 0.33,0.36,0.38,0.76), mean=0.153, stddev=0.0973], bias-{mean,stddev}=3.608e-07,0.004805, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.28e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.17,-0.14,-0.05 0.003,0.07,0.21,0.34,0.41 0.46,0.53,0.55,0.76), mean=0.203, stddev=0.158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.66,-0.50,-0.29 -0.08,0.12,0.47,0.84,1.0 1.2,1.4,1.5,2.1), mean=0.475, stddev=0.459]
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-2.9,-2.5,-1.8 -1.2,-0.70,0.41,1.5,2.0 2.4,3.0,3.2,4.5), mean=0.369, stddev=1.49], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.21,0.60 0.78,1.0,1.1,1.3), mean=0.127, stddev=0.272]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.005764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.17,0.18,0.18,0.19,0.20 0.20,0.20,0.20,0.20), mean=0.184, stddev=0.00834], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.07,0.07 0.07,0.08,0.08,0.08), mean=0.065, stddev=0.00548], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.10,0.16,0.24,0.27 0.29,0.30,0.31,0.32), mean=0.171, stddev=0.0685], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.006164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.08 0.08,0.09,0.09,0.11), mean=0.0692, stddev=0.00839], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.18 0.19,0.19,0.20,0.21,0.21 0.21,0.21,0.21,0.22), mean=0.197, stddev=0.00899], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.11,0.12,0.17,0.25,0.29 0.31,0.32,0.33,0.34), mean=0.186, stddev=0.0666], bias-{mean,stddev}=-0.0003906,0.006644, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-2.1,-1.8,-1.4 -1.0,-0.56,0.27,1.2,1.6 2.0,2.5,2.7,3.6), mean=0.303, stddev=1.04], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.40 0.56,0.66,0.72,1.0), mean=0.08, stddev=0.186]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.20 0.21,0.21,0.22,0.23,0.23 0.24,0.24,0.24,0.25), mean=0.22, stddev=0.0104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.06,0.06 0.06,0.07,0.07,0.07), mean=0.0548, stddev=0.00525], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.10,0.12,0.20,0.29,0.32 0.33,0.34,0.35,0.36), mean=0.205, stddev=0.081], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.005238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.07,0.08,0.08,0.09,0.09 0.10,0.10,0.10,0.12), mean=0.0834, stddev=0.00847], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.15 0.16,0.16,0.17,0.17,0.18 0.18,0.18,0.19,0.20), mean=0.167, stddev=0.00851], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.08,0.13,0.22,0.27 0.30,0.33,0.34,0.36), mean=0.148, stddev=0.0781], bias-{mean,stddev}=0.0001257,0.004248, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.07e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.01,0.03,0.05 0.07,0.09,0.13,0.17,0.19 0.21,0.23,0.23,0.27), mean=0.131, stddev=0.0484], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,0.06,0.11,0.18 0.25,0.32,0.46,0.60,0.68 0.75,0.83,0.89,1.0), mean=0.461, stddev=0.173]
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-1.6,-1.4,-1.1 -0.82,-0.33,0.54,1.4,1.8 2.2,2.6,2.8,4.5), mean=0.533, stddev=1.02], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.26,0.56 0.73,0.89,1.0,1.3), mean=0.126, stddev=0.258]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004584, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.19,0.19 0.19,0.20,0.21,0.22,0.22 0.22,0.22,0.22,0.22), mean=0.207, stddev=0.00843], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.05,0.06,0.06 0.06,0.06,0.06,0.07), mean=0.0516, stddev=0.0048], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.10,0.11,0.19,0.27,0.30 0.31,0.32,0.32,0.33), mean=0.194, stddev=0.0735], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.005026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.09 0.09,0.10,0.10,0.11), mean=0.08, stddev=0.00798], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.15 0.15,0.15,0.16,0.17,0.17 0.17,0.17,0.18,0.18), mean=0.161, stddev=0.00751], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.08,0.12,0.21,0.26 0.29,0.31,0.32,0.34), mean=0.143, stddev=0.0738], bias-{mean,stddev}=-0.0001564,0.004107, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.03,0.03 0.04,0.05,0.05,0.06), mean=0.012, stddev=0.0148], oderiv-count=39808
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-2.0,-1.7,-1.4 -0.99,-0.52,0.24,1.1,1.6 1.9,2.3,2.5,3.4), mean=0.27, stddev=0.994], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.40,0.64 0.83,0.93,0.98,1.2), mean=0.154, stddev=0.283]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004475, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.19,0.20,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.202, stddev=0.00739], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0504, stddev=0.00491], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.10,0.11,0.19,0.26,0.29 0.30,0.31,0.31,0.32), mean=0.19, stddev=0.0708], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.004867, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.06 0.07,0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.10), mean=0.0774, stddev=0.00894], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.14 0.15,0.15,0.16,0.16,0.16 0.17,0.17,0.17,0.17), mean=0.156, stddev=0.00643], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.12,0.20,0.25 0.28,0.30,0.31,0.35), mean=0.138, stddev=0.0717], bias-{mean,stddev}=2.533e-05,0.003865, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-2.2,-1.9,-1.4 -1.1,-0.62,0.22,1.1,1.4 1.7,2.1,2.3,3.6), mean=0.22, stddev=0.981], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.44,0.66 0.79,0.96,1.0,1.4), mean=0.169, stddev=0.292]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00439, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.18 0.19,0.19,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.199, stddev=0.00858], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0494, stddev=0.00549], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.09,0.11,0.19,0.26,0.28 0.29,0.30,0.31,0.32), mean=0.186, stddev=0.0692], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.004723, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.06,0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.10), mean=0.0749, stddev=0.0101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.14 0.14,0.14,0.15,0.16,0.16 0.16,0.16,0.16,0.17), mean=0.151, stddev=0.00645], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.11,0.20,0.24 0.27,0.30,0.31,0.34), mean=0.133, stddev=0.0713], bias-{mean,stddev}=-3.331e-05,0.003599, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.02,0.03 0.03,0.04,0.04,0.05), mean=0.0119, stddev=0.0123], oderiv-count=48064
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-1.8,-1.7,-1.2 -0.78,-0.40,0.39,1.1,1.6 1.9,2.4,2.7,3.6), mean=0.381, stddev=0.945], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.44,0.64 0.79,0.96,1.0,1.3), mean=0.161, stddev=0.29]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.18 0.18,0.19,0.19,0.20,0.20 0.21,0.21,0.21,0.21), mean=0.193, stddev=0.00806], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.06), mean=0.0478, stddev=0.0062], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.11,0.18,0.25,0.27 0.28,0.30,0.30,0.30), mean=0.181, stddev=0.0666], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.004645, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.06,0.07,0.07,0.08,0.09 0.09,0.09,0.09,0.10), mean=0.0734, stddev=0.0116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.14 0.14,0.14,0.15,0.15,0.16 0.16,0.16,0.16,0.17), mean=0.148, stddev=0.0066], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.11,0.20,0.24 0.27,0.30,0.31,0.33), mean=0.13, stddev=0.0725], bias-{mean,stddev}=0.000107,0.003496, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.4e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,-0.15,-0.09,-0.0003 0.07,0.19,356030316544.0,1512892923904.0,2198861643776.0 2920051638272.0,3855715663872.0,4446904385536.0,6482452545536.0), mean=7.89e+11, stddev=1.04e+12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-0.98,-0.78,-0.48 -0.24,0.01,0.41,0.79,1.0 1.3,1.5,1.7,2.0), mean=0.402, stddev=0.521], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.00988, stddev=0.00976], oderiv-count=69696
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.7,-1.6,-1.2,-0.73 -0.27,0.36,116788.4,496272.2,721288.1 957860.4,1264783.9,1458711.5,2126428.0), mean=2.59e+05, stddev=3.42e+05], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,29469149184.0,120227151872.0,163886661632.0 209961385984.0,265251209216.0,308045217792.0,433119625216.0), mean=6.01e+10, stddev=7.44e+10]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.18 0.18,0.18,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.188, stddev=0.00826], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0465, stddev=0.00727], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.09,0.11,0.17,0.24,0.27 0.28,0.28,0.29,0.30), mean=0.177, stddev=0.0651], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.05 0.06,0.07,0.07,0.08,0.09 0.09,0.09,0.09,0.10), mean=0.0726, stddev=0.0123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.14 0.14,0.14,0.15,0.15,0.15 0.16,0.16,0.16,0.17), mean=0.147, stddev=0.00664], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.06,0.10,0.20,0.24 0.27,0.29,0.31,0.33), mean=0.127, stddev=0.0738], bias-{mean,stddev}=8.091e-05,0.003369, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.81e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.27,-0.12,-0.09,-0.04 0.003,0.06,0.18,0.28,0.32 0.36,0.43,0.45,0.68), mean=0.168, stddev=0.13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.85,-0.63,-0.35 -0.15,0.08,0.41,0.72,0.90 1.1,1.2,1.4,1.8), mean=0.392, stddev=0.431]
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.9,-1.7,-1.2 -0.83,-0.47,0.23,0.99,1.4 1.7,2.3,2.5,3.5), mean=0.262, stddev=0.909], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.61,0.84 1.0,1.3,1.3,1.6), mean=0.255, stddev=0.377]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.003994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.17 0.17,0.18,0.18,0.19,0.19 0.19,0.19,0.20,0.20), mean=0.181, stddev=0.00721], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0445, stddev=0.00785], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.11,0.17,0.23,0.25 0.26,0.27,0.28,0.29), mean=0.171, stddev=0.0573], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00477, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.06,0.07,0.08,0.09,0.09 0.09,0.10,0.10,0.12), mean=0.0751, stddev=0.0139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.14 0.14,0.15,0.15,0.16,0.16 0.16,0.17,0.17,0.17), mean=0.153, stddev=0.00661], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.11,0.21,0.25 0.28,0.30,0.31,0.33), mean=0.133, stddev=0.0754], bias-{mean,stddev}=0.0003172,0.003778, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0128, stddev=0.00975], oderiv-count=115648
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-1.2,-1.0,-0.67 -0.31,0.24,59911.9,233573.4,359369.7 472064.5,600940.1,640862.2,1118886.1), mean=1.25e+05, stddev=1.65e+05], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,24486739968.0,87676313600.0,133814353920.0 177816567808.0,213757739008.0,239428812800.0,356293246976.0), mean=4.72e+10, stddev=6.02e+10]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00413, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.17 0.18,0.18,0.19,0.19,0.20 0.20,0.20,0.20,0.20), mean=0.187, stddev=0.00739], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.046, stddev=0.00832], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.11,0.12,0.18,0.23,0.25 0.26,0.27,0.28,0.29), mean=0.179, stddev=0.0526], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00508, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.0803, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.15 0.15,0.16,0.16,0.17,0.17 0.17,0.18,0.18,0.18), mean=0.162, stddev=0.00632], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.12,0.22,0.26 0.29,0.31,0.32,0.34), mean=0.144, stddev=0.0759], bias-{mean,stddev}=-0.000342,0.004684, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.11,0.14 0.19,0.27,0.35,1.1), mean=0.0576, stddev=0.0938], oderiv-count=9408
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-1.8,-1.6,-1.2 -0.94,-0.61,-0.006,0.54,0.89 1.2,1.4,1.6,2.7), mean=-0.0226, stddev=0.725], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.62,0.85 1.0,1.2,1.2,1.5), mean=0.244, stddev=0.372]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.407407, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, params-rms=0.005446, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.17,0.17,0.17,0.18,0.18 0.19,0.19,0.19,0.21), mean=0.174, stddev=0.00702], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.07 0.07,0.08,0.09,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.0865, stddev=0.0104], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.13,0.24,0.28 0.30,0.32,0.33,0.33), mean=0.154, stddev=0.0823], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.005396, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.08,0.08,0.09,0.10 0.10,0.11,0.12,0.40), mean=0.0844, stddev=0.0183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.16 0.16,0.16,0.17,0.17,0.18 0.18,0.18,0.19,0.65), mean=0.17, stddev=0.0308], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.09,0.13,0.22,0.26 0.29,0.31,0.32,0.65), mean=0.154, stddev=0.0779], bias-{mean,stddev}=0.0001433,0.004714, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.04,0.05 0.06,0.08,0.09,0.15), mean=0.0179, stddev=0.0249], oderiv-count=28608
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.8,-1.7,-1.4,-1.2 -0.83,-0.49,0.11,0.78,1.1 1.4,1.6,1.8,2.7), mean=0.118, stddev=0.795], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.23,0.37 0.47,0.57,0.64,1.0), mean=0.09, stddev=0.172]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, params-rms=0.004093, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.12 0.12,0.13,0.13,0.14,0.14 0.14,0.14,0.14,0.15), mean=0.131, stddev=0.00518], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.05 0.05,0.06,0.07,0.07,0.08 0.08,0.08,0.09,0.11), mean=0.0648, stddev=0.0096], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.06,0.11,0.18,0.20 0.22,0.24,0.25,0.26), mean=0.116, stddev=0.0603], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-05,-1e-05,-7e-06,-7e-06 -5e-06,-4e-06,-2e-07,3e-06,5e-06 7e-06,8e-06,8e-06,1e-05), mean=-1.99e-07, stddev=3.97e-06], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,1.3,2.3,2.7 3.0,3.1,3.3,3.6), mean=1.25, stddev=1.07]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000383265, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.003235, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.002,0.006,0.01 0.02,0.03,0.04,0.07,0.08 0.09,0.10,0.10,0.14), mean=0.0464, stddev=0.023], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.16,0.17,0.17,0.18,0.18 0.18,0.19,0.19,0.19), mean=0.172, stddev=0.0075], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.08,0.13,0.23,0.27 0.31,0.34,0.35,0.37), mean=0.152, stddev=0.081], bias-{mean,stddev}=1.748e-06,0.003193, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.002901, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.009,0.01,0.02 0.03,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.07), mean=0.0448, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.09,0.09,0.10,0.10 0.10,0.10,0.10,0.10), mean=0.0928, stddev=0.00321], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.08,0.12,0.14 0.15,0.16,0.17,0.18), mean=0.0862, stddev=0.0344], bias-{mean,stddev}=-0.0003704,0.002591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.03 0.04,0.05,0.05,0.07), mean=0.0109, stddev=0.0143], oderiv-count=36096
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.81,-0.66,-0.51 -0.37,-0.21,0.03,0.28,0.45 0.63,0.82,0.90,1.7), mean=0.0408, stddev=0.34], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.11,0.18 0.22,0.27,0.29,0.70), mean=0.0447, stddev=0.0817]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000383265, l2-regularize=0.008, max-change=0.75, params-rms=0.00187, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.06,0.06,0.06,0.06 0.07,0.07,0.07,0.07), mean=0.0597, stddev=0.00352], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.009,0.01 0.02,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0291, stddev=0.00705], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.007,0.009,0.05,0.08,0.09 0.10,0.11,0.11,0.12), mean=0.0494, stddev=0.0338], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=88.834, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-06,-7e-06,-6e-06,-4e-06 -3e-06,-2e-06,-4e-08,2e-06,3e-06 4e-06,6e-06,6e-06,7e-06), mean=-1.13e-07, stddev=2.51e-06], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.61,0.91,1.1 1.2,1.3,1.4,1.5), mean=0.55, stddev=0.405]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00191632, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.002594, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.004,0.01 0.02,0.02,0.04,0.05,0.06 0.07,0.08,0.08,0.12), mean=0.0375, stddev=0.0177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.13,0.14,0.15,0.15 0.15,0.15,0.15,0.16), mean=0.138, stddev=0.00865], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.009 0.01,0.02,0.11,0.19,0.22 0.25,0.27,0.29,0.34), mean=0.11, stddev=0.0837], bias-{mean,stddev}=1.093e-09,0.00285, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824

LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.4113 tdnnf2.linear:3.59943 tdnnf2.affine:3.44557 tdnnf3.linear:2.78046 tdnnf3.affine:2.93083 tdnnf4.linear:2.64925 tdnnf4.affine:2.90868 tdnnf5.linear:2.08685 tdnnf5.affine:2.24159 tdnnf6.linear:2.4929 tdnnf6.affine:2.68539 tdnnf7.linear:2.34694 tdnnf7.affine:2.5765 tdnnf8.linear:2.29125 tdnnf8.affine:2.49499 tdnnf9.linear:2.2479 tdnnf9.affine:2.42069 tdnnf10.linear:2.18148 tdnnf10.affine:2.38091 tdnnf11.linear:2.12866 tdnnf11.affine:2.35746 tdnnf12.linear:2.04479 tdnnf12.affine:2.44535 tdnnf13.linear:2.11451 tdnnf13.affine:2.60516 prefinal-l:2.78827 prefinal-chain.affine:2.76695 prefinal-chain.linear:2.09577 output.affine:2.75573 prefinal-xent.affine:1.4877 prefinal-xent.linear:0.957312 output-xent.affine:2.21044 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8658 tdnnf2.linear:8.13584 tdnnf2.affine:6.9591 tdnnf3.linear:6.11198 tdnnf3.affine:5.79157 tdnnf4.linear:5.78856 tdnnf4.affine:5.45334 tdnnf5.linear:4.26691 tdnnf5.affine:4.26866 tdnnf6.linear:5.59671 tdnnf6.affine:5.47504 tdnnf7.linear:5.45927 tdnnf7.affine:5.42733 tdnnf8.linear:5.50943 tdnnf8.affine:5.42731 tdnnf9.linear:5.56293 tdnnf9.affine:5.33845 tdnnf10.linear:5.52079 tdnnf10.affine:5.30398 tdnnf11.linear:5.63345 tdnnf11.affine:5.36721 tdnnf12.linear:5.36192 tdnnf12.affine:5.37626 tdnnf13.linear:5.0272 tdnnf13.affine:5.18876 prefinal-l:8.75863 prefinal-chain.affine:6.22971 prefinal-chain.linear:7.80153 output.affine:18.3676 prefinal-xent.affine:4.61881 prefinal-xent.linear:5.06223 output-xent.affine:29.6252 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.454421 tdnnf2.linear:0.440311 tdnnf2.affine:0.491781 tdnnf3.linear:0.450862 tdnnf3.affine:0.500917 tdnnf4.linear:0.453105 tdnnf4.affine:0.533349 tdnnf5.linear:0.482094 tdnnf5.affine:0.518657 tdnnf6.linear:0.440937 tdnnf6.affine:0.485923 tdnnf7.linear:0.426741 tdnnf7.affine:0.470939 tdnnf8.linear:0.412203 tdnnf8.affine:0.45608 tdnnf9.linear:0.400763 tdnnf9.affine:0.449965 tdnnf10.linear:0.391961 tdnnf10.affine:0.445568 tdnnf11.linear:0.374518 tdnnf11.affine:0.43525 tdnnf12.linear:0.378728 tdnnf12.affine:0.45142 tdnnf13.linear:0.416871 tdnnf13.affine:0.497235 prefinal-l:0.316161 prefinal-chain.affine:0.443303 prefinal-chain.linear:0.266922 output.affine:0.149677 prefinal-xent.affine:0.320693 prefinal-xent.linear:0.187916 output-xent.affine:0.074738 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:PrintProfile():cu-device.cc:563) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=21 threads=1
# Ended (code 0) at Tue Jul 19 22:56:57 EDT 2022, elapsed time 21 seconds
