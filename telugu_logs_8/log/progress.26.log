# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/26.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/25.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/26.mdl 
# Started at Tue Jul 19 21:39:06 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/26.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02877, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.14 0.19,0.27,0.35,0.49,0.60 0.72,0.91,1.1,1.4), mean=0.385, stddev=0.184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.56,0.59 0.61,0.68,0.83,1.1,1.2 1.5,1.6,1.6,1.6), mean=0.885, stddev=0.252], bias-{mean,stddev}=-0.005944,0.03363, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.04e+06, self-repaired-proportion=0.0237642, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0005,0.001 0.002,0.004,0.02,0.04,0.04 0.05,0.05,0.06,0.07), mean=0.0217, stddev=0.016], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.08 0.11,0.16,0.44,0.68,0.80 0.87,0.92,0.94,0.97), mean=0.438, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.09,0.13,0.15 0.17,0.21,0.23,0.32), mean=0.101, stddev=0.04], oderiv-count=4.64826e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46662.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,7e-05,0.0002,0.0006 0.001,0.004,0.02,0.04,0.04 0.05,0.05,0.06,0.07), mean=0.0215, stddev=0.0161], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0008,0.001,0.003 0.006,0.01,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0279, stddev=0.0142]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85), mean=0.847, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.14 0.15,0.17,0.20,0.24,0.27 0.30,0.32,0.34,0.43), mean=0.207, stddev=0.0469], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.17,0.19,0.22,0.27,0.32 0.36,0.39,0.39,0.44), mean=0.233, stddev=0.0564], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.52 0.53,0.54,0.56,0.60), mean=0.478, stddev=0.031], bias-{mean,stddev}=-0.03043,0.04941, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.07,0.08 0.09,0.09,0.11,0.12,0.13 0.14,0.15,0.15,0.21), mean=0.109, stddev=0.0192], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.27,0.33,0.35 0.38,0.40,0.45,0.51,0.54 0.56,0.60,0.64,0.69), mean=0.455, stddev=0.0669], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.009,0.01,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.0106, stddev=0.00239], oderiv-count=4.69472e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46150.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.07,0.08 0.09,0.09,0.11,0.13,0.14 0.14,0.16,0.16,0.20), mean=0.111, stddev=0.021], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.24,0.26,0.27,0.37), mean=0.184, stddev=0.0314]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.624, stddev=0.00225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.14,0.15,0.17,0.18 0.20,0.21,0.22,0.24), mean=0.154, stddev=0.0218], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.15,0.17,0.19,0.23,0.25 0.28,0.29,0.31,0.37), mean=0.198, stddev=0.0384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.35,0.36 0.37,0.38,0.40,0.42,0.44 0.44,0.45,0.46,0.48), mean=0.402, stddev=0.0255], bias-{mean,stddev}=-0.01857,0.02625, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.93e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.14,0.15,0.16 0.17,0.19,0.19,0.24), mean=0.137, stddev=0.0197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.38,0.40 0.42,0.43,0.46,0.50,0.51 0.53,0.54,0.56,0.59), mean=0.464, stddev=0.0402], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.006,0.007,0.008,0.008 0.009,0.01,0.01,0.01), mean=0.00675, stddev=0.00112], oderiv-count=4.33709e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45638.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.11,0.12,0.14,0.15,0.16 0.17,0.19,0.20,0.27), mean=0.139, stddev=0.0208], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.19,0.20,0.23,0.26,0.27 0.29,0.31,0.33,0.49), mean=0.232, stddev=0.0348]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59), mean=0.593, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.13,0.15,0.16,0.17 0.18,0.19,0.20,0.22), mean=0.147, stddev=0.0176], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.24,0.25,0.26,0.32), mean=0.185, stddev=0.0286], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.34 0.34,0.35,0.37,0.40,0.40 0.42,0.43,0.44,0.45), mean=0.374, stddev=0.0253], bias-{mean,stddev}=-0.01111,0.01985, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.91e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.16,0.17,0.18,0.26), mean=0.138, stddev=0.017], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.39,0.41 0.42,0.43,0.46,0.49,0.51 0.53,0.54,0.54,0.58), mean=0.463, stddev=0.0361], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0103, stddev=0.00155], oderiv-count=1.53018e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15212.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.19,0.27), mean=0.139, stddev=0.0184], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.18 0.19,0.21,0.23,0.26,0.27 0.28,0.30,0.31,0.48), mean=0.233, stddev=0.0326]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01239, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.396, stddev=0.000752], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.16,0.17,0.18), mean=0.14, stddev=0.0116], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.14,0.15,0.16 0.18,0.19,0.19,0.23), mean=0.138, stddev=0.0213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.36,0.37,0.39,0.41,0.42 0.44,0.47,0.47,0.48), mean=0.393, stddev=0.0279], bias-{mean,stddev}=-0.00776,0.02966, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.07,0.08,0.09,0.10 0.10,0.11,0.12,0.13), mean=0.0783, stddev=0.0152], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.23,0.26,0.31 0.33,0.37,0.43,0.49,0.52 0.55,0.58,0.60,0.75), mean=0.427, stddev=0.0763], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0192, stddev=0.00338], oderiv-count=1.48064e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15212.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.07,0.08,0.09,0.10 0.11,0.11,0.11,0.13), mean=0.0787, stddev=0.0158], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.10 0.11,0.12,0.14,0.15,0.16 0.17,0.18,0.19,0.23), mean=0.137, stddev=0.0221]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01301, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59), mean=0.589, stddev=0.000946], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.13,0.13,0.14,0.16,0.17 0.18,0.19,0.19,0.24), mean=0.146, stddev=0.0171], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.24,0.25,0.26,0.32), mean=0.186, stddev=0.0291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.33,0.34 0.34,0.36,0.37,0.40,0.41 0.42,0.44,0.44,0.46), mean=0.376, stddev=0.0257], bias-{mean,stddev}=-0.02521,0.01829, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.13,0.15,0.15 0.16,0.17,0.17,0.24), mean=0.133, stddev=0.015], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.39 0.40,0.42,0.45,0.48,0.49 0.51,0.52,0.53,0.57), mean=0.447, stddev=0.0371], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0105, stddev=0.00136], oderiv-count=1.41939e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14700.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.15 0.16,0.17,0.17,0.26), mean=0.134, stddev=0.0159], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.27 0.28,0.29,0.30,0.46), mean=0.233, stddev=0.0264]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.54, stddev=0.00081], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.15 0.16,0.17,0.18,0.22), mean=0.134, stddev=0.0162], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.31), mean=0.183, stddev=0.0294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.33 0.34,0.35,0.37,0.39,0.41 0.41,0.42,0.42,0.42), mean=0.37, stddev=0.024], bias-{mean,stddev}=-0.02599,0.01925, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.2e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.18), mean=0.131, stddev=0.0158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.38 0.39,0.41,0.44,0.48,0.50 0.51,0.52,0.54,0.57), mean=0.442, stddev=0.0406], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.0108, stddev=0.00151], oderiv-count=1.34157e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14188.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.20), mean=0.131, stddev=0.0157], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.26 0.27,0.28,0.29,0.32), mean=0.23, stddev=0.0231]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.56,0.56,0.56), mean=0.55, stddev=0.00257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.18,0.22), mean=0.136, stddev=0.0169], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.11,0.13 0.14,0.16,0.18,0.21,0.22 0.24,0.25,0.26,0.28), mean=0.184, stddev=0.032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.35,0.36,0.37,0.39,0.40 0.41,0.42,0.42,0.43), mean=0.373, stddev=0.0206], bias-{mean,stddev}=-0.02872,0.02121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.08,0.09 0.10,0.11,0.13,0.14,0.15 0.16,0.17,0.17,0.20), mean=0.126, stddev=0.0198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.33,0.34,0.36 0.38,0.40,0.43,0.47,0.50 0.51,0.53,0.54,0.57), mean=0.435, stddev=0.0469], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0112, stddev=0.00164], oderiv-count=1.36531e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13676.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.08,0.09 0.10,0.11,0.13,0.15,0.15 0.16,0.17,0.18,0.21), mean=0.129, stddev=0.0207], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.18,0.19 0.20,0.21,0.22,0.25,0.26 0.27,0.28,0.29,0.34), mean=0.227, stddev=0.0254]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.58), mean=0.57, stddev=0.00184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.20,0.22), mean=0.141, stddev=0.0187], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.13,0.15,0.19,0.21,0.23 0.24,0.25,0.25,0.39), mean=0.182, stddev=0.0361], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.43,0.46), mean=0.37, stddev=0.0258], bias-{mean,stddev}=-0.02793,0.02279, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.25), mean=0.123, stddev=0.024], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.28,0.30,0.33 0.36,0.39,0.43,0.47,0.49 0.51,0.53,0.54,0.60), mean=0.426, stddev=0.0549], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0109, stddev=0.00178], oderiv-count=1.35379e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13164.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.08 0.09,0.11,0.13,0.14,0.16 0.16,0.18,0.18,0.25), mean=0.126, stddev=0.0244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.28,0.28,0.30,0.44), mean=0.229, stddev=0.0264]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01252, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.57,0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57), mean=0.566, stddev=0.000977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.15,0.17 0.18,0.19,0.20,0.25), mean=0.14, stddev=0.0207], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.10 0.12,0.15,0.19,0.22,0.23 0.25,0.26,0.27,0.29), mean=0.182, stddev=0.0436], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.34 0.34,0.35,0.37,0.39,0.40 0.42,0.43,0.43,0.46), mean=0.373, stddev=0.0257], bias-{mean,stddev}=-0.02518,0.02076, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.09,0.10,0.13,0.15,0.16 0.16,0.18,0.19,0.21), mean=0.124, stddev=0.0279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.22,0.25,0.29 0.34,0.38,0.42,0.47,0.49 0.50,0.52,0.53,0.57), mean=0.417, stddev=0.0629], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0108, stddev=0.00182], oderiv-count=1.26266e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12652.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.09,0.10,0.13,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.128, stddev=0.0287], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.24,0.26,0.27 0.28,0.30,0.31,0.35), mean=0.241, stddev=0.0263]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01307, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59), mean=0.591, stddev=0.00113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.12,0.13,0.14,0.16,0.18 0.19,0.21,0.22,0.28), mean=0.146, stddev=0.0248], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01207, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.09 0.11,0.14,0.20,0.23,0.25 0.26,0.27,0.28,0.31), mean=0.186, stddev=0.0509], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.35,0.36,0.38,0.41,0.42 0.44,0.44,0.45,0.47), mean=0.385, stddev=0.0273], bias-{mean,stddev}=-0.02394,0.01948, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.10,0.13,0.16,0.17 0.18,0.20,0.21,0.25), mean=0.129, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.22,0.26 0.32,0.36,0.41,0.46,0.48 0.50,0.52,0.53,0.58), mean=0.403, stddev=0.0687], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.0105, stddev=0.00189], oderiv-count=1.20218e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12140.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.08,0.10,0.13,0.16,0.17 0.18,0.20,0.21,0.25), mean=0.13, stddev=0.0336], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.26,0.29,0.31 0.32,0.34,0.35,0.45), mean=0.267, stddev=0.0322]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57), mean=0.569, stddev=0.00141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.12,0.14,0.16,0.18 0.19,0.21,0.23,0.28), mean=0.139, stddev=0.0281], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.09 0.12,0.14,0.18,0.24,0.27 0.28,0.30,0.31,0.33), mean=0.189, stddev=0.0581], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.36,0.37,0.39,0.42,0.43 0.44,0.46,0.46,0.52), mean=0.394, stddev=0.0273], bias-{mean,stddev}=-0.02453,0.01856, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.07,0.09,0.11,0.14,0.15 0.17,0.18,0.19,0.23), mean=0.114, stddev=0.0316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.18,0.24 0.28,0.31,0.37,0.42,0.45 0.46,0.49,0.50,0.55), mean=0.365, stddev=0.0701], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.009,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0122, stddev=0.00244], oderiv-count=1.20019e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11628.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.12,0.14,0.16 0.17,0.18,0.19,0.24), mean=0.117, stddev=0.0304], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.23 0.24,0.25,0.28,0.32,0.34 0.36,0.38,0.38,0.52), mean=0.287, stddev=0.0407]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01165, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.527, stddev=0.00156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.12,0.15,0.17 0.19,0.21,0.24,0.29), mean=0.128, stddev=0.0308], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.09,0.11 0.12,0.14,0.18,0.22,0.25 0.28,0.31,0.33,0.36), mean=0.182, stddev=0.0517], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.34 0.35,0.36,0.38,0.40,0.41 0.42,0.43,0.44,0.44), mean=0.377, stddev=0.0238], bias-{mean,stddev}=-0.02516,0.02408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.79e+05, self-repaired-proportion=0.00154348, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.02,0.04 0.04,0.06,0.07,0.10,0.11 0.12,0.14,0.15,0.17), mean=0.0762, stddev=0.0256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.12,0.16 0.20,0.23,0.29,0.35,0.39 0.43,0.48,0.51,0.60), mean=0.294, stddev=0.08], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.08), mean=0.0199, stddev=0.00497], oderiv-count=1.11718e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11116.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.02,0.03,0.04 0.05,0.06,0.08,0.10,0.11 0.12,0.14,0.15,0.17), mean=0.0818, stddev=0.0258], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.11,0.15,0.17 0.19,0.21,0.24,0.27,0.29 0.31,0.32,0.33,0.39), mean=0.238, stddev=0.0444]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.18107, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, params-rms=0.02267, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.72,0.72,0.72 0.73,0.73,0.73,0.73,0.73 0.73,0.73,0.73,0.73), mean=0.725, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.31 0.32,0.33,0.36,0.39,0.40 0.42,0.44,0.46,0.49), mean=0.361, stddev=0.0334], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01377, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.11 0.13,0.15,0.22,0.26,0.29 0.31,0.34,0.37,0.51), mean=0.211, stddev=0.0624], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.40 0.41,0.42,0.44,0.46,0.47 0.48,0.49,0.51,0.53), mean=0.44, stddev=0.0245], bias-{mean,stddev}=-0.02169,0.02457, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.07,0.09,0.12,0.13 0.14,0.15,0.16,0.19), mean=0.0915, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.24 0.27,0.31,0.37,0.43,0.47 0.49,0.52,0.54,0.58), mean=0.372, stddev=0.075], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.009,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0162, stddev=0.00476], oderiv-count=1.0905e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11116.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.05 0.06,0.07,0.10,0.12,0.13 0.14,0.15,0.16,0.17), mean=0.0964, stddev=0.028], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.16 0.17,0.19,0.20,0.22,0.24 0.25,0.26,0.27,0.32), mean=0.204, stddev=0.0263]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, params-rms=0.01771, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.57,0.57,0.57 0.57,0.57,0.57,0.58), mean=0.567, stddev=0.00276], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.25,0.28,0.31,0.33 0.36,0.38,0.40,0.47), mean=0.281, stddev=0.0379], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11116.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-6e-08,-6e-08,-4e-08 -3e-08,-2e-08,-3e-09,2e-08,3e-08 4e-08,4e-08,5e-08,7e-08), mean=-1.78e-09, stddev=2.46e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.76,0.77,0.79 0.80,0.82,0.87,0.92,0.94 0.97,0.98,0.99,1.0), mean=0.87, stddev=0.0537]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000736969, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02448, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.07,0.21 0.27,0.32,0.38,0.45,0.49 0.53,0.56,0.59,1.1), mean=0.379, stddev=0.0984], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.5,1.6), mean=1.3, stddev=0.105], bias-{mean,stddev}=0.0003999,0.07717, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.03,0.03,0.06 0.07,0.12,0.15,0.18,0.19 0.20,0.21,0.22,0.25), mean=0.145, stddev=0.0437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.28,0.29,0.30,0.32,0.32 0.33,0.34,0.35,0.35), mean=0.302, stddev=0.0176], bias-{mean,stddev}=-0.05082,0.05394, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.03e+05, self-repaired-proportion=0.0138232, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.004,0.009,0.01 0.01,0.02,0.04,0.07,0.08 0.10,0.11,0.12,0.18), mean=0.0455, stddev=0.0279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.06,0.09 0.11,0.15,0.28,0.42,0.51 0.67,0.72,0.73,0.79), mean=0.3, stddev=0.166], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0116, stddev=0.00387], oderiv-count=1.08864e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11116.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.008,0.01,0.02 0.02,0.03,0.05,0.08,0.09 0.10,0.12,0.13,0.17), mean=0.0531, stddev=0.0276], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.04,0.05,0.07 0.07,0.08,0.10,0.12,0.13 0.15,0.18,0.20,0.28), mean=0.104, stddev=0.0287]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000736969, l2-regularize=0.008, max-change=0.75, params-rms=0.01107, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35,0.36 0.36,0.36,0.36,0.36), mean=0.354, stddev=0.00101], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.13,0.13,0.15,0.19,0.25 0.31,0.33,0.34,0.35), mean=0.169, stddev=0.053], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11116.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-3e-08,-3e-08,-3e-08 -2e-08,-1e-08,1e-10,1e-08,2e-08 3e-08,3e-08,4e-08,5e-08), mean=5.74e-10, stddev=1.65e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.35 0.35,0.36,0.38,0.40,0.41 0.42,0.43,0.43,0.44), mean=0.383, stddev=0.0222]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00368485, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03423, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.09 0.15,0.27,0.53,0.70,0.78 0.85,0.90,0.93,1.3), mean=0.497, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.6 1.7,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.1), mean=1.82, stddev=0.0986], bias-{mean,stddev}=4.888e-09,0.07348, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-07,7e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00103, stddev=0.00117], oderiv-count=1.13158e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/25.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/26.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.2028 tdnnf2.linear:4.87036 tdnnf2.affine:4.84878 tdnnf3.linear:3.71022 tdnnf3.affine:4.10338 tdnnf4.linear:3.55642 tdnnf4.affine:3.99021 tdnnf5.linear:2.82391 tdnnf5.affine:3.12665 tdnnf6.linear:3.4232 tdnnf6.affine:3.77805 tdnnf7.linear:3.06669 tdnnf7.affine:3.56432 tdnnf8.linear:3.08576 tdnnf8.affine:3.4864 tdnnf9.linear:3.06524 tdnnf9.affine:3.40825 tdnnf10.linear:2.96876 tdnnf10.affine:3.3523 tdnnf11.linear:2.88477 tdnnf11.affine:3.35749 tdnnf12.linear:2.80664 tdnnf12.affine:3.53249 tdnnf13.linear:2.93328 tdnnf13.affine:3.7883 prefinal-l:4.21964 prefinal-chain.affine:4.10946 prefinal-chain.linear:3.31379 output.affine:5.25862 prefinal-xent.affine:2.31026 prefinal-xent.linear:1.43919 output-xent.affine:3.8821 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.6975 tdnnf2.linear:9.58797 tdnnf2.affine:7.89286 tdnnf3.linear:7.05913 tdnnf3.affine:6.52353 tdnnf4.linear:6.70693 tdnnf4.affine:6.03834 tdnnf5.linear:4.48407 tdnnf5.affine:4.56598 tdnnf6.linear:6.66 tdnnf6.affine:6.10632 tdnnf7.linear:6.11255 tdnnf7.affine:6.02987 tdnnf8.linear:6.22142 tdnnf8.affine:6.07877 tdnnf9.linear:6.45341 tdnnf9.affine:6.04116 tdnnf10.linear:6.40792 tdnnf10.affine:6.06814 tdnnf11.linear:6.69117 tdnnf11.affine:6.25634 tdnnf12.linear:6.43221 tdnnf12.affine:6.4027 tdnnf13.linear:5.96716 tdnnf13.affine:6.15106 prefinal-l:11.6056 prefinal-chain.affine:7.12996 prefinal-chain.linear:9.0694 output.affine:21.2174 prefinal-xent.affine:5.387 prefinal-xent.linear:5.66639 output-xent.affine:29.3652 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.597987 tdnnf2.linear:0.508423 tdnnf2.affine:0.61764 tdnnf3.linear:0.527041 tdnnf3.affine:0.631264 tdnnf4.linear:0.529225 tdnnf4.affine:0.662486 tdnnf5.linear:0.632289 tdnnf5.affine:0.688693 tdnnf6.linear:0.514846 tdnnf6.affine:0.620127 tdnnf7.linear:0.502597 tdnnf7.affine:0.593186 tdnnf8.linear:0.495125 tdnnf8.affine:0.57624 tdnnf9.linear:0.474842 tdnnf9.affine:0.56584 tdnnf10.linear:0.462493 tdnnf10.affine:0.554069 tdnnf11.linear:0.430763 tdnnf11.affine:0.536662 tdnnf12.linear:0.434506 tdnnf12.affine:0.550403 tdnnf13.linear:0.492805 tdnnf13.affine:0.620065 prefinal-l:0.360744 prefinal-chain.affine:0.574286 prefinal-chain.linear:0.360306 output.affine:0.245023 prefinal-xent.affine:0.426692 prefinal-xent.linear:0.251066 output-xent.affine:0.132353 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 19 21:39:07 EDT 2022, elapsed time 1 seconds
