# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/42.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/41.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/42.mdl 
# Started at Tue Jul 19 22:21:15 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/42.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02617, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.21,0.25 0.27,0.30,0.34,0.42,0.50 0.59,0.78,0.85,1.1), mean=0.37, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.53,0.55 0.56,0.61,0.75,0.97,1.1 1.3,1.4,1.4,1.5), mean=0.806, stddev=0.225], bias-{mean,stddev}=-0.005649,0.02592, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.1e+06, self-repaired-proportion=0.00424859, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.007,0.02,0.03,0.03 0.04,0.04,0.05,0.05), mean=0.0182, stddev=0.0114], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.13 0.18,0.24,0.45,0.65,0.75 0.83,0.89,0.92,0.97), mean=0.454, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.12,0.15,0.17 0.18,0.22,0.25,0.30), mean=0.126, stddev=0.0333], oderiv-count=4.65267e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47674.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.002,0.002,0.003 0.004,0.007,0.02,0.03,0.03 0.04,0.04,0.05,0.06), mean=0.0181, stddev=0.0116], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.009,0.01 0.01,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0248, stddev=0.00791]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01688, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76,0.76 0.77,0.77,0.77,0.77), mean=0.764, stddev=0.000732], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.14,0.15 0.16,0.17,0.19,0.21,0.22 0.24,0.26,0.27,0.32), mean=0.189, stddev=0.0266], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01428, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.17 0.18,0.19,0.22,0.25,0.28 0.32,0.35,0.36,0.40), mean=0.225, stddev=0.041], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.42 0.42,0.43,0.46,0.48,0.49 0.50,0.51,0.52,0.54), mean=0.456, stddev=0.0271], bias-{mean,stddev}=-0.03204,0.04391, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.76e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.07 0.08,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0974, stddev=0.017], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.27,0.30,0.34 0.37,0.40,0.45,0.50,0.53 0.55,0.58,0.60,0.70), mean=0.447, stddev=0.067], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0138, stddev=0.00358], oderiv-count=4.47622e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47162.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.07 0.07,0.08,0.10,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0963, stddev=0.0173], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.16,0.18,0.18 0.19,0.20,0.21,0.26), mean=0.162, stddev=0.0188]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59), mean=0.588, stddev=0.000791], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.13,0.14,0.16,0.17 0.17,0.18,0.19,0.20), mean=0.146, stddev=0.0145], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01223, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.16,0.17,0.19,0.21,0.23 0.25,0.28,0.29,0.33), mean=0.194, stddev=0.0295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.36,0.37,0.39,0.41,0.42 0.43,0.44,0.45,0.46), mean=0.391, stddev=0.0232], bias-{mean,stddev}=-0.02065,0.02239, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.97e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.16,0.17,0.17,0.21), mean=0.133, stddev=0.0147], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.42,0.43,0.46,0.50,0.51 0.52,0.54,0.55,0.57), mean=0.464, stddev=0.0376], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.007,0.008,0.009,0.01 0.01,0.01,0.02,0.02), mean=0.00833, stddev=0.00187], oderiv-count=4.52851e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46650.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.22), mean=0.131, stddev=0.015], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.23,0.24 0.26,0.27,0.28,0.33), mean=0.218, stddev=0.022]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01248, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.57,0.57 0.57,0.57,0.57,0.57), mean=0.565, stddev=0.00244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.141, stddev=0.0129], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01147, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.16,0.18,0.20,0.21 0.22,0.23,0.24,0.25), mean=0.182, stddev=0.0203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.33 0.33,0.35,0.37,0.39,0.40 0.41,0.42,0.43,0.45), mean=0.366, stddev=0.0247], bias-{mean,stddev}=-0.01198,0.01571, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.16,0.17,0.21), mean=0.139, stddev=0.0125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.47,0.50,0.51 0.52,0.53,0.54,0.57), mean=0.469, stddev=0.0308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0126, stddev=0.00187], oderiv-count=1.54394e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15550.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.17,0.17,0.20), mean=0.137, stddev=0.013], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.24,0.25 0.26,0.28,0.28,0.33), mean=0.227, stddev=0.0215]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.417, stddev=0.000743], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.13 0.13,0.14,0.15,0.15,0.16 0.16,0.17,0.17,0.18), mean=0.147, stddev=0.00946], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.16 0.17,0.18,0.18,0.20), mean=0.142, stddev=0.0165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.38,0.38,0.40,0.42,0.43 0.45,0.46,0.46,0.46), mean=0.404, stddev=0.023], bias-{mean,stddev}=-0.01675,0.02906, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.078, stddev=0.0152], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.24,0.28,0.31 0.33,0.37,0.43,0.48,0.51 0.54,0.57,0.58,0.69), mean=0.424, stddev=0.0715], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.07), mean=0.0213, stddev=0.00382], oderiv-count=1.55034e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15550.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.06,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0772, stddev=0.0151], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.11,0.12,0.14,0.15,0.15 0.16,0.17,0.17,0.19), mean=0.135, stddev=0.0161]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.54, stddev=0.000732], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.13,0.14,0.15 0.15,0.16,0.17,0.19), mean=0.135, stddev=0.0111], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01147, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.14,0.15 0.16,0.17,0.18,0.20,0.21 0.22,0.22,0.23,0.30), mean=0.182, stddev=0.0206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.33 0.34,0.34,0.37,0.38,0.39 0.41,0.42,0.42,0.44), mean=0.366, stddev=0.0234], bias-{mean,stddev}=-0.0272,0.0154, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.23), mean=0.128, stddev=0.0122], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.41,0.43,0.46,0.49,0.50 0.51,0.53,0.54,0.57), mean=0.457, stddev=0.0364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0127, stddev=0.00126], oderiv-count=1.4265e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15038.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.24), mean=0.127, stddev=0.0125], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.20,0.22,0.23,0.24 0.24,0.25,0.26,0.34), mean=0.217, stddev=0.0173]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01146, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.519, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.18), mean=0.129, stddev=0.0111], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.20,0.21 0.21,0.22,0.22,0.24), mean=0.18, stddev=0.0208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.33 0.33,0.34,0.36,0.38,0.39 0.40,0.41,0.41,0.43), mean=0.361, stddev=0.022], bias-{mean,stddev}=-0.02961,0.01598, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.10 0.11,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.17), mean=0.125, stddev=0.0129], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.35,0.37,0.39 0.40,0.41,0.45,0.48,0.50 0.51,0.53,0.53,0.55), mean=0.448, stddev=0.0393], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0129, stddev=0.00129], oderiv-count=1.36083e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14526.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.10,0.10 0.11,0.11,0.13,0.14,0.14 0.15,0.15,0.15,0.17), mean=0.125, stddev=0.0132], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.21,0.23,0.24 0.24,0.25,0.26,0.32), mean=0.215, stddev=0.0175]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.521, stddev=0.00128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.19), mean=0.13, stddev=0.012], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.14 0.15,0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.25), mean=0.178, stddev=0.0243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.32 0.33,0.34,0.36,0.38,0.39 0.40,0.41,0.42,0.44), mean=0.36, stddev=0.023], bias-{mean,stddev}=-0.03142,0.01769, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.12,0.14,0.14 0.15,0.15,0.16,0.18), mean=0.122, stddev=0.0168], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.30,0.33,0.37 0.39,0.41,0.44,0.48,0.50 0.52,0.53,0.53,0.57), mean=0.442, stddev=0.0483], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0129, stddev=0.00148], oderiv-count=1.33331e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14014.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.12,0.14,0.14 0.15,0.15,0.16,0.18), mean=0.122, stddev=0.0169], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.21,0.23,0.23 0.24,0.25,0.26,0.32), mean=0.212, stddev=0.0183]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.53, stddev=0.000791], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.18), mean=0.132, stddev=0.0135], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.12 0.14,0.16,0.18,0.20,0.20 0.21,0.22,0.22,0.32), mean=0.175, stddev=0.0285], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.32 0.32,0.33,0.35,0.37,0.39 0.40,0.41,0.42,0.44), mean=0.354, stddev=0.0252], bias-{mean,stddev}=-0.0289,0.01824, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.08 0.10,0.11,0.12,0.14,0.14 0.15,0.16,0.16,0.25), mean=0.121, stddev=0.0211], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.21,0.24,0.33 0.37,0.40,0.44,0.48,0.50 0.51,0.53,0.54,0.58), mean=0.433, stddev=0.0613], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0124, stddev=0.00149], oderiv-count=1.31642e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13502.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.09,0.10,0.12,0.14,0.14 0.15,0.16,0.16,0.24), mean=0.12, stddev=0.0216], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.21,0.23,0.24 0.24,0.25,0.26,0.36), mean=0.212, stddev=0.0188]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.525, stddev=0.000772], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.18), mean=0.13, stddev=0.015], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.11 0.13,0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.25), mean=0.174, stddev=0.0326], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.31 0.32,0.33,0.35,0.37,0.38 0.39,0.41,0.41,0.42), mean=0.353, stddev=0.0254], bias-{mean,stddev}=-0.02481,0.01718, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.07 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.121, stddev=0.0251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.19,0.30 0.36,0.39,0.43,0.48,0.50 0.51,0.53,0.54,0.58), mean=0.427, stddev=0.0681], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0121, stddev=0.00152], oderiv-count=1.26285e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12990.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.07 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.12, stddev=0.025], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.26,0.27,0.29), mean=0.22, stddev=0.02]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.536, stddev=0.00081], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.133, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.10 0.12,0.15,0.18,0.20,0.22 0.22,0.23,0.24,0.25), mean=0.175, stddev=0.0383], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.31,0.32 0.33,0.33,0.36,0.38,0.39 0.40,0.41,0.42,0.43), mean=0.358, stddev=0.0255], bias-{mean,stddev}=-0.02256,0.01593, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.73e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.07 0.08,0.10,0.12,0.14,0.16 0.17,0.18,0.19,0.22), mean=0.122, stddev=0.0295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.18,0.28 0.33,0.38,0.42,0.47,0.49 0.50,0.52,0.53,0.55), mean=0.415, stddev=0.0723], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0119, stddev=0.00158], oderiv-count=1.19872e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12478.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.07 0.08,0.10,0.12,0.14,0.16 0.17,0.18,0.19,0.23), mean=0.122, stddev=0.0292], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.24,0.26,0.27 0.28,0.29,0.30,0.34), mean=0.237, stddev=0.0237]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.508, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.18,0.21), mean=0.125, stddev=0.0201], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.10 0.12,0.14,0.18,0.21,0.23 0.24,0.25,0.25,0.27), mean=0.173, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.33,0.34,0.36,0.38,0.39 0.40,0.40,0.41,0.43), mean=0.356, stddev=0.0239], bias-{mean,stddev}=-0.0238,0.01447, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.09,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0939, stddev=0.0241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.14,0.17,0.24 0.28,0.32,0.37,0.42,0.45 0.47,0.49,0.51,0.58), mean=0.366, stddev=0.0716], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0145, stddev=0.00212], oderiv-count=1.13254e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11966.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.09,0.11,0.12 0.13,0.15,0.15,0.17), mean=0.0935, stddev=0.0242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.24,0.26,0.27 0.29,0.31,0.31,0.36), mean=0.238, stddev=0.0283]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.48,0.48,0.48 0.48,0.48,0.48,0.48), mean=0.475, stddev=0.000732], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.13,0.14 0.16,0.17,0.18,0.21), mean=0.117, stddev=0.0201], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.10 0.11,0.13,0.16,0.20,0.22 0.24,0.25,0.25,0.28), mean=0.164, stddev=0.0396], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.30 0.31,0.32,0.34,0.35,0.37 0.37,0.38,0.39,0.40), mean=0.337, stddev=0.0215], bias-{mean,stddev}=-0.02815,0.02601, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.2e+05, self-repaired-proportion=0.0127973, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.01,0.02 0.03,0.04,0.05,0.07,0.08 0.09,0.11,0.13,0.17), mean=0.0529, stddev=0.0232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.09,0.13 0.16,0.21,0.27,0.35,0.40 0.45,0.54,0.58,0.71), mean=0.279, stddev=0.0998], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.07,0.10,0.13), mean=0.0268, stddev=0.0121], oderiv-count=1.14272e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11454.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.003,0.01,0.02 0.03,0.04,0.05,0.07,0.08 0.09,0.11,0.13,0.18), mean=0.0535, stddev=0.0234], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.06,0.12 0.14,0.16,0.19,0.22,0.23 0.24,0.25,0.26,0.29), mean=0.186, stddev=0.0414]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.493827, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, params-rms=0.01817, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58), mean=0.582, stddev=0.00113], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.27,0.29,0.31,0.32 0.33,0.34,0.34,0.38), mean=0.29, stddev=0.0237], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01241, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.12 0.15,0.17,0.20,0.22,0.24 0.26,0.28,0.29,0.35), mean=0.195, stddev=0.0392], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.36 0.37,0.38,0.39,0.41,0.42 0.43,0.44,0.44,0.46), mean=0.397, stddev=0.0213], bias-{mean,stddev}=-0.03091,0.02511, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.05,0.06,0.08,0.09,0.10 0.11,0.12,0.12,0.14), mean=0.0764, stddev=0.0176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.23,0.26 0.29,0.33,0.39,0.44,0.47 0.49,0.52,0.53,0.60), mean=0.382, stddev=0.0689], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.06), mean=0.0221, stddev=0.00439], oderiv-count=1.10362e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11454.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.05,0.06,0.08,0.09,0.10 0.11,0.12,0.12,0.14), mean=0.076, stddev=0.0181], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.14,0.15,0.16,0.17 0.17,0.19,0.21,0.29), mean=0.148, stddev=0.0177]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, params-rms=0.01603, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.513, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.23,0.25,0.28,0.29 0.31,0.33,0.35,0.40), mean=0.255, stddev=0.0306], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11454.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-6e-08,-5e-08,-4e-08 -3e-08,-2e-08,2e-09,2e-08,3e-08 4e-08,5e-08,5e-08,7e-08), mean=9.68e-10, stddev=2.45e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.62,0.63 0.64,0.65,0.68,0.72,0.73 0.74,0.75,0.76,0.78), mean=0.681, stddev=0.0361]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000467647, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02176, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.19 0.24,0.28,0.34,0.40,0.44 0.47,0.51,0.54,1.0), mean=0.337, stddev=0.089], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.99,1.0,1.0 1.1,1.1,1.2,1.2,1.2 1.3,1.3,1.3,1.4), mean=1.15, stddev=0.0685], bias-{mean,stddev}=0.0003466,0.06622, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.007753, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.02,0.05 0.06,0.10,0.13,0.14,0.15 0.16,0.17,0.17,0.21), mean=0.119, stddev=0.0339], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.22 0.23,0.23,0.25,0.26,0.27 0.27,0.28,0.28,0.33), mean=0.248, stddev=0.016], bias-{mean,stddev}=-0.06146,0.05524, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.69e+05, self-repaired-proportion=0.0161396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.002,0.005,0.007 0.009,0.01,0.03,0.06,0.07 0.09,0.10,0.11,0.16), mean=0.0365, stddev=0.0259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.08 0.10,0.13,0.25,0.41,0.51 0.68,0.73,0.76,0.83), mean=0.284, stddev=0.171], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0161, stddev=0.00512], oderiv-count=1.16205e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11454.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.003,0.004,0.007 0.009,0.01,0.03,0.06,0.07 0.08,0.10,0.11,0.16), mean=0.0364, stddev=0.0259], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.11 0.11,0.13,0.14,0.22), mean=0.0736, stddev=0.027]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000467647, l2-regularize=0.008, max-change=0.75, params-rms=0.01031, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33), mean=0.33, stddev=0.000356], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.11 0.11,0.12,0.14,0.17,0.24 0.30,0.32,0.32,0.33), mean=0.156, stddev=0.0529], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11454.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-3e-08,-2e-08 -2e-08,-1e-08,1e-09,1e-08,2e-08 3e-08,3e-08,4e-08,4e-08), mean=7.66e-10, stddev=1.49e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.31,0.32,0.33,0.34 0.34,0.36,0.36,0.38), mean=0.318, stddev=0.0176]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00233824, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03448, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.09 0.15,0.28,0.53,0.70,0.79 0.85,0.92,0.95,1.3), mean=0.501, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,1.8,1.9,1.9 2.0,2.0,2.0,2.1), mean=1.83, stddev=0.0961], bias-{mean,stddev}=4.767e-09,0.07309, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-08,6e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00103, stddev=0.00116], oderiv-count=1.16653e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/41.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/42.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.44003 tdnnf2.linear:4.37239 tdnnf2.affine:4.24891 tdnnf3.linear:3.49902 tdnnf3.affine:3.66024 tdnnf4.linear:3.39232 tdnnf4.affine:3.53156 tdnnf5.linear:2.68981 tdnnf5.affine:2.85604 tdnnf6.linear:3.16939 tdnnf6.affine:3.36488 tdnnf7.linear:2.94768 tdnnf7.affine:3.20971 tdnnf8.linear:2.89032 tdnnf8.affine:3.15227 tdnnf9.linear:2.83864 tdnnf9.affine:3.04433 tdnnf10.linear:2.76758 tdnnf10.affine:2.97072 tdnnf11.linear:2.70923 tdnnf11.affine:2.96835 tdnnf12.linear:2.59934 tdnnf12.affine:3.03444 tdnnf13.linear:2.67508 tdnnf13.affine:3.18674 prefinal-l:3.47136 prefinal-chain.affine:3.21093 prefinal-chain.linear:2.47832 output.affine:3.44627 prefinal-xent.affine:1.73737 prefinal-xent.linear:1.11927 output-xent.affine:2.73123 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4494 tdnnf2.linear:8.64374 tdnnf2.affine:7.51574 tdnnf3.linear:6.65101 tdnnf3.affine:6.33902 tdnnf4.linear:6.38904 tdnnf4.affine:5.90456 tdnnf5.linear:4.71505 tdnnf5.affine:4.69768 tdnnf6.linear:6.1116 tdnnf6.affine:5.956 tdnnf7.linear:5.86705 tdnnf7.affine:5.88447 tdnnf8.linear:5.89548 tdnnf8.affine:5.87887 tdnnf9.linear:5.99308 tdnnf9.affine:5.77988 tdnnf10.linear:5.93991 tdnnf10.affine:5.74009 tdnnf11.linear:6.06677 tdnnf11.affine:5.80438 tdnnf12.linear:5.74662 tdnnf12.affine:5.78267 tdnnf13.linear:5.37558 tdnnf13.affine:5.53354 prefinal-l:9.30423 prefinal-chain.affine:6.48007 prefinal-chain.linear:8.20657 output.affine:18.8297 prefinal-xent.affine:4.76958 prefinal-xent.linear:5.27637 output-xent.affine:29.5721 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.514265 tdnnf2.linear:0.500261 tdnnf2.affine:0.560258 tdnnf3.linear:0.522603 tdnnf3.affine:0.573881 tdnnf4.linear:0.52839 tdnnf4.affine:0.594461 tdnnf5.linear:0.570471 tdnnf5.affine:0.605557 tdnnf6.linear:0.513581 tdnnf6.affine:0.560308 tdnnf7.linear:0.497794 tdnnf7.affine:0.541633 tdnnf8.linear:0.484999 tdnnf8.affine:0.532022 tdnnf9.linear:0.46841 tdnnf9.affine:0.522419 tdnnf10.linear:0.461203 tdnnf10.affine:0.512932 tdnnf11.linear:0.441626 tdnnf11.affine:0.50704 tdnnf12.linear:0.448351 tdnnf12.affine:0.519695 tdnnf13.linear:0.493701 tdnnf13.affine:0.57184 prefinal-l:0.368866 prefinal-chain.affine:0.494336 prefinal-chain.linear:0.300917 output.affine:0.182742 prefinal-xent.affine:0.364396 prefinal-xent.linear:0.211073 output-xent.affine:0.0926089 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 19 22:21:15 EDT 2022, elapsed time 0 seconds
