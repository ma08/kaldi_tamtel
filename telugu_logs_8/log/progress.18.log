# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/18.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/18.mdl 
# Started at Tue Jul 19 20:55:30 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/18.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02945, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.10,0.13 0.18,0.26,0.35,0.49,0.63 0.79,0.90,1.1,1.5), mean=0.391, stddev=0.195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.55,0.58 0.62,0.67,0.83,1.1,1.3 1.5,1.6,1.7,1.7), mean=0.903, stddev=0.271], bias-{mean,stddev}=-0.005596,0.03637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3e+06, self-repaired-proportion=0.035504, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0005,0.0009 0.002,0.003,0.03,0.04,0.05 0.05,0.05,0.06,0.07), mean=0.0234, stddev=0.017], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.09,0.14,0.48,0.68,0.79 0.87,0.92,0.95,0.98), mean=0.443, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.09,0.12,0.14 0.17,0.19,0.22,0.31), mean=0.0935, stddev=0.0395], oderiv-count=4.52717e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46620.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,8e-05,0.0001,0.0004 0.001,0.003,0.02,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0233, stddev=0.0172], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0008,0.001,0.003 0.005,0.01,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0298, stddev=0.0161]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.87,0.87 0.87,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.89), mean=0.878, stddev=0.00328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.16,0.17,0.21,0.25,0.28 0.32,0.35,0.37,0.46), mean=0.214, stddev=0.0506], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01517, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.19,0.22,0.27,0.32 0.36,0.40,0.42,0.45), mean=0.235, stddev=0.0601], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.43 0.44,0.46,0.49,0.51,0.52 0.53,0.55,0.56,0.59), mean=0.484, stddev=0.032], bias-{mean,stddev}=-0.02954,0.05133, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.09 0.09,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.21), mean=0.118, stddev=0.0204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.31,0.33,0.35 0.38,0.41,0.45,0.51,0.54 0.56,0.61,0.63,0.70), mean=0.457, stddev=0.0653], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00959, stddev=0.00231], oderiv-count=4.67859e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46108.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.09 0.09,0.10,0.12,0.13,0.14 0.15,0.17,0.17,0.22), mean=0.117, stddev=0.0219], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.17,0.19,0.22,0.24 0.26,0.28,0.29,0.40), mean=0.196, stddev=0.0352]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.64,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.636, stddev=0.00171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.15,0.18,0.19 0.20,0.21,0.22,0.24), mean=0.157, stddev=0.0229], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.16,0.19,0.23,0.25 0.28,0.31,0.32,0.36), mean=0.198, stddev=0.0409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.36,0.37 0.37,0.38,0.40,0.43,0.44 0.45,0.46,0.47,0.48), mean=0.404, stddev=0.0255], bias-{mean,stddev}=-0.01725,0.0266, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.21,0.27), mean=0.144, stddev=0.0209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.40 0.41,0.43,0.46,0.49,0.51 0.53,0.55,0.56,0.62), mean=0.462, stddev=0.0404], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.006,0.007,0.008 0.008,0.009,0.01,0.01), mean=0.0061, stddev=0.00118], oderiv-count=4.59379e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45596.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.21,0.27), mean=0.144, stddev=0.0225], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.19 0.20,0.21,0.24,0.27,0.29 0.31,0.33,0.34,0.47), mean=0.244, stddev=0.038]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01356, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61,0.62 0.62,0.62,0.62,0.62), mean=0.613, stddev=0.00143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.152, stddev=0.0197], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.23 0.24,0.26,0.28,0.32), mean=0.188, stddev=0.0313], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.34 0.35,0.36,0.38,0.40,0.41 0.42,0.44,0.45,0.46), mean=0.38, stddev=0.0258], bias-{mean,stddev}=-0.00903,0.02065, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.17 0.17,0.19,0.19,0.26), mean=0.145, stddev=0.0175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.39,0.41 0.42,0.43,0.46,0.50,0.51 0.53,0.54,0.55,0.57), mean=0.465, stddev=0.0362], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00918, stddev=0.00151], oderiv-count=1.51021e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15198.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.13,0.14,0.16,0.16 0.17,0.18,0.19,0.26), mean=0.143, stddev=0.018], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.20,0.22,0.24,0.27,0.29 0.30,0.32,0.33,0.50), mean=0.243, stddev=0.0344]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.0127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.407, stddev=0.00158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.23), mean=0.143, stddev=0.0138], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01247, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.21,0.25), mean=0.139, stddev=0.0241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.36,0.37,0.40,0.43,0.44 0.45,0.47,0.48,0.50), mean=0.398, stddev=0.0332], bias-{mean,stddev}=-0.004924,0.03123, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.06 0.07,0.07,0.09,0.10,0.11 0.11,0.12,0.13,0.14), mean=0.0876, stddev=0.016], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.27,0.29,0.32 0.34,0.37,0.44,0.50,0.53 0.56,0.60,0.62,0.67), mean=0.438, stddev=0.0736], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.04), mean=0.016, stddev=0.00284], oderiv-count=1.576e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15198.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.06 0.06,0.07,0.09,0.10,0.11 0.11,0.12,0.13,0.14), mean=0.0861, stddev=0.0167], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.11,0.13,0.15,0.17,0.18 0.19,0.21,0.21,0.27), mean=0.149, stddev=0.0269]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59), mean=0.592, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.13,0.15,0.16,0.17 0.18,0.19,0.20,0.24), mean=0.147, stddev=0.0183], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.31), mean=0.184, stddev=0.0299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.43,0.47), mean=0.373, stddev=0.0255], bias-{mean,stddev}=-0.02384,0.01876, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.18,0.18,0.22), mean=0.141, stddev=0.0154], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.39 0.40,0.42,0.44,0.47,0.49 0.50,0.52,0.52,0.56), mean=0.446, stddev=0.0345], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00905, stddev=0.00121], oderiv-count=1.49862e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14686.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.21), mean=0.14, stddev=0.0159], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.23 0.24,0.28,27663.8,59162.8,79176.2 99771.5,121157.8,131270.3,176185.5), mean=3.42e+04, stddev=3.3e+04]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.54, stddev=0.00183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.16 0.16,0.17,0.18,0.22), mean=0.134, stddev=0.0164], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.29), mean=0.184, stddev=0.0284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.32,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.43,0.43), mean=0.371, stddev=0.0254], bias-{mean,stddev}=-0.02464,0.01968, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.37e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.16,0.17,0.18,0.19), mean=0.138, stddev=0.0158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.38 0.40,0.41,0.44,0.48,0.49 0.51,0.53,0.53,0.56), mean=0.445, stddev=0.0389], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0095, stddev=0.00136], oderiv-count=1.39072e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14174.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.138, stddev=0.0164], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.24,0.26,0.27 0.28,0.29,0.31,0.35), mean=0.241, stddev=0.0258]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.56 0.56,0.56,0.56,0.56), mean=0.553, stddev=0.0021], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.137, stddev=0.0173], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.14 0.14,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.29), mean=0.184, stddev=0.0303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.42,0.44), mean=0.372, stddev=0.0209], bias-{mean,stddev}=-0.02739,0.02243, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.18e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.12,0.13,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.132, stddev=0.019], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.34,0.37 0.38,0.40,0.44,0.48,0.50 0.51,0.53,0.54,0.59), mean=0.438, stddev=0.0448], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00994, stddev=0.00154], oderiv-count=1.35514e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13662.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.10 0.11,0.12,0.13,0.15,0.15 0.16,0.17,0.18,0.21), mean=0.131, stddev=0.0195], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.23,0.25,0.27 0.28,0.29,0.30,0.33), mean=0.233, stddev=0.0264]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57), mean=0.569, stddev=0.000992], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.13,0.14,0.16,0.16 0.18,0.19,0.20,0.23), mean=0.141, stddev=0.0188], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.16,0.18,0.21,0.23 0.24,0.25,0.26,0.30), mean=0.183, stddev=0.0321], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.43,0.43,0.44), mean=0.371, stddev=0.0248], bias-{mean,stddev}=-0.02606,0.02368, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.31e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.10 0.10,0.11,0.13,0.15,0.16 0.16,0.17,0.18,0.22), mean=0.13, stddev=0.0208], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.31,0.33,0.36 0.37,0.40,0.43,0.47,0.49 0.51,0.53,0.54,0.61), mean=0.434, stddev=0.0484], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00979, stddev=0.00157], oderiv-count=1.33843e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13150.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.10 0.10,0.11,0.13,0.15,0.16 0.16,0.17,0.18,0.22), mean=0.129, stddev=0.0209], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.27 0.28,0.29,0.30,0.36), mean=0.232, stddev=0.0251]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01262, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57,0.57 0.57,0.57,0.58,0.58), mean=0.571, stddev=0.00204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.20,0.24), mean=0.141, stddev=0.0195], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.11 0.13,0.15,0.18,0.21,0.23 0.24,0.26,0.27,0.30), mean=0.182, stddev=0.0385], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.42,0.45), mean=0.371, stddev=0.025], bias-{mean,stddev}=-0.0236,0.02212, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.131, stddev=0.0241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.26,0.28,0.33 0.36,0.39,0.43,0.47,0.49 0.51,0.53,0.53,0.57), mean=0.426, stddev=0.0536], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.008,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00977, stddev=0.00159], oderiv-count=1.26278e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12638.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.131, stddev=0.0243], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.24,0.26,0.28 0.29,0.31,0.31,0.36), mean=0.241, stddev=0.0272]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.60,0.60,0.60 0.60,0.60,0.60,0.60,0.60 0.60,0.60,0.60,0.60), mean=0.596, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.18 0.19,0.21,0.22,0.28), mean=0.147, stddev=0.0233], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01216, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.09,0.10 0.12,0.15,0.20,0.23,0.24 0.25,0.27,0.28,0.30), mean=0.189, stddev=0.0464], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.35 0.35,0.37,0.39,0.41,0.42 0.44,0.45,0.46,0.48), mean=0.388, stddev=0.0272], bias-{mean,stddev}=-0.02278,0.01963, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.14,0.16,0.17 0.18,0.20,0.21,0.23), mean=0.139, stddev=0.0281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.24,0.28,0.32 0.34,0.37,0.41,0.46,0.48 0.50,0.52,0.53,0.57), mean=0.412, stddev=0.0562], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.0093, stddev=0.0016], oderiv-count=1.2448e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12126.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.10,0.11,0.14,0.16,0.18 0.19,0.20,0.21,0.24), mean=0.14, stddev=0.029], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.23 0.23,0.24,0.27,0.30,0.31 0.33,0.35,0.36,0.38), mean=0.271, stddev=0.0307]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59), mean=0.592, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.16,0.18 0.20,0.22,0.23,0.29), mean=0.146, stddev=0.0266], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.11 0.12,0.14,0.19,0.25,0.26 0.28,0.30,0.31,0.34), mean=0.195, stddev=0.0554], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.37,0.38,0.40,0.43,0.44 0.45,0.47,0.47,0.49), mean=0.404, stddev=0.0278], bias-{mean,stddev}=-0.02279,0.0188, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.10,0.11,0.14,0.16,0.18 0.19,0.20,0.22,0.27), mean=0.137, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.24,0.26,0.29 0.32,0.35,0.39,0.44,0.46 0.48,0.50,0.51,0.56), mean=0.391, stddev=0.0567], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.01, stddev=0.00199], oderiv-count=1.20461e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11614.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.10,0.11,0.14,0.16,0.18 0.19,0.20,0.22,0.26), mean=0.137, stddev=0.031], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.22,0.24 0.25,0.26,0.29,0.33,0.35 0.36,0.39,0.40,0.46), mean=0.296, stddev=0.0392]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01201, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.543, stddev=0.00201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.13,0.15,0.17 0.19,0.22,0.24,0.31), mean=0.133, stddev=0.0299], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01229, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.11 0.13,0.15,0.18,0.23,0.27 0.29,0.32,0.34,0.36), mean=0.189, stddev=0.0536], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.36 0.36,0.37,0.39,0.41,0.42 0.43,0.45,0.47,0.47), mean=0.393, stddev=0.0247], bias-{mean,stddev}=-0.02128,0.01963, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.06 0.07,0.08,0.11,0.13,0.14 0.16,0.17,0.18,0.23), mean=0.108, stddev=0.0282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.21,0.23 0.25,0.28,0.34,0.39,0.42 0.45,0.49,0.51,0.58), mean=0.337, stddev=0.0671], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.04), mean=0.0143, stddev=0.00273], oderiv-count=1.16237e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11102.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.07 0.08,0.09,0.11,0.13,0.15 0.16,0.17,0.18,0.23), mean=0.109, stddev=0.0279], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.19,0.21 0.23,0.24,0.28,0.31,0.33 0.35,0.37,0.39,0.44), mean=0.279, stddev=0.0427]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0164609, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, params-rms=0.02316, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.74,0.74 0.74,0.74,0.74,0.74,0.74 0.74,0.74,0.75,0.75), mean=0.741, stddev=0.00183], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.31,0.32 0.33,0.34,0.36,0.39,0.41 0.44,0.46,0.47,0.51), mean=0.369, stddev=0.0341], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.12,0.15,0.21,0.28,0.31 0.34,0.37,0.40,0.55), mean=0.213, stddev=0.075], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.43,0.45,0.48,0.49 0.50,0.51,0.51,0.56), mean=0.45, stddev=0.028], bias-{mean,stddev}=-0.02463,0.03007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.02e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.08,0.11,0.15,0.16 0.17,0.19,0.19,0.23), mean=0.113, stddev=0.0358], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.21,0.24 0.28,0.32,0.38,0.44,0.46 0.49,0.51,0.52,0.56), mean=0.375, stddev=0.0713], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.008,0.01,0.02,0.02 0.02,0.02,0.02,0.04), mean=0.0124, stddev=0.00468], oderiv-count=1.13517e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11102.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.08,0.11,0.14,0.16 0.17,0.18,0.19,0.21), mean=0.112, stddev=0.0346], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.23,0.25,0.27,0.29 0.30,0.31,0.32,0.36), mean=0.25, stddev=0.0288]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, params-rms=0.01892, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.60,0.60,0.60 0.60,0.60,0.61,0.61,0.61 0.61,0.61,0.61,0.61), mean=0.605, stddev=0.00204], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.24 0.26,0.27,0.29,0.33,0.36 0.38,0.41,0.43,0.50), mean=0.3, stddev=0.0415], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11102.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-08,-6e-08,-6e-08,-5e-08 -4e-08,-3e-08,-4e-09,2e-08,3e-08 4e-08,5e-08,5e-08,8e-08), mean=-3.74e-09, stddev=2.66e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,0.87,0.88 0.90,0.92,0.98,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.977, stddev=0.0626]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000925155, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02635, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.07,0.22 0.29,0.34,0.42,0.48,0.53 0.56,0.60,0.62,1.1), mean=0.408, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.6,1.6,1.7,1.7), mean=1.4, stddev=0.117], bias-{mean,stddev}=0.0004055,0.08447, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.03,0.05,0.07 0.08,0.12,0.16,0.19,0.21 0.22,0.23,0.24,0.29), mean=0.154, stddev=0.046], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.30,0.30,0.32,0.34,0.35 0.35,0.36,0.38,0.40), mean=0.321, stddev=0.0208], bias-{mean,stddev}=-0.0515,0.05881, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.41e+05, self-repaired-proportion=0.0103387, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.006,0.01,0.02 0.02,0.03,0.05,0.08,0.10 0.11,0.13,0.14,0.20), mean=0.0587, stddev=0.0314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.05,0.07,0.10 0.13,0.17,0.31,0.44,0.52 0.65,0.69,0.70,0.74), mean=0.322, stddev=0.156], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.006,0.009,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00904, stddev=0.00306], oderiv-count=1.06739e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11102.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.005,0.009,0.01 0.02,0.03,0.05,0.08,0.10 0.12,0.13,0.14,0.19), mean=0.0573, stddev=0.0317], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.05,0.07 0.08,0.09,0.11,0.13,0.14 0.15,0.16,0.17,0.23), mean=0.112, stddev=0.028]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000925155, l2-regularize=0.008, max-change=0.75, params-rms=0.01169, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.37 0.37,0.37,0.37,0.37,0.37 0.37,0.37,0.37,0.37), mean=0.374, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.15,0.16,0.20,0.25 0.31,0.34,0.36,0.37), mean=0.18, stddev=0.0517], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11102.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-4e-08,-3e-08,-3e-08 -2e-08,-2e-08,-5e-10,2e-08,2e-08 3e-08,4e-08,4e-08,6e-08), mean=-2.01e-10, stddev=1.91e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.39 0.40,0.41,0.43,0.45,0.45 0.46,0.46,0.47,0.48), mean=0.426, stddev=0.0211]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00462578, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03392, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.08 0.15,0.27,0.52,0.69,0.78 0.84,0.89,0.92,1.2), mean=0.492, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.8, stddev=0.0995], bias-{mean,stddev}=3.417e-09,0.0743, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-08,4e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00102, stddev=0.00117], oderiv-count=1.0937e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/18.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.18782 tdnnf2.linear:5.19822 tdnnf2.affine:5.2249 tdnnf3.linear:3.90685 tdnnf3.affine:4.39761 tdnnf4.linear:3.80185 tdnnf4.affine:4.31585 tdnnf5.linear:2.95793 tdnnf5.affine:3.334 tdnnf6.linear:3.47616 tdnnf6.affine:3.9825 tdnnf7.linear:3.15533 tdnnf7.affine:3.79625 tdnnf8.linear:3.16325 tdnnf8.affine:3.71305 tdnnf9.linear:3.14279 tdnnf9.affine:3.61249 tdnnf10.linear:3.04841 tdnnf10.affine:3.53546 tdnnf11.linear:2.9477 tdnnf11.affine:3.55901 tdnnf12.linear:2.88994 tdnnf12.affine:3.69302 tdnnf13.linear:2.99285 tdnnf13.affine:3.96501 prefinal-l:4.32146 prefinal-chain.affine:4.48006 prefinal-chain.linear:3.72962 output.affine:6.36092 prefinal-xent.affine:2.47157 prefinal-xent.linear:1.56671 output-xent.affine:4.62318 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:14.0255 tdnnf2.linear:9.93107 tdnnf2.affine:7.99572 tdnnf3.linear:7.19338 tdnnf3.affine:6.55666 tdnnf4.linear:6.9403 tdnnf4.affine:6.13167 tdnnf5.linear:4.59938 tdnnf5.affine:4.62687 tdnnf6.linear:6.70254 tdnnf6.affine:6.05789 tdnnf7.linear:6.10478 tdnnf7.affine:6.02717 tdnnf8.linear:6.2559 tdnnf8.affine:6.06021 tdnnf9.linear:6.44111 tdnnf9.affine:6.05305 tdnnf10.linear:6.4615 tdnnf10.affine:6.0425 tdnnf11.linear:6.74462 tdnnf11.affine:6.30029 tdnnf12.linear:6.70026 tdnnf12.affine:6.54359 tdnnf13.linear:6.1482 tdnnf13.affine:6.3619 prefinal-l:11.86 prefinal-chain.affine:7.3215 prefinal-chain.linear:9.68669 output.affine:22.8527 prefinal-xent.affine:5.72501 prefinal-xent.linear:5.98555 output-xent.affine:29.1139 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.653578 tdnnf2.linear:0.519838 tdnnf2.affine:0.651217 tdnnf3.linear:0.538989 tdnnf3.affine:0.667567 tdnnf4.linear:0.544444 tdnnf4.affine:0.699647 tdnnf5.linear:0.630447 tdnnf5.affine:0.71502 tdnnf6.linear:0.517037 tdnnf6.affine:0.656025 tdnnf7.linear:0.513258 tdnnf7.affine:0.628541 tdnnf8.linear:0.502274 tdnnf8.affine:0.612152 tdnnf9.linear:0.483932 tdnnf9.affine:0.59548 tdnnf10.linear:0.470122 tdnnf10.affine:0.582432 tdnnf11.linear:0.435613 tdnnf11.affine:0.562428 tdnnf12.linear:0.428971 tdnnf12.affine:0.560768 tdnnf13.linear:0.483728 tdnnf13.affine:0.617381 prefinal-l:0.366755 prefinal-chain.affine:0.608529 prefinal-chain.linear:0.380869 output.affine:0.276711 prefinal-xent.affine:0.43149 prefinal-xent.linear:0.260078 output-xent.affine:0.15927 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 19 20:55:30 EDT 2022, elapsed time 0 seconds
