# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/74.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/73.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/74.mdl 
# Started at Tue Jul 19 23:59:23 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/74.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.16,0.18 0.19,0.21,0.27,0.37,0.47 0.59,0.72,0.77,0.88), mean=0.306, stddev=0.13], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.45,0.47 0.49,0.54,0.65,0.84,0.94 1.0,1.1,1.1,1.2), mean=0.695, stddev=0.174], bias-{mean,stddev}=-0.006875,0.02291, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.13e+06, self-repaired-proportion=0.00995128, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.003,0.004,0.01,0.02,0.03 0.03,0.04,0.04,0.06), mean=0.0136, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.11 0.14,0.19,0.38,0.66,0.79 0.88,0.92,0.95,0.97), mean=0.427, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.08 0.09,0.10,0.13,0.17,0.19 0.22,0.27,0.33,0.43), mean=0.138, stddev=0.0484], oderiv-count=4.47296e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45746.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0009,0.001,0.002 0.003,0.004,0.01,0.02,0.03 0.03,0.04,0.04,0.06), mean=0.0135, stddev=0.0104], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.007 0.008,0.01,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0186, stddev=0.00794]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.621, stddev=0.0015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.15,0.17,0.19 0.21,0.23,0.24,0.27), mean=0.153, stddev=0.0292], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.14,0.17,0.20,0.23 0.26,0.28,0.29,0.31), mean=0.175, stddev=0.0417], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.33 0.34,0.35,0.36,0.37,0.38 0.39,0.39,0.40,0.41), mean=0.359, stddev=0.0174], bias-{mean,stddev}=-0.02239,0.03024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.77e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.06,0.07,0.09), mean=0.0433, stddev=0.0107], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.21,0.29 0.32,0.36,0.42,0.50,0.55 0.61,0.68,0.74,0.83), mean=0.428, stddev=0.102], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.0237, stddev=0.00586], oderiv-count=4.49696e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45234.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.03,0.03,0.04,0.05,0.06 0.06,0.06,0.07,0.09), mean=0.0425, stddev=0.0107], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.06,0.07,0.08,0.09 0.10,0.11,0.11,0.13), mean=0.0739, stddev=0.0143]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.009982, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.452, stddev=0.000559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.112, stddev=0.0148], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009201, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.11,0.12,0.14,0.16,0.18 0.20,0.21,0.22,0.26), mean=0.145, stddev=0.0277], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.26 0.27,0.28,0.30,0.31,0.31 0.33,0.33,0.34,0.35), mean=0.294, stddev=0.0176], bias-{mean,stddev}=-0.01991,0.02251, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.10,0.17), mean=0.0612, stddev=0.0125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.28,0.31,0.34 0.36,0.39,0.44,0.49,0.51 0.53,0.56,0.57,0.62), mean=0.437, stddev=0.0595], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.013, stddev=0.00247], oderiv-count=4.52928e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=44722.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.07 0.08,0.09,0.09,0.17), mean=0.0604, stddev=0.0124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.09,0.09,0.10,0.12,0.12 0.13,0.14,0.15,0.23), mean=0.105, stddev=0.016]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.009275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.42, stddev=0.000273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.13,0.14,0.14,0.16), mean=0.104, stddev=0.0128], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.008581, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.24), mean=0.136, stddev=0.0199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.24 0.25,0.26,0.28,0.29,0.30 0.30,0.31,0.32,0.32), mean=0.274, stddev=0.019], bias-{mean,stddev}=-0.01436,0.01663, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.05,0.06,0.07,0.07,0.08 0.08,0.09,0.09,0.18), mean=0.0661, stddev=0.011], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.34,0.36 0.38,0.40,0.44,0.47,0.50 0.52,0.54,0.55,0.59), mean=0.438, stddev=0.0467], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0195, stddev=0.00272], oderiv-count=1.46086e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14907.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.08,0.09,0.09,0.17), mean=0.0646, stddev=0.011], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.27), mean=0.114, stddev=0.0156]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.008813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.28 0.28,0.28,0.28,0.28,0.28 0.28,0.28,0.28,0.28), mean=0.282, stddev=0.000356], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.11 0.11,0.12,0.12,0.13), mean=0.0994, stddev=0.00792], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.008848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.10,0.11,0.12 0.13,0.13,0.14,0.17), mean=0.0987, stddev=0.0166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.31,0.33,0.33,0.35), mean=0.283, stddev=0.0189], bias-{mean,stddev}=-0.01263,0.02088, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.35e+05, self-repaired-proportion=0.0017005, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.01,0.01,0.02 0.02,0.03,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0336, stddev=0.0103], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.14,0.19 0.24,0.29,0.38,0.46,0.50 0.54,0.59,0.61,0.75), mean=0.379, stddev=0.105], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0382, stddev=0.00727], oderiv-count=1.5577e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14907.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.01,0.01,0.02 0.02,0.02,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0331, stddev=0.0103], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.03,0.04,0.04 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.12), mean=0.0617, stddev=0.0119]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009472, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.429, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.13,0.14,0.16), mean=0.107, stddev=0.0114], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008945, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.12,0.13,0.14,0.16,0.16 0.17,0.18,0.19,0.29), mean=0.142, stddev=0.0192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.25 0.26,0.27,0.29,0.30,0.31 0.32,0.33,0.34,0.36), mean=0.285, stddev=0.0211], bias-{mean,stddev}=-0.02667,0.01562, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07,0.07 0.08,0.08,0.08,0.16), mean=0.0624, stddev=0.00926], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.30,0.32,0.34 0.35,0.37,0.42,0.46,0.48 0.50,0.52,0.53,0.62), mean=0.419, stddev=0.0513], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03), mean=0.0218, stddev=0.00261], oderiv-count=1.4768e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14395.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.08,0.16), mean=0.0613, stddev=0.0093], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.12 0.13,0.13,0.14,0.24), mean=0.111, stddev=0.0121]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.419, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.17), mean=0.104, stddev=0.0118], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008914, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.12,0.13,0.14,0.16,0.16 0.17,0.18,0.18,0.21), mean=0.141, stddev=0.0181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.33,0.34), mean=0.285, stddev=0.0185], bias-{mean,stddev}=-0.0296,0.01616, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.10), mean=0.0616, stddev=0.00922], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.27,0.29,0.31 0.34,0.37,0.41,0.46,0.48 0.50,0.52,0.54,0.59), mean=0.41, stddev=0.0571], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.05), mean=0.0219, stddev=0.00292], oderiv-count=1.43405e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13883.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.08,0.10), mean=0.0606, stddev=0.00939], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.12 0.13,0.14,0.14,0.24), mean=0.111, stddev=0.0118]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.428, stddev=0.000299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.13,0.14,0.17), mean=0.106, stddev=0.0123], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008987, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.09,0.11 0.12,0.13,0.14,0.16,0.17 0.17,0.18,0.19,0.25), mean=0.142, stddev=0.0209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.27,0.29,0.30,0.31 0.32,0.32,0.33,0.36), mean=0.287, stddev=0.0189], bias-{mean,stddev}=-0.032,0.01797, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.13), mean=0.0601, stddev=0.0118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.20,0.25,0.30 0.32,0.35,0.41,0.46,0.48 0.50,0.52,0.53,0.58), mean=0.403, stddev=0.0648], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0216, stddev=0.00289], oderiv-count=1.32096e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13371.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.14), mean=0.0593, stddev=0.0118], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.12,0.12 0.13,0.14,0.14,0.24), mean=0.11, stddev=0.0137]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009463, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.428, stddev=0.000386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.10,0.12,0.12 0.13,0.14,0.14,0.18), mean=0.106, stddev=0.0132], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008837, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.10 0.11,0.13,0.14,0.16,0.16 0.17,0.18,0.18,0.32), mean=0.139, stddev=0.0237], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.25 0.26,0.26,0.28,0.30,0.31 0.31,0.32,0.33,0.33), mean=0.282, stddev=0.02], bias-{mean,stddev}=-0.02999,0.01815, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.66e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.07 0.08,0.09,0.09,0.21), mean=0.0588, stddev=0.0133], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.21,0.27 0.31,0.34,0.40,0.45,0.48 0.50,0.52,0.55,0.60), mean=0.394, stddev=0.074], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0209, stddev=0.0029], oderiv-count=1.35398e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12859.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.07 0.08,0.09,0.09,0.22), mean=0.0581, stddev=0.0135], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.34), mean=0.11, stddev=0.0153]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009462, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.428, stddev=0.000405], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.09,0.10,0.12,0.12 0.13,0.14,0.15,0.19), mean=0.106, stddev=0.0147], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008903, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.09 0.11,0.13,0.14,0.16,0.17 0.17,0.18,0.18,0.25), mean=0.14, stddev=0.0263], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.32,0.33), mean=0.284, stddev=0.0184], bias-{mean,stddev}=-0.02608,0.01755, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.08 0.09,0.10,0.10,0.15), mean=0.0613, stddev=0.0152], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.19,0.26 0.29,0.33,0.40,0.45,0.48 0.51,0.53,0.54,0.58), mean=0.392, stddev=0.0793], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0202, stddev=0.00321], oderiv-count=1.2425e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12347.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.08 0.08,0.09,0.10,0.15), mean=0.0608, stddev=0.0152], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.13,0.13 0.14,0.15,0.15,0.25), mean=0.116, stddev=0.0144]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.442, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.09,0.09,0.11,0.12,0.13 0.14,0.15,0.16,0.21), mean=0.109, stddev=0.0176], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009098, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.09 0.11,0.13,0.15,0.16,0.17 0.18,0.18,0.19,0.22), mean=0.143, stddev=0.0284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.26 0.27,0.27,0.29,0.31,0.32 0.32,0.33,0.34,0.35), mean=0.29, stddev=0.0194], bias-{mean,stddev}=-0.02477,0.01703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.08,0.08 0.09,0.10,0.11,0.13), mean=0.0633, stddev=0.0165], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.19,0.25 0.29,0.33,0.39,0.45,0.47 0.49,0.53,0.55,0.60), mean=0.386, stddev=0.077], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0196, stddev=0.00304], oderiv-count=1.14976e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11835.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.05,0.06,0.08,0.08 0.09,0.10,0.11,0.13), mean=0.0627, stddev=0.0163], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.14,0.14 0.15,0.15,0.16,0.19), mean=0.124, stddev=0.0143]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.426, stddev=0.000386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.08,0.09,0.10,0.12,0.13 0.14,0.15,0.16,0.24), mean=0.104, stddev=0.0206], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009343, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.09 0.11,0.12,0.15,0.17,0.18 0.19,0.20,0.20,0.28), mean=0.146, stddev=0.0314], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.28,0.28,0.30,0.31,0.32 0.33,0.34,0.34,0.48), mean=0.298, stddev=0.0212], bias-{mean,stddev}=-0.02629,0.01427, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.6e+05, self-repaired-proportion=3.53827e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.07,0.07 0.08,0.08,0.09,0.11), mean=0.0536, stddev=0.0142], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.17,0.19,0.23 0.26,0.29,0.35,0.41,0.43 0.46,0.49,0.51,0.61), mean=0.352, stddev=0.0701], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0233, stddev=0.00332], oderiv-count=1.1481e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11323.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06,0.07 0.08,0.08,0.09,0.11), mean=0.0534, stddev=0.0143], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.15,0.15,0.16,0.22), mean=0.124, stddev=0.015]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.41 0.41,0.41,0.41,0.41), mean=0.404, stddev=0.000722], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.08,0.09,0.11,0.13 0.14,0.16,0.16,0.21), mean=0.0987, stddev=0.0217], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.09 0.10,0.11,0.14,0.16,0.18 0.19,0.20,0.20,0.22), mean=0.139, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.32,0.34), mean=0.285, stddev=0.0183], bias-{mean,stddev}=-0.02649,0.0183, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.16e+05, self-repaired-proportion=0.0173203, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.0006,0.002,0.01 0.02,0.02,0.03,0.04,0.05 0.06,0.07,0.08,0.11), mean=0.0334, stddev=0.0135], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.05,0.14 0.19,0.23,0.28,0.34,0.38 0.42,0.49,0.55,0.69), mean=0.282, stddev=0.0895], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.06,0.09,0.10,0.17), mean=0.0407, stddev=0.014], oderiv-count=1.1287e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10811.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,0.0003,0.002,0.01 0.02,0.02,0.03,0.04,0.05 0.06,0.07,0.08,0.11), mean=0.0332, stddev=0.0136], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.003,0.01,0.06 0.07,0.08,0.10,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.0951, stddev=0.0221]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, params-rms=0.01546, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.495, stddev=0.000691], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.25,0.27,0.28 0.28,0.29,0.30,0.32), mean=0.246, stddev=0.0237], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01057, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.24), mean=0.168, stddev=0.0222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.31,0.31 0.32,0.32,0.34,0.35,0.36 0.37,0.37,0.38,0.40), mean=0.338, stddev=0.0165], bias-{mean,stddev}=-0.03367,0.01787, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.25e+05, self-repaired-proportion=7.34258e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.05 0.05,0.06,0.07,0.10), mean=0.0371, stddev=0.0109], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.15,0.19 0.22,0.26,0.32,0.38,0.41 0.44,0.47,0.49,0.65), mean=0.318, stddev=0.0769], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.11), mean=0.0383, stddev=0.00633], oderiv-count=1.08698e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10811.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.02,0.03,0.04,0.05,0.05 0.05,0.06,0.07,0.10), mean=0.0362, stddev=0.0112], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.06,0.07,0.08,0.09,0.09 0.09,0.10,0.10,0.14), mean=0.0775, stddev=0.0109]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, params-rms=0.01306, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.418, stddev=0.000273], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.18,0.19,0.21,0.22,0.23 0.25,0.26,0.27,0.32), mean=0.208, stddev=0.0209], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10811.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-4e-08,-4e-08,-3e-08 -2e-08,-2e-08,1e-10,1e-08,2e-08 3e-08,3e-08,4e-08,5e-08), mean=-4.67e-10, stddev=1.8e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.45 0.46,0.47,0.49,0.51,0.52 0.53,0.54,0.54,0.57), mean=0.49, stddev=0.0237]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000188303, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.08,0.17 0.22,0.26,0.32,0.38,0.42 0.47,0.51,0.54,0.80), mean=0.315, stddev=0.0895], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,1.0,1.0 1.0,1.1,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0406], bias-{mean,stddev}=0.0002993,0.05487, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.007007, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.05 0.07,0.10,0.11,0.13,0.14 0.14,0.15,0.16,0.22), mean=0.108, stddev=0.0293], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.21 0.21,0.21,0.22,0.23,0.24 0.24,0.25,0.25,0.27), mean=0.224, stddev=0.0121], bias-{mean,stddev}=-0.04709,0.03927, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.32e+05, self-repaired-proportion=0.0384751, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.002,0.004 0.005,0.006,0.01,0.03,0.04 0.06,0.07,0.08,0.12), mean=0.0191, stddev=0.0174], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.07,0.09,0.19,0.35,0.46 0.63,0.73,0.77,0.83), mean=0.233, stddev=0.17], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0243, stddev=0.00622], oderiv-count=1.10579e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10811.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.001,0.002,0.003 0.004,0.006,0.01,0.03,0.04 0.06,0.07,0.08,0.12), mean=0.0187, stddev=0.0173], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.07,0.07,0.08,0.11), mean=0.0404, stddev=0.0153]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000188303, l2-regularize=0.008, max-change=0.75, params-rms=0.00875, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.28 0.28,0.28,0.28,0.28,0.28 0.28,0.28,0.28,0.28), mean=0.28, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.12,0.15,0.21 0.25,0.27,0.27,0.28), mean=0.132, stddev=0.0471], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10811.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-2e-08,-2e-08,-2e-08 -1e-08,-9e-09,5e-11,9e-09,1e-08 2e-08,2e-08,3e-08,5e-08), mean=3.67e-10, stddev=1.14e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.20 0.21,0.22,0.23,0.24,0.24 0.25,0.26,0.26,0.27), mean=0.228, stddev=0.0128]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000941514, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03473, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.10 0.18,0.32,0.53,0.69,0.78 0.86,0.92,0.95,1.3), mean=0.51, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.84, stddev=0.0824], bias-{mean,stddev}=7.314e-09,0.05911, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-08,6e-05,0.0002 0.0003,0.0004,0.0008,0.002,0.002 0.003,0.004,0.004,0.04), mean=0.00105, stddev=0.00116], oderiv-count=1.12845e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/73.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/74.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.24773 tdnnf2.linear:1.89025 tdnnf2.affine:1.88566 tdnnf3.linear:1.4041 tdnnf3.affine:1.56262 tdnnf4.linear:1.32196 tdnnf4.affine:1.46868 tdnnf5.linear:1.04076 tdnnf5.affine:1.14469 tdnnf6.linear:1.31719 tdnnf6.affine:1.49541 tdnnf7.linear:1.23718 tdnnf7.affine:1.44735 tdnnf8.linear:1.21195 tdnnf8.affine:1.39991 tdnnf9.linear:1.18294 tdnnf9.affine:1.36345 tdnnf10.linear:1.16149 tdnnf10.affine:1.33898 tdnnf11.linear:1.13843 tdnnf11.affine:1.35072 tdnnf12.linear:1.12009 tdnnf12.affine:1.44278 tdnnf13.linear:1.22109 tdnnf13.affine:1.55399 prefinal-l:1.63993 prefinal-chain.affine:1.7198 prefinal-chain.linear:1.3176 output.affine:1.37842 prefinal-xent.affine:0.949621 prefinal-xent.linear:0.570967 output-xent.affine:1.1428 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:10.6478 tdnnf2.linear:7.02964 tdnnf2.affine:5.88175 tdnnf3.linear:5.11088 tdnnf3.affine:4.80795 tdnnf4.linear:4.74904 tdnnf4.affine:4.44922 tdnnf5.linear:3.19064 tdnnf5.affine:3.29726 tdnnf6.linear:4.84946 tdnnf6.affine:4.6856 tdnnf7.linear:4.74375 tdnnf7.affine:4.68967 tdnnf8.linear:4.83668 tdnnf8.affine:4.74888 tdnnf9.linear:4.84509 tdnnf9.affine:4.66178 tdnnf10.linear:4.84436 tdnnf10.affine:4.66781 tdnnf11.linear:4.99795 tdnnf11.affine:4.75631 tdnnf12.linear:4.81542 tdnnf12.affine:4.87863 tdnnf13.linear:4.57408 tdnnf13.affine:4.6773 prefinal-l:7.91586 prefinal-chain.affine:5.54535 prefinal-chain.linear:6.68598 output.affine:17.6492 prefinal-xent.affine:4.08895 prefinal-xent.linear:4.48004 output-xent.affine:29.6937 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.303095 tdnnf2.linear:0.266839 tdnnf2.affine:0.317976 tdnnf3.linear:0.272719 tdnnf3.affine:0.32293 tdnnf4.linear:0.276116 tdnnf4.affine:0.327375 tdnnf5.linear:0.322306 tdnnf5.affine:0.343177 tdnnf6.linear:0.269892 tdnnf6.affine:0.317185 tdnnf7.linear:0.259083 tdnnf7.affine:0.307086 tdnnf8.linear:0.249142 tdnnf8.affine:0.29357 tdnnf9.linear:0.242877 tdnnf9.affine:0.291195 tdnnf10.linear:0.238501 tdnnf10.affine:0.28573 tdnnf11.linear:0.226932 tdnnf11.affine:0.28307 tdnnf12.linear:0.231854 tdnnf12.affine:0.294907 tdnnf13.linear:0.266351 tdnnf13.affine:0.331681 prefinal-l:0.206274 prefinal-chain.affine:0.308726 prefinal-chain.linear:0.195705 output.affine:0.0780317 prefinal-xent.affine:0.231032 prefinal-xent.linear:0.126827 output-xent.affine:0.0384947 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Jul 19 23:59:24 EDT 2022, elapsed time 1 seconds
