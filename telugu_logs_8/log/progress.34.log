# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/34.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/33.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/34.mdl 
# Started at Tue Jul 19 22:02:54 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/34.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02733, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.14,0.19 0.24,0.29,0.35,0.45,0.54 0.64,0.82,0.96,1.2), mean=0.378, stddev=0.147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.54,0.56 0.58,0.63,0.78,1.0,1.2 1.4,1.5,1.5,1.6), mean=0.841, stddev=0.239], bias-{mean,stddev}=-0.005445,0.02947, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.02e+06, self-repaired-proportion=0.0119327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0009,0.002,0.002 0.004,0.006,0.02,0.03,0.04 0.04,0.05,0.05,0.06), mean=0.0202, stddev=0.0137], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.12 0.15,0.21,0.44,0.66,0.78 0.85,0.92,0.94,0.97), mean=0.45, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.07,0.08,0.11,0.14,0.15 0.17,0.20,0.24,0.32), mean=0.11, stddev=0.0365], oderiv-count=4.73651e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46116.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.0007,0.001,0.002 0.003,0.006,0.02,0.03,0.04 0.04,0.05,0.05,0.06), mean=0.02, stddev=0.0138], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.004,0.005,0.008 0.01,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0265, stddev=0.0106]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01788, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.81,0.81 0.81,0.81,0.81,0.81,0.81 0.81,0.81,0.81,0.81), mean=0.809, stddev=0.00134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.17,0.19,0.23,0.25 0.27,0.29,0.30,0.37), mean=0.199, stddev=0.0362], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.16,0.17 0.18,0.19,0.22,0.26,0.30 0.33,0.37,0.37,0.39), mean=0.23, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.41 0.43,0.45,0.47,0.49,0.51 0.52,0.53,0.55,0.57), mean=0.468, stddev=0.0303], bias-{mean,stddev}=-0.03087,0.04603, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.89e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.11,0.12,0.13 0.13,0.14,0.15,0.16), mean=0.105, stddev=0.018], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.27,0.30,0.35 0.37,0.40,0.45,0.50,0.53 0.56,0.60,0.62,0.68), mean=0.452, stddev=0.0664], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.009,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0117, stddev=0.00253], oderiv-count=4.6903e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45604.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.11,0.12,0.13 0.13,0.14,0.15,0.15), mean=0.104, stddev=0.0184], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.15,0.17,0.20,0.21 0.22,0.23,0.24,0.29), mean=0.175, stddev=0.0242]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01346, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61), mean=0.609, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.16,0.18 0.18,0.19,0.20,0.23), mean=0.151, stddev=0.0172], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.17,0.19,0.22,0.24 0.26,0.29,0.30,0.33), mean=0.196, stddev=0.0338], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.36 0.36,0.38,0.40,0.42,0.43 0.43,0.44,0.45,0.46), mean=0.397, stddev=0.0231], bias-{mean,stddev}=-0.02053,0.02451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.79e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.134, stddev=0.0168], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.42,0.43,0.46,0.49,0.51 0.53,0.54,0.55,0.58), mean=0.463, stddev=0.0388], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.006,0.007,0.007,0.008,0.009 0.009,0.01,0.01,0.01), mean=0.00739, stddev=0.00119], oderiv-count=4.45555e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45092.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.135, stddev=0.0179], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.22,0.25,0.26 0.27,0.29,0.30,0.35), mean=0.225, stddev=0.0277]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.58,0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58), mean=0.578, stddev=0.00195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.13,0.14,0.16,0.16 0.17,0.18,0.19,0.21), mean=0.144, stddev=0.0152], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.16,0.18,0.20,0.22 0.23,0.24,0.25,0.27), mean=0.184, stddev=0.024], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.43,0.44,0.44), mean=0.37, stddev=0.0247], bias-{mean,stddev}=-0.01267,0.01836, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.12,0.12,0.13,0.15,0.15 0.16,0.17,0.18,0.23), mean=0.136, stddev=0.0146], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.44,0.46,0.49,0.51 0.52,0.54,0.54,0.58), mean=0.464, stddev=0.034], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.009,0.009 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0115, stddev=0.00155], oderiv-count=1.46765e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15030.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.12,0.13,0.15,0.15 0.16,0.18,0.18,0.24), mean=0.135, stddev=0.0158], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.20,0.23,0.25,0.26 0.27,0.28,0.30,0.38), mean=0.227, stddev=0.0258]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.408, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.13 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.27), mean=0.144, stddev=0.0109], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01249, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.16,0.16 0.17,0.18,0.19,0.21), mean=0.14, stddev=0.0185], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.36 0.36,0.38,0.40,0.42,0.44 0.44,0.46,0.46,0.48), mean=0.399, stddev=0.027], bias-{mean,stddev}=-0.0128,0.02771, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.86e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.06,0.08,0.09,0.09 0.10,0.11,0.11,0.12), mean=0.0765, stddev=0.0147], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.24,0.27,0.30 0.33,0.36,0.43,0.48,0.51 0.54,0.57,0.59,0.65), mean=0.421, stddev=0.0735], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0206, stddev=0.00311], oderiv-count=1.48109e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15030.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.06,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0772, stddev=0.015], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.11,0.12,0.14,0.15,0.16 0.17,0.17,0.19,0.23), mean=0.137, stddev=0.0184]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01252, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57), mean=0.567, stddev=0.0014], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.12,0.13,0.14,0.15,0.16 0.16,0.17,0.18,0.21), mean=0.141, stddev=0.0135], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.15,0.16,0.19,0.21,0.22 0.23,0.24,0.25,0.31), mean=0.186, stddev=0.0253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.33 0.34,0.35,0.37,0.39,0.41 0.41,0.43,0.45,0.48), mean=0.374, stddev=0.0253], bias-{mean,stddev}=-0.02654,0.01718, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.22), mean=0.129, stddev=0.0129], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.42,0.45,0.48,0.50 0.51,0.52,0.53,0.60), mean=0.449, stddev=0.0364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.0118, stddev=0.00132], oderiv-count=1.46182e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14518.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.21), mean=0.129, stddev=0.0134], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.25 0.26,0.26,0.27,0.34), mean=0.223, stddev=0.0205]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.531, stddev=0.000863], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.18), mean=0.132, stddev=0.0134], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01152, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.20,0.21 0.22,0.24,0.24,0.28), mean=0.183, stddev=0.0254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.33,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.41,0.42,0.43), mean=0.368, stddev=0.0236], bias-{mean,stddev}=-0.0278,0.01744, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.86e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.10 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.18), mean=0.127, stddev=0.0145], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.37,0.38 0.40,0.41,0.44,0.48,0.50 0.51,0.52,0.54,0.57), mean=0.445, stddev=0.0398], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0121, stddev=0.00144], oderiv-count=1.34944e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14006.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.11,0.11,0.13,0.14,0.14 0.15,0.16,0.16,0.18), mean=0.126, stddev=0.0148], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.24 0.25,0.26,0.27,0.35), mean=0.22, stddev=0.0198]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.541, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.15,0.15 0.16,0.17,0.17,0.19), mean=0.134, stddev=0.0145], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01155, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.13 0.14,0.16,0.19,0.21,0.22 0.23,0.24,0.24,0.26), mean=0.182, stddev=0.0295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.34 0.34,0.35,0.37,0.39,0.40 0.41,0.41,0.42,0.44), mean=0.369, stddev=0.022], bias-{mean,stddev}=-0.03068,0.01946, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.12,0.14,0.15 0.15,0.16,0.17,0.19), mean=0.123, stddev=0.0195], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.30,0.32,0.35 0.38,0.40,0.44,0.48,0.50 0.51,0.52,0.53,0.58), mean=0.437, stddev=0.0501], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0122, stddev=0.00159], oderiv-count=1.3623e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13494.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.12,0.14,0.15 0.15,0.16,0.17,0.20), mean=0.123, stddev=0.0201], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.19,0.20,0.22,0.23,0.24 0.25,0.26,0.27,0.34), mean=0.217, stddev=0.0205]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01223, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.56,0.56,0.56,0.56), mean=0.553, stddev=0.00124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.17,0.18,0.20), mean=0.137, stddev=0.0162], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.11 0.14,0.16,0.18,0.21,0.22 0.23,0.23,0.24,0.38), mean=0.179, stddev=0.034], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.33 0.33,0.34,0.36,0.39,0.40 0.40,0.42,0.43,0.46), mean=0.364, stddev=0.0253], bias-{mean,stddev}=-0.02909,0.02029, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.16,0.17,0.26), mean=0.121, stddev=0.0234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.22,0.28,0.33 0.36,0.39,0.43,0.47,0.49 0.51,0.53,0.54,0.57), mean=0.427, stddev=0.059], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0118, stddev=0.00163], oderiv-count=1.33005e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12982.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.08 0.09,0.10,0.12,0.14,0.15 0.15,0.16,0.17,0.29), mean=0.12, stddev=0.0237], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.26,0.27,0.27,0.45), mean=0.219, stddev=0.0227]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01211, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.548, stddev=0.000622], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.18,0.21), mean=0.136, stddev=0.0182], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.09 0.12,0.15,0.19,0.21,0.22 0.23,0.24,0.25,0.28), mean=0.179, stddev=0.0403], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.32,0.33 0.33,0.34,0.36,0.39,0.40 0.41,0.42,0.42,0.44), mean=0.366, stddev=0.0245], bias-{mean,stddev}=-0.0257,0.01852, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.07 0.08,0.10,0.13,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.122, stddev=0.0279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.22,0.29 0.34,0.38,0.43,0.47,0.49 0.51,0.52,0.53,0.58), mean=0.418, stddev=0.0679], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.009,0.009 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0117, stddev=0.00172], oderiv-count=1.32301e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12470.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.122, stddev=0.028], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.26 0.27,0.28,0.29,0.33), mean=0.23, stddev=0.0235]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01248, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.57,0.57 0.57,0.57,0.57,0.57), mean=0.565, stddev=0.00202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.24), mean=0.14, stddev=0.0219], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.09 0.11,0.14,0.19,0.22,0.23 0.24,0.26,0.26,0.29), mean=0.181, stddev=0.0461], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.32,0.33 0.34,0.35,0.37,0.39,0.41 0.42,0.43,0.44,0.46), mean=0.373, stddev=0.0262], bias-{mean,stddev}=-0.02421,0.01755, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.08,0.10,0.13,0.15,0.16 0.17,0.19,0.19,0.24), mean=0.124, stddev=0.0322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.19,0.26 0.32,0.36,0.42,0.46,0.48 0.50,0.52,0.53,0.57), mean=0.405, stddev=0.0717], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0114, stddev=0.00179], oderiv-count=1.23245e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11958.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.08,0.10,0.13,0.15,0.16 0.17,0.19,0.19,0.23), mean=0.124, stddev=0.0321], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.25,0.28,0.29 0.30,0.32,0.33,0.43), mean=0.253, stddev=0.0288]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.537, stddev=0.00116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.10,0.11,0.13,0.15,0.17 0.18,0.19,0.20,0.26), mean=0.132, stddev=0.0248], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01178, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.09 0.11,0.14,0.18,0.23,0.25 0.26,0.27,0.28,0.30), mean=0.181, stddev=0.0528], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.35,0.36,0.37,0.40,0.41 0.42,0.43,0.43,0.48), mean=0.376, stddev=0.0244], bias-{mean,stddev}=-0.02581,0.01617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.08,0.10,0.12,0.14 0.15,0.16,0.17,0.22), mean=0.1, stddev=0.0286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.15,0.21 0.26,0.31,0.37,0.42,0.44 0.46,0.49,0.51,0.59), mean=0.359, stddev=0.0772], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0138, stddev=0.00233], oderiv-count=1.15622e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11446.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.08,0.10,0.12,0.14 0.15,0.16,0.17,0.21), mean=0.1, stddev=0.0284], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.21 0.22,0.23,0.26,0.29,0.31 0.32,0.34,0.35,0.44), mean=0.261, stddev=0.0355]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.499, stddev=0.00101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.12,0.14,0.16 0.17,0.19,0.21,0.25), mean=0.122, stddev=0.0257], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.10 0.12,0.13,0.17,0.21,0.23 0.26,0.28,0.28,0.31), mean=0.171, stddev=0.0462], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.31,0.32 0.33,0.33,0.35,0.37,0.38 0.39,0.40,0.41,0.41), mean=0.354, stddev=0.0222], bias-{mean,stddev}=-0.02851,0.02385, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.56e+05, self-repaired-proportion=0.010918, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.005,0.01,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.12,0.13,0.17), mean=0.0598, stddev=0.0229], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.09,0.13 0.17,0.21,0.28,0.34,0.38 0.41,0.49,0.55,0.63), mean=0.275, stddev=0.0889], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.05,0.08,0.11), mean=0.0247, stddev=0.00887], oderiv-count=1.20115e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.005,0.01,0.02 0.03,0.04,0.06,0.07,0.09 0.10,0.11,0.13,0.17), mean=0.0591, stddev=0.0229], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.08,0.14 0.16,0.18,0.21,0.23,0.25 0.26,0.27,0.28,0.33), mean=0.204, stddev=0.0413]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, params-rms=0.02063, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.66,0.66,0.66 0.66,0.66,0.66,0.66,0.66 0.66,0.66,0.66,0.66), mean=0.66, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.28 0.29,0.30,0.33,0.35,0.36 0.38,0.39,0.40,0.42), mean=0.329, stddev=0.028], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.11 0.15,0.17,0.20,0.23,0.26 0.28,0.30,0.32,0.39), mean=0.203, stddev=0.0466], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.38 0.39,0.40,0.41,0.43,0.44 0.46,0.47,0.47,0.49), mean=0.415, stddev=0.0226], bias-{mean,stddev}=-0.02232,0.0229, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.11e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.06,0.08,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0808, stddev=0.0206], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.21,0.22,0.25 0.29,0.32,0.39,0.44,0.47 0.50,0.52,0.54,0.59), mean=0.383, stddev=0.0718], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.06), mean=0.0199, stddev=0.00447], oderiv-count=1.10899e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.06,0.08,0.10,0.11 0.11,0.13,0.13,0.15), mean=0.08, stddev=0.021], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.14,0.16,0.17,0.18 0.19,0.19,0.20,0.27), mean=0.156, stddev=0.0196]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, params-rms=0.01656, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.53, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.23,0.24,0.26,0.28,0.31 0.33,0.35,0.36,0.41), mean=0.263, stddev=0.0327], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-6e-08,-5e-08,-4e-08 -3e-08,-2e-08,4e-09,2e-08,3e-08 4e-08,5e-08,6e-08,7e-08), mean=2.01e-09, stddev=2.57e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.66,0.68,0.69 0.70,0.71,0.74,0.78,0.79 0.80,0.82,0.83,0.86), mean=0.745, stddev=0.0373]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000587062, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0225, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.20 0.25,0.29,0.35,0.41,0.45 0.49,0.52,0.54,1.0), mean=0.348, stddev=0.0904], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.0,1.0 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.19, stddev=0.0849], bias-{mean,stddev}=0.0003691,0.0699, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.008413, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.05 0.06,0.11,0.14,0.16,0.17 0.18,0.19,0.19,0.21), mean=0.129, stddev=0.0393], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.25,0.25,0.27,0.28,0.29 0.30,0.31,0.31,0.34), mean=0.269, stddev=0.0175], bias-{mean,stddev}=-0.05329,0.05214, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.03e+05, self-repaired-proportion=0.0128552, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.003,0.006,0.008 0.01,0.02,0.03,0.06,0.08 0.09,0.10,0.11,0.17), mean=0.0384, stddev=0.0259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.06,0.08 0.10,0.13,0.26,0.41,0.52 0.67,0.72,0.74,0.82), mean=0.289, stddev=0.17], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.008,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0142, stddev=0.00459], oderiv-count=1.0624e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.003,0.005,0.008 0.01,0.02,0.03,0.06,0.07 0.09,0.10,0.11,0.17), mean=0.0382, stddev=0.0257], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.04 0.05,0.06,0.08,0.10,0.11 0.12,0.12,0.13,0.21), mean=0.0771, stddev=0.0246]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, params-rms=0.01063, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.34 0.34,0.34,0.34,0.34,0.34 0.34,0.34,0.34,0.34), mean=0.34, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.11 0.12,0.13,0.14,0.18,0.24 0.30,0.32,0.33,0.34), mean=0.162, stddev=0.0533], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-3e-08,-3e-08 -2e-08,-1e-08,7e-10,1e-08,2e-08 3e-08,4e-08,4e-08,4e-08), mean=9.97e-10, stddev=1.63e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.31,0.32 0.32,0.33,0.35,0.36,0.37 0.38,0.38,0.39,0.40), mean=0.348, stddev=0.0188]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00293531, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03435, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.09 0.15,0.28,0.53,0.70,0.79 0.85,0.91,0.93,1.3), mean=0.499, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.1), mean=1.82, stddev=0.0973], bias-{mean,stddev}=4.536e-09,0.07219, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-08,6e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00103, stddev=0.00116], oderiv-count=1.11648e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/33.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/34.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.31471 tdnnf2.linear:4.71951 tdnnf2.affine:4.57957 tdnnf3.linear:3.69514 tdnnf3.affine:3.92746 tdnnf4.linear:3.53631 tdnnf4.affine:3.77528 tdnnf5.linear:2.80348 tdnnf5.affine:3.01845 tdnnf6.linear:3.37619 tdnnf6.affine:3.59668 tdnnf7.linear:3.07022 tdnnf7.affine:3.43568 tdnnf8.linear:3.07159 tdnnf8.affine:3.37794 tdnnf9.linear:3.02684 tdnnf9.affine:3.27848 tdnnf10.linear:2.92634 tdnnf10.affine:3.20237 tdnnf11.linear:2.85553 tdnnf11.affine:3.20697 tdnnf12.linear:2.74284 tdnnf12.affine:3.29636 tdnnf13.linear:2.82739 tdnnf13.affine:3.47454 prefinal-l:3.92076 prefinal-chain.affine:3.58046 prefinal-chain.linear:2.79116 output.affine:4.18282 prefinal-xent.affine:1.92914 prefinal-xent.linear:1.22199 output-xent.affine:3.22805 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.0064 tdnnf2.linear:9.15201 tdnnf2.affine:7.7174 tdnnf3.linear:6.89065 tdnnf3.affine:6.44112 tdnnf4.linear:6.54461 tdnnf4.affine:5.98337 tdnnf5.linear:4.6109 tdnnf5.affine:4.62731 tdnnf6.linear:6.41126 tdnnf6.affine:6.07942 tdnnf7.linear:6.01194 tdnnf7.affine:5.99124 tdnnf8.linear:6.11694 tdnnf8.affine:6.02526 tdnnf9.linear:6.26166 tdnnf9.affine:5.95023 tdnnf10.linear:6.20161 tdnnf10.affine:5.95081 tdnnf11.linear:6.39021 tdnnf11.affine:6.06267 tdnnf12.linear:6.07814 tdnnf12.affine:6.11149 tdnnf13.linear:5.64371 tdnnf13.affine:5.80303 prefinal-l:10.5624 prefinal-chain.affine:6.72822 prefinal-chain.linear:8.47676 output.affine:19.4847 prefinal-xent.affine:4.92398 prefinal-xent.linear:5.44319 output-xent.affine:29.4538 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.55899 tdnnf2.linear:0.511943 tdnnf2.affine:0.591895 tdnnf3.linear:0.53492 tdnnf3.affine:0.609119 tdnnf4.linear:0.535732 tdnnf4.affine:0.628952 tdnnf5.linear:0.604513 tdnnf5.affine:0.654308 tdnnf6.linear:0.521242 tdnnf6.affine:0.59038 tdnnf7.linear:0.50902 tdnnf7.affine:0.572952 tdnnf8.linear:0.502 tdnnf8.affine:0.562285 tdnnf9.linear:0.481326 tdnnf9.affine:0.551202 tdnnf10.linear:0.469715 tdnnf10.affine:0.537488 tdnnf11.linear:0.443468 tdnnf11.affine:0.527603 tdnnf12.linear:0.448217 tdnnf12.affine:0.537186 tdnnf13.linear:0.497566 tdnnf13.affine:0.597073 prefinal-l:0.367027 prefinal-chain.affine:0.528217 prefinal-chain.linear:0.325768 output.affine:0.212759 prefinal-xent.affine:0.388803 prefinal-xent.linear:0.224185 output-xent.affine:0.109555 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 19 22:02:54 EDT 2022, elapsed time 0 seconds
