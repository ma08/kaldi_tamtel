# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/43.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/42.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/43.mdl 
# Started at Tue Jul 19 22:23:15 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/43.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02598, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.18,0.20,0.25 0.27,0.29,0.34,0.42,0.49 0.59,0.75,0.85,1.0), mean=0.367, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.53,0.54 0.56,0.60,0.75,0.95,1.1 1.3,1.4,1.4,1.5), mean=0.801, stddev=0.221], bias-{mean,stddev}=-0.005495,0.02592, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.01e+06, self-repaired-proportion=0.00748444, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.007,0.02,0.03,0.03 0.04,0.04,0.05,0.06), mean=0.0179, stddev=0.0113], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.13 0.18,0.24,0.44,0.64,0.76 0.84,0.89,0.92,0.97), mean=0.453, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.12,0.14,0.16 0.17,0.22,0.24,0.30), mean=0.122, stddev=0.0326], oderiv-count=4.74349e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46569.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.003 0.004,0.007,0.02,0.03,0.03 0.04,0.05,0.05,0.06), mean=0.0181, stddev=0.0117], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.008,0.01 0.01,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0247, stddev=0.00804]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76), mean=0.759, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.14,0.15 0.16,0.17,0.18,0.21,0.22 0.24,0.26,0.27,0.32), mean=0.188, stddev=0.0259], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01414, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.18,0.19,0.21,0.25,0.27 0.31,0.34,0.35,0.39), mean=0.223, stddev=0.0407], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.41 0.42,0.43,0.45,0.48,0.49 0.50,0.50,0.52,0.54), mean=0.452, stddev=0.0273], bias-{mean,stddev}=-0.0318,0.04346, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.07 0.07,0.08,0.10,0.11,0.11 0.12,0.12,0.13,0.14), mean=0.0941, stddev=0.0164], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.27,0.30,0.34 0.36,0.40,0.45,0.50,0.53 0.55,0.59,0.61,0.74), mean=0.448, stddev=0.0682], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0134, stddev=0.00273], oderiv-count=4.77126e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46057.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.07,0.08,0.09,0.11,0.11 0.12,0.12,0.13,0.14), mean=0.0933, stddev=0.0169], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.24), mean=0.156, stddev=0.0183]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01286, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58), mean=0.582, stddev=0.000598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.13,0.14,0.16,0.16 0.17,0.18,0.19,0.21), mean=0.145, stddev=0.0143], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01208, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.16,0.17,0.19,0.21,0.23 0.25,0.28,0.29,0.31), mean=0.191, stddev=0.0286], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.36,0.37,0.39,0.40,0.42 0.42,0.43,0.45,0.45), mean=0.386, stddev=0.0231], bias-{mean,stddev}=-0.02065,0.02211, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.17,0.21), mean=0.128, stddev=0.0139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.40 0.42,0.43,0.46,0.49,0.51 0.52,0.54,0.55,0.59), mean=0.464, stddev=0.0377], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.008,0.009,0.009 0.01,0.01,0.01,0.01), mean=0.00801, stddev=0.00117], oderiv-count=4.47763e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45545.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.14,0.14 0.15,0.16,0.17,0.20), mean=0.126, stddev=0.0145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.18,0.19,0.21,0.23,0.24 0.25,0.26,0.26,0.34), mean=0.21, stddev=0.0212]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01226, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.555, stddev=0.000518], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.17,0.17,0.20), mean=0.138, stddev=0.0125], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.16,0.16,0.18,0.20,0.21 0.21,0.23,0.24,0.25), mean=0.18, stddev=0.0195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.32 0.33,0.34,0.36,0.38,0.39 0.40,0.41,0.42,0.44), mean=0.361, stddev=0.0244], bias-{mean,stddev}=-0.01196,0.01545, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.22), mean=0.134, stddev=0.0124], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.44,0.47,0.50,0.51 0.52,0.54,0.54,0.56), mean=0.468, stddev=0.032], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0123, stddev=0.00153], oderiv-count=1.36262e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15181.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.21), mean=0.133, stddev=0.0132], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.26,0.27,0.35), mean=0.22, stddev=0.0214]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01282, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.41, stddev=0.000211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.13,0.14,0.14,0.15,0.16 0.16,0.16,0.17,0.17), mean=0.145, stddev=0.00929], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.0125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.20), mean=0.14, stddev=0.0162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.37,0.38,0.40,0.42,0.43 0.44,0.45,0.45,0.46), mean=0.399, stddev=0.0231], bias-{mean,stddev}=-0.01706,0.02894, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.06,0.08,0.09,0.09 0.10,0.10,0.11,0.13), mean=0.0759, stddev=0.0148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.24,0.27,0.30 0.33,0.36,0.43,0.48,0.51 0.53,0.57,0.58,0.69), mean=0.423, stddev=0.0731], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.05), mean=0.0212, stddev=0.0031], oderiv-count=1.5303e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15181.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.06,0.08,0.09,0.09 0.10,0.11,0.11,0.14), mean=0.0757, stddev=0.0154], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.15 0.16,0.16,0.17,0.20), mean=0.132, stddev=0.0169]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.54), mean=0.534, stddev=0.000573], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.18), mean=0.133, stddev=0.011], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.14,0.15 0.16,0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.30), mean=0.181, stddev=0.0204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.32 0.33,0.34,0.36,0.38,0.39 0.41,0.42,0.43,0.44), mean=0.363, stddev=0.0244], bias-{mean,stddev}=-0.02683,0.01491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.12,0.13,0.14 0.14,0.15,0.15,0.23), mean=0.125, stddev=0.0116], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.41,0.42,0.46,0.49,0.50 0.52,0.53,0.53,0.55), mean=0.456, stddev=0.036], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0129, stddev=0.00129], oderiv-count=1.44058e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14669.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.21), mean=0.123, stddev=0.012], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.19,0.21,0.22,0.23 0.24,0.25,0.25,0.31), mean=0.21, stddev=0.0177]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.513, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.18), mean=0.128, stddev=0.0111], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.22,0.24), mean=0.178, stddev=0.0203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.32 0.33,0.34,0.35,0.38,0.39 0.40,0.41,0.41,0.44), mean=0.357, stddev=0.0231], bias-{mean,stddev}=-0.02927,0.01569, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.66e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.16), mean=0.122, stddev=0.0125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.37,0.39 0.40,0.42,0.45,0.48,0.50 0.51,0.53,0.53,0.55), mean=0.449, stddev=0.0392], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.013, stddev=0.00133], oderiv-count=1.43405e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14157.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.16), mean=0.12, stddev=0.013], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.24,0.24,0.25,0.31), mean=0.208, stddev=0.0176]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.517, stddev=0.000977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.18), mean=0.129, stddev=0.012], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.11,0.14 0.15,0.16,0.18,0.20,0.20 0.21,0.22,0.22,0.24), mean=0.177, stddev=0.0242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.32 0.33,0.34,0.35,0.37,0.38 0.40,0.41,0.42,0.43), mean=0.356, stddev=0.0237], bias-{mean,stddev}=-0.03135,0.01738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.09 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.18), mean=0.119, stddev=0.0162], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.30,0.33,0.36 0.39,0.41,0.44,0.48,0.50 0.51,0.53,0.53,0.56), mean=0.443, stddev=0.0484], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02), mean=0.0131, stddev=0.00152], oderiv-count=1.35795e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13645.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.18), mean=0.118, stddev=0.0166], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.18,0.19,0.20,0.22,0.23 0.24,0.25,0.25,0.33), mean=0.205, stddev=0.0181]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.526, stddev=0.000457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.19), mean=0.131, stddev=0.0135], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01098, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.08,0.12 0.14,0.16,0.18,0.19,0.20 0.21,0.22,0.22,0.32), mean=0.173, stddev=0.028], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.31 0.32,0.33,0.35,0.37,0.38 0.39,0.40,0.42,0.44), mean=0.35, stddev=0.0261], bias-{mean,stddev}=-0.02854,0.01776, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.09,0.10,0.12,0.13,0.14 0.15,0.15,0.16,0.23), mean=0.117, stddev=0.0204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.18,0.24,0.34 0.37,0.40,0.44,0.48,0.50 0.51,0.53,0.54,0.59), mean=0.433, stddev=0.0619], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0126, stddev=0.00154], oderiv-count=1.28448e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13133.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.09,0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.23), mean=0.115, stddev=0.0205], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.17,0.17 0.18,0.19,0.20,0.22,0.23 0.23,0.25,0.26,0.37), mean=0.204, stddev=0.0196]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.52, stddev=0.000546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.19), mean=0.129, stddev=0.0149], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.11 0.13,0.15,0.18,0.20,0.21 0.21,0.22,0.22,0.24), mean=0.172, stddev=0.032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.31 0.32,0.32,0.35,0.37,0.38 0.39,0.41,0.41,0.42), mean=0.349, stddev=0.0259], bias-{mean,stddev}=-0.02466,0.01692, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.16e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.07 0.09,0.10,0.12,0.14,0.14 0.15,0.17,0.17,0.18), mean=0.118, stddev=0.0241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.21,0.31 0.35,0.39,0.43,0.48,0.50 0.51,0.53,0.54,0.57), mean=0.426, stddev=0.0676], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0122, stddev=0.00159], oderiv-count=1.30234e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12621.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.09,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.19), mean=0.117, stddev=0.0239], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.21,0.23,0.24 0.25,0.26,0.26,0.31), mean=0.214, stddev=0.0199]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01175, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.532, stddev=0.000518], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.15 0.16,0.17,0.18,0.20), mean=0.132, stddev=0.0173], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.10 0.12,0.15,0.18,0.20,0.21 0.22,0.23,0.23,0.25), mean=0.174, stddev=0.0373], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.31,0.31 0.32,0.33,0.35,0.38,0.39 0.40,0.41,0.41,0.43), mean=0.354, stddev=0.0262], bias-{mean,stddev}=-0.02232,0.01583, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.07 0.08,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.22), mean=0.119, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.19,0.29 0.33,0.38,0.43,0.47,0.49 0.50,0.52,0.53,0.55), mean=0.415, stddev=0.07], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.012, stddev=0.00164], oderiv-count=1.19405e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12109.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.08,0.09,0.12,0.14,0.15 0.16,0.17,0.18,0.21), mean=0.117, stddev=0.0275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.27,0.28,0.29,0.32), mean=0.23, stddev=0.0234]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.51,0.51), mean=0.504, stddev=0.000646], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.18,0.21), mean=0.124, stddev=0.0197], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.10 0.12,0.14,0.17,0.21,0.22 0.23,0.24,0.25,0.27), mean=0.172, stddev=0.0413], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.32,0.33,0.35,0.37,0.39 0.39,0.40,0.40,0.42), mean=0.352, stddev=0.0243], bias-{mean,stddev}=-0.0233,0.01426, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.82e+05, self-repaired-proportion=0.000457875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.09,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0914, stddev=0.0233], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.17,0.25 0.29,0.32,0.37,0.42,0.45 0.47,0.49,0.52,0.60), mean=0.367, stddev=0.0711], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0146, stddev=0.0022], oderiv-count=1.13286e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11597.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.09,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.091, stddev=0.0229], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.20,0.21,0.23,0.26,0.27 0.28,0.30,0.31,0.36), mean=0.232, stddev=0.0294]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.471, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.13,0.14 0.16,0.17,0.17,0.21), mean=0.116, stddev=0.0196], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.09,0.10 0.12,0.13,0.16,0.19,0.22 0.23,0.24,0.25,0.27), mean=0.163, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.31,0.31,0.33,0.35,0.36 0.37,0.38,0.38,0.40), mean=0.334, stddev=0.0221], bias-{mean,stddev}=-0.02776,0.02526, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.72e+05, self-repaired-proportion=0.0100365, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.002,0.01,0.02 0.03,0.04,0.05,0.07,0.08 0.09,0.11,0.13,0.19), mean=0.052, stddev=0.0233], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.05,0.08,0.12 0.16,0.21,0.28,0.35,0.40 0.45,0.53,0.60,0.73), mean=0.282, stddev=0.0996], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.07,0.10,0.15), mean=0.0274, stddev=0.0125], oderiv-count=1.12147e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11085.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.001,0.009,0.02 0.03,0.03,0.05,0.06,0.08 0.09,0.11,0.13,0.20), mean=0.0512, stddev=0.0232], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.009,0.05,0.11 0.14,0.16,0.18,0.21,0.22 0.23,0.24,0.25,0.30), mean=0.179, stddev=0.0399]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.481481, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, params-rms=0.01797, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.57,0.57,0.58,0.58,0.58 0.58,0.58,0.58,0.58), mean=0.575, stddev=0.00126], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.27,0.29,0.30,0.32 0.33,0.34,0.34,0.37), mean=0.287, stddev=0.0235], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.12 0.15,0.17,0.19,0.22,0.24 0.25,0.28,0.30,0.37), mean=0.193, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.36 0.37,0.38,0.39,0.41,0.42 0.43,0.44,0.44,0.45), mean=0.394, stddev=0.0204], bias-{mean,stddev}=-0.03101,0.02482, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.06,0.07,0.09,0.10 0.10,0.11,0.12,0.14), mean=0.0747, stddev=0.0175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.21,0.22,0.25 0.28,0.33,0.38,0.43,0.46 0.49,0.52,0.53,0.61), mean=0.379, stddev=0.0696], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.07), mean=0.0227, stddev=0.0046], oderiv-count=1.13549e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11085.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.06,0.07,0.09,0.10 0.10,0.11,0.12,0.13), mean=0.0738, stddev=0.0175], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.16 0.17,0.18,0.18,0.25), mean=0.143, stddev=0.0164]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, params-rms=0.01593, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.51, stddev=0.000546], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.25,0.27,0.29 0.31,0.33,0.34,0.39), mean=0.253, stddev=0.0302], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11085.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,-4e-09,2e-08,3e-08 4e-08,4e-08,4e-08,5e-08), mean=-2.64e-09, stddev=2.19e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.59,0.59,0.62 0.63,0.65,0.68,0.71,0.72 0.73,0.75,0.75,0.77), mean=0.676, stddev=0.0354]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000454541, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.19 0.24,0.28,0.34,0.40,0.44 0.47,0.51,0.53,1.1), mean=0.335, stddev=0.0887], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.99,1.0,1.0 1.1,1.1,1.2,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.15, stddev=0.0668], bias-{mean,stddev}=0.0003448,0.06586, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.007814, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.02,0.05 0.06,0.11,0.13,0.14,0.15 0.16,0.17,0.18,0.33), mean=0.12, stddev=0.0354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.22 0.23,0.23,0.25,0.26,0.27 0.27,0.28,0.29,0.63), mean=0.248, stddev=0.0288], bias-{mean,stddev}=-0.06144,0.05511, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.7e+05, self-repaired-proportion=0.0157016, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.003,0.004,0.007 0.009,0.01,0.03,0.06,0.07 0.08,0.10,0.11,0.16), mean=0.0361, stddev=0.026], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.08 0.09,0.13,0.25,0.41,0.51 0.68,0.73,0.77,0.81), mean=0.282, stddev=0.172], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0163, stddev=0.00525], oderiv-count=1.12666e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11085.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.002,0.004,0.006 0.009,0.01,0.03,0.06,0.07 0.08,0.10,0.12,0.17), mean=0.0356, stddev=0.0266], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.01,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.13,0.15,0.23), mean=0.0719, stddev=0.0276]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000454541, l2-regularize=0.008, max-change=0.75, params-rms=0.01024, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33), mean=0.328, stddev=0.000345], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.11 0.11,0.12,0.14,0.17,0.24 0.29,0.31,0.32,0.33), mean=0.155, stddev=0.0527], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11085.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-3e-08,-3e-08,-3e-08 -2e-08,-1e-08,-6e-10,1e-08,2e-08 3e-08,3e-08,3e-08,4e-08), mean=6.49e-11, stddev=1.59e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.28 0.29,0.30,0.31,0.33,0.34 0.34,0.35,0.35,0.37), mean=0.314, stddev=0.0172]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.0022727, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.09 0.15,0.28,0.53,0.70,0.79 0.85,0.91,0.94,1.3), mean=0.5, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.7,1.8,1.9,1.9 2.0,2.0,2.0,2.1), mean=1.83, stddev=0.0955], bias-{mean,stddev}=4.304e-09,0.07287, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-08,3e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.08461e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/42.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/43.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.31806 tdnnf2.linear:4.29304 tdnnf2.affine:4.16527 tdnnf3.linear:3.41382 tdnnf3.affine:3.57115 tdnnf4.linear:3.25716 tdnnf4.affine:3.41683 tdnnf5.linear:2.58087 tdnnf5.affine:2.7621 tdnnf6.linear:3.08593 tdnnf6.affine:3.27832 tdnnf7.linear:2.8686 tdnnf7.affine:3.13192 tdnnf8.linear:2.8323 tdnnf8.affine:3.07516 tdnnf9.linear:2.79545 tdnnf9.affine:2.97072 tdnnf10.linear:2.693 tdnnf10.affine:2.90404 tdnnf11.linear:2.63325 tdnnf11.affine:2.89147 tdnnf12.linear:2.52922 tdnnf12.affine:2.94825 tdnnf13.linear:2.58808 tdnnf13.affine:3.10111 prefinal-l:3.36889 prefinal-chain.affine:3.12759 prefinal-chain.linear:2.41541 output.affine:3.38966 prefinal-xent.affine:1.79883 prefinal-xent.linear:1.11118 output-xent.affine:2.6738 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.3605 tdnnf2.linear:8.58395 tdnnf2.affine:7.4433 tdnnf3.linear:6.58221 tdnnf3.affine:6.25958 tdnnf4.linear:6.27922 tdnnf4.affine:5.83003 tdnnf5.linear:4.6411 tdnnf5.affine:4.65095 tdnnf6.linear:6.03976 tdnnf6.affine:5.89699 tdnnf7.linear:5.80133 tdnnf7.affine:5.82043 tdnnf8.linear:5.84984 tdnnf8.affine:5.82086 tdnnf9.linear:5.94905 tdnnf9.affine:5.72264 tdnnf10.linear:5.885 tdnnf10.affine:5.68271 tdnnf11.linear:6.01799 tdnnf11.affine:5.75337 tdnnf12.linear:5.69973 tdnnf12.affine:5.71763 tdnnf13.linear:5.32491 tdnnf13.affine:5.48544 prefinal-l:9.19927 prefinal-chain.affine:6.44051 prefinal-chain.linear:8.15608 output.affine:18.7582 prefinal-xent.affine:4.79423 prefinal-xent.linear:5.24354 output-xent.affine:29.5197 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.507498 tdnnf2.linear:0.496664 tdnnf2.affine:0.554206 tdnnf3.linear:0.513278 tdnnf3.affine:0.563359 tdnnf4.linear:0.509804 tdnnf4.affine:0.578676 tdnnf5.linear:0.547368 tdnnf5.affine:0.587972 tdnnf6.linear:0.50493 tdnnf6.affine:0.550422 tdnnf7.linear:0.488935 tdnnf7.affine:0.532236 tdnnf8.linear:0.480419 tdnnf8.affine:0.523087 tdnnf9.linear:0.466446 tdnnf9.affine:0.513976 tdnnf10.linear:0.453373 tdnnf10.affine:0.505922 tdnnf11.linear:0.434044 tdnnf11.affine:0.498154 tdnnf12.linear:0.440123 tdnnf12.affine:0.509843 tdnnf13.linear:0.481451 tdnnf13.affine:0.560421 prefinal-l:0.362081 prefinal-chain.affine:0.482647 prefinal-chain.linear:0.294326 output.affine:0.180017 prefinal-xent.affine:0.377146 prefinal-xent.linear:0.210596 output-xent.affine:0.0904164 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 19 22:23:15 EDT 2022, elapsed time 0 seconds
