# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/55.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/54.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/55.mdl 
# Started at Tue Jul 19 23:20:12 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/55.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02428, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.19,0.21,0.23 0.24,0.26,0.30,0.39,0.48 0.60,0.74,0.81,0.98), mean=0.339, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.51 0.54,0.58,0.71,0.90,1.0 1.2,1.2,1.3,1.3), mean=0.751, stddev=0.197], bias-{mean,stddev}=-0.005416,0.02401, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.03e+06, self-repaired-proportion=0.00643361, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.002,0.002,0.003 0.004,0.006,0.01,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0163, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.13 0.17,0.23,0.44,0.65,0.76 0.85,0.90,0.92,0.97), mean=0.452, stddev=0.222], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.10,0.12,0.15,0.17 0.19,0.23,0.28,0.36), mean=0.127, stddev=0.0382], oderiv-count=4.81747e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46022.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.002,0.002,0.003 0.004,0.006,0.01,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0162, stddev=0.0105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0221, stddev=0.00706]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01536, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.69,0.69,0.69 0.69,0.69,0.69,0.70,0.70 0.70,0.70,0.70,0.70), mean=0.695, stddev=0.000897], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.14 0.15,0.15,0.17,0.19,0.21 0.22,0.24,0.25,0.29), mean=0.172, stddev=0.0248], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.19,0.22,0.25 0.28,0.31,0.32,0.34), mean=0.199, stddev=0.0391], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.39,0.40,0.42,0.44 0.44,0.45,0.45,0.49), mean=0.404, stddev=0.0223], bias-{mean,stddev}=-0.03114,0.04171, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.05,0.07,0.08,0.08 0.09,0.09,0.09,0.11), mean=0.0657, stddev=0.0143], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.24,0.30 0.33,0.36,0.43,0.50,0.54 0.58,0.64,0.67,0.73), mean=0.431, stddev=0.0898], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.017, stddev=0.00402], oderiv-count=4.62381e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45510.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.05,0.07,0.08,0.08 0.09,0.09,0.09,0.10), mean=0.065, stddev=0.0147], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.112, stddev=0.0155]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.516, stddev=0.00112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.18), mean=0.128, stddev=0.0133], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.16,0.19,0.20 0.22,0.24,0.25,0.28), mean=0.167, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.30 0.31,0.32,0.34,0.36,0.36 0.37,0.38,0.39,0.40), mean=0.339, stddev=0.0212], bias-{mean,stddev}=-0.01949,0.02212, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.17), mean=0.0931, stddev=0.013], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.34,0.36,0.38 0.40,0.42,0.45,0.49,0.51 0.53,0.55,0.57,0.60), mean=0.455, stddev=0.0462], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00967, stddev=0.00168], oderiv-count=4.49741e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=44998.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.18), mean=0.0911, stddev=0.0136], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.18,0.20,0.21,0.26), mean=0.154, stddev=0.0182]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.487, stddev=0.000386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.14,0.15,0.16,0.18), mean=0.121, stddev=0.0119], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009947, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.24), mean=0.158, stddev=0.0191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.28 0.29,0.30,0.32,0.34,0.35 0.35,0.36,0.37,0.40), mean=0.318, stddev=0.0219], bias-{mean,stddev}=-0.01199,0.01588, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.11,0.11 0.12,0.13,0.13,0.18), mean=0.0991, stddev=0.0117], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.40 0.41,0.43,0.45,0.49,0.50 0.52,0.53,0.54,0.57), mean=0.456, stddev=0.0363], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0146, stddev=0.00192], oderiv-count=1.50534e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14999.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.17), mean=0.0975, stddev=0.012], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.19 0.19,0.20,0.21,0.29), mean=0.165, stddev=0.0183]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35), mean=0.351, stddev=0.00109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.11,0.12,0.12,0.13,0.13 0.14,0.14,0.14,0.15), mean=0.124, stddev=0.00835], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.16,0.16,0.19), mean=0.121, stddev=0.016], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.31 0.32,0.33,0.34,0.36,0.37 0.38,0.39,0.40,0.42), mean=0.344, stddev=0.0225], bias-{mean,stddev}=-0.0144,0.02428, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.04,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0549, stddev=0.0118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.23,0.27 0.30,0.34,0.41,0.48,0.52 0.54,0.57,0.58,0.69), mean=0.409, stddev=0.0833], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0256, stddev=0.00389], oderiv-count=1.46349e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14999.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0542, stddev=0.0121], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.16), mean=0.097, stddev=0.0133]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01053, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48), mean=0.477, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.13 0.14,0.14,0.14,0.16), mean=0.119, stddev=0.0102], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01007, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.30), mean=0.16, stddev=0.0195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.28 0.29,0.30,0.32,0.34,0.35 0.36,0.37,0.38,0.41), mean=0.322, stddev=0.023], bias-{mean,stddev}=-0.0261,0.01517, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.09,0.10,0.11 0.11,0.12,0.12,0.20), mean=0.0935, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.35,0.36,0.37 0.39,0.41,0.44,0.48,0.50 0.51,0.53,0.54,0.57), mean=0.444, stddev=0.0427], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0154, stddev=0.0017], oderiv-count=1.47622e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14487.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.11,0.12,0.19), mean=0.092, stddev=0.0108], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.18,0.19,0.19,0.27), mean=0.16, stddev=0.014]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01027, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.465, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.10,0.11,0.12,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.116, stddev=0.0105], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.158, stddev=0.0188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.29,0.30,0.32,0.33,0.35 0.35,0.36,0.37,0.38), mean=0.318, stddev=0.0208], bias-{mean,stddev}=-0.02854,0.01545, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.11,0.12,0.13), mean=0.0915, stddev=0.0107], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.33,0.34,0.37 0.38,0.40,0.43,0.47,0.49 0.51,0.52,0.53,0.55), mean=0.436, stddev=0.0439], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0157, stddev=0.00185], oderiv-count=1.39552e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13975.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.10 0.11,0.12,0.12,0.13), mean=0.0903, stddev=0.0108], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.17 0.18,0.19,0.19,0.26), mean=0.158, stddev=0.0138]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.471, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.17), mean=0.117, stddev=0.0115], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009973, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.25), mean=0.158, stddev=0.0214], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.32,0.34,0.35 0.35,0.36,0.36,0.40), mean=0.318, stddev=0.0212], bias-{mean,stddev}=-0.03131,0.01713, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0897, stddev=0.0134], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.28,0.30,0.34 0.37,0.39,0.43,0.48,0.50 0.51,0.52,0.54,0.57), mean=0.43, stddev=0.0556], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0155, stddev=0.00197], oderiv-count=1.36186e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13463.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.12,0.14), mean=0.0885, stddev=0.0134], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.16,0.17,0.17 0.18,0.19,0.19,0.26), mean=0.157, stddev=0.015]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.473, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.13 0.14,0.15,0.15,0.17), mean=0.118, stddev=0.0126], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.08,0.11 0.13,0.14,0.16,0.17,0.18 0.19,0.19,0.20,0.32), mean=0.155, stddev=0.0245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.28 0.28,0.29,0.31,0.33,0.34 0.35,0.36,0.37,0.39), mean=0.312, stddev=0.0234], bias-{mean,stddev}=-0.02852,0.01729, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.23), mean=0.0881, stddev=0.0164], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.24,0.32 0.35,0.38,0.42,0.47,0.49 0.52,0.53,0.54,0.57), mean=0.42, stddev=0.0668], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0149, stddev=0.00185], oderiv-count=1.2288e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12951.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.23), mean=0.0871, stddev=0.0165], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.13 0.14,0.14,0.16,0.17,0.18 0.18,0.19,0.20,0.35), mean=0.157, stddev=0.0168]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01041, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.471, stddev=0.000669], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.13 0.14,0.15,0.15,0.19), mean=0.117, stddev=0.0137], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0098, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.06,0.10 0.12,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.26), mean=0.154, stddev=0.0281], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.28,0.29,0.31,0.33,0.34 0.35,0.36,0.36,0.38), mean=0.313, stddev=0.0222], bias-{mean,stddev}=-0.02423,0.01614, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.11e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.06 0.07,0.08,0.09,0.10,0.11 0.12,0.13,0.13,0.15), mean=0.0898, stddev=0.019], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.18,0.29 0.33,0.37,0.42,0.47,0.49 0.51,0.53,0.54,0.59), mean=0.415, stddev=0.0739], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0144, stddev=0.00198], oderiv-count=1.26931e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12439.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.06 0.07,0.07,0.09,0.10,0.11 0.12,0.13,0.13,0.15), mean=0.0885, stddev=0.0191], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.18 0.19,0.20,0.21,0.25), mean=0.163, stddev=0.0169]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48,0.48 0.48,0.49,0.49,0.49), mean=0.483, stddev=0.00116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.16,0.16,0.20), mean=0.12, stddev=0.0163], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009936, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.10 0.12,0.14,0.16,0.18,0.19 0.20,0.20,0.20,0.22), mean=0.156, stddev=0.0313], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.28 0.29,0.30,0.32,0.34,0.35 0.36,0.36,0.37,0.38), mean=0.317, stddev=0.0232], bias-{mean,stddev}=-0.02257,0.01599, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.05 0.06,0.07,0.09,0.11,0.12 0.12,0.13,0.14,0.15), mean=0.0906, stddev=0.0216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.14,0.27 0.32,0.36,0.42,0.46,0.48 0.50,0.52,0.54,0.57), mean=0.406, stddev=0.0776], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.014, stddev=0.00196], oderiv-count=1.18944e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11927.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.05 0.06,0.07,0.09,0.11,0.12 0.12,0.13,0.14,0.16), mean=0.0901, stddev=0.0219], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.17,0.19,0.20 0.21,0.22,0.22,0.24), mean=0.175, stddev=0.0189]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.46, stddev=0.000598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.16,0.22), mean=0.113, stddev=0.0187], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009987, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.09 0.11,0.13,0.16,0.19,0.20 0.21,0.22,0.22,0.23), mean=0.156, stddev=0.0352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.29 0.29,0.30,0.32,0.34,0.35 0.36,0.36,0.37,0.38), mean=0.319, stddev=0.0205], bias-{mean,stddev}=-0.0235,0.01375, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.18e+05, self-repaired-proportion=0.00106229, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.06,0.07,0.09,0.09 0.10,0.11,0.11,0.14), mean=0.0709, stddev=0.018], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.14,0.23 0.27,0.31,0.36,0.42,0.44 0.47,0.49,0.51,0.58), mean=0.356, stddev=0.0765], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.017, stddev=0.00252], oderiv-count=1.1847e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11415.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.06,0.07,0.09,0.09 0.10,0.11,0.11,0.13), mean=0.0701, stddev=0.018], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.17,0.19,0.20 0.21,0.23,0.24,0.26), mean=0.175, stddev=0.0226]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009557, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.433, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.12,0.13 0.14,0.16,0.17,0.19), mean=0.106, stddev=0.019], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009486, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.09 0.10,0.12,0.15,0.18,0.19 0.21,0.22,0.22,0.24), mean=0.148, stddev=0.035], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.27 0.28,0.29,0.30,0.32,0.33 0.34,0.35,0.35,0.36), mean=0.303, stddev=0.0198], bias-{mean,stddev}=-0.02662,0.02157, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.53e+05, self-repaired-proportion=0.0184062, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.001,0.006,0.01 0.02,0.03,0.04,0.05,0.06 0.07,0.09,0.11,0.14), mean=0.0399, stddev=0.0185], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.03,0.05,0.10 0.15,0.19,0.26,0.33,0.39 0.44,0.53,0.58,0.68), mean=0.269, stddev=0.102], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.04 0.05,0.08,0.10,0.12), mean=0.0311, stddev=0.0127], oderiv-count=1.10342e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10903.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,0.0004,0.005,0.01 0.02,0.03,0.04,0.05,0.06 0.07,0.09,0.10,0.13), mean=0.0389, stddev=0.0186], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.004,0.03,0.08 0.10,0.12,0.14,0.16,0.17 0.17,0.18,0.19,0.21), mean=0.133, stddev=0.0314]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.333333, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, params-rms=0.01663, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.532, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.23,0.25,0.26,0.28,0.29 0.30,0.31,0.32,0.35), mean=0.265, stddev=0.0235], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01147, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.10,0.13 0.15,0.16,0.18,0.20,0.21 0.23,0.25,0.26,0.32), mean=0.181, stddev=0.031], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.34,0.35,0.37,0.38,0.39 0.40,0.41,0.41,0.41), mean=0.367, stddev=0.0188], bias-{mean,stddev}=-0.03446,0.02312, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.04,0.06,0.07,0.07 0.08,0.09,0.09,0.12), mean=0.0568, stddev=0.0143], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.18,0.22 0.26,0.30,0.36,0.41,0.44 0.47,0.50,0.52,0.60), mean=0.355, stddev=0.0738], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.08), mean=0.0276, stddev=0.00507], oderiv-count=1.1568e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10903.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.04,0.06,0.07,0.07 0.08,0.09,0.09,0.12), mean=0.056, stddev=0.0145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.17), mean=0.112, stddev=0.0129]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, params-rms=0.01474, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.472, stddev=0.000423], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.20,0.21,0.23,0.25,0.27 0.28,0.30,0.32,0.36), mean=0.234, stddev=0.0267], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10903.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -3e-08,-2e-08,2e-09,2e-08,3e-08 4e-08,4e-08,5e-08,6e-08), mean=1.31e-09, stddev=2.11e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.56 0.57,0.58,0.60,0.62,0.64 0.65,0.66,0.67,0.69), mean=0.601, stddev=0.0281]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000323165, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.19 0.23,0.27,0.33,0.38,0.42 0.46,0.50,0.52,0.94), mean=0.324, stddev=0.0879], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.98,1.0,1.0 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.12, stddev=0.0533], bias-{mean,stddev}=0.0003227,0.06098, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.007421, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.02,0.05 0.07,0.10,0.12,0.14,0.15 0.15,0.16,0.16,0.22), mean=0.115, stddev=0.0314], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.26 0.26,0.27,0.27,0.29), mean=0.237, stddev=0.0146], bias-{mean,stddev}=-0.05681,0.04889, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.54e+05, self-repaired-proportion=0.0233054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.002,0.003,0.005 0.007,0.009,0.02,0.04,0.06 0.07,0.09,0.10,0.15), mean=0.0282, stddev=0.0228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.05,0.06 0.08,0.11,0.22,0.38,0.48 0.65,0.73,0.78,0.83), mean=0.259, stddev=0.172], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0195, stddev=0.00574], oderiv-count=1.14336e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10903.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.002,0.003,0.005 0.007,0.009,0.02,0.04,0.06 0.07,0.09,0.10,0.14), mean=0.028, stddev=0.0227], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.09,0.10,0.11,0.16), mean=0.0577, stddev=0.0217]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000323165, l2-regularize=0.008, max-change=0.75, params-rms=0.009628, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.31 0.31,0.31,0.31,0.31,0.31 0.31,0.31,0.31,0.31), mean=0.308, stddev=0.000193], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.11,0.11,0.13,0.16,0.23 0.27,0.30,0.30,0.31), mean=0.146, stddev=0.0504], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10903.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-2e-08,-2e-08 -2e-08,-1e-08,-5e-10,1e-08,2e-08 2e-08,2e-08,3e-08,4e-08), mean=8.66e-11, stddev=1.22e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.25 0.26,0.26,0.28,0.29,0.29 0.30,0.31,0.31,0.34), mean=0.277, stddev=0.0151]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00161583, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03463, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.09 0.17,0.29,0.53,0.70,0.79 0.86,0.92,0.94,1.3), mean=0.505, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,1.9,1.9,1.9 2.0,2.0,2.0,2.1), mean=1.84, stddev=0.0903], bias-{mean,stddev}=5.862e-09,0.06699, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-08,5e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.16838e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/54.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/55.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.84894 tdnnf2.linear:3.1351 tdnnf2.affine:3.0267 tdnnf3.linear:2.40778 tdnnf3.affine:2.54773 tdnnf4.linear:2.29505 tdnnf4.affine:2.44249 tdnnf5.linear:1.78542 tdnnf5.affine:1.93779 tdnnf6.linear:2.17292 tdnnf6.affine:2.35305 tdnnf7.linear:2.04561 tdnnf7.affine:2.26022 tdnnf8.linear:1.99385 tdnnf8.affine:2.20138 tdnnf9.linear:1.95731 tdnnf9.affine:2.13766 tdnnf10.linear:1.90204 tdnnf10.affine:2.085 tdnnf11.linear:1.86185 tdnnf11.affine:2.08493 tdnnf12.linear:1.78664 tdnnf12.affine:2.16065 tdnnf13.linear:1.8779 tdnnf13.affine:2.30611 prefinal-l:2.48941 prefinal-chain.affine:2.44661 prefinal-chain.linear:1.89938 output.affine:2.39878 prefinal-xent.affine:1.35488 prefinal-xent.linear:0.859972 output-xent.affine:1.93549 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.551 tdnnf2.linear:7.86366 tdnnf2.affine:6.68842 tdnnf3.linear:5.83548 tdnnf3.affine:5.50803 tdnnf4.linear:5.51527 tdnnf4.affine:5.13264 tdnnf5.linear:3.97313 tdnnf5.affine:4.00323 tdnnf6.linear:5.39268 tdnnf6.affine:5.24718 tdnnf7.linear:5.25904 tdnnf7.affine:5.20282 tdnnf8.linear:5.32383 tdnnf8.affine:5.23235 tdnnf9.linear:5.35072 tdnnf9.affine:5.12434 tdnnf10.linear:5.32801 tdnnf10.affine:5.10322 tdnnf11.linear:5.46367 tdnnf11.affine:5.16356 tdnnf12.linear:5.19977 tdnnf12.affine:5.18684 tdnnf13.linear:4.89328 tdnnf13.affine:4.97903 prefinal-l:8.51444 prefinal-chain.affine:6.02208 prefinal-chain.linear:7.54884 output.affine:18.1536 prefinal-xent.affine:4.49305 prefinal-xent.linear:4.92934 output-xent.affine:29.6611 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.417252 tdnnf2.linear:0.396181 tdnnf2.affine:0.448871 tdnnf3.linear:0.408269 tdnnf3.affine:0.45724 tdnnf4.linear:0.411014 tdnnf4.affine:0.470464 tdnnf5.linear:0.442771 tdnnf5.affine:0.477702 tdnnf6.linear:0.399728 tdnnf6.affine:0.444181 tdnnf7.linear:0.38586 tdnnf7.affine:0.430483 tdnnf8.linear:0.371524 tdnnf8.affine:0.418077 tdnnf9.linear:0.362369 tdnnf9.affine:0.413686 tdnnf10.linear:0.353853 tdnnf10.affine:0.405493 tdnnf11.linear:0.338124 tdnnf11.affine:0.400935 tdnnf12.linear:0.341497 tdnnf12.affine:0.413592 tdnnf13.linear:0.381355 tdnnf13.affine:0.459906 prefinal-l:0.292083 prefinal-chain.affine:0.403759 prefinal-chain.linear:0.249516 output.affine:0.131778 prefinal-xent.affine:0.300012 prefinal-xent.linear:0.173344 output-xent.affine:0.0652121 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Jul 19 23:20:12 EDT 2022, elapsed time 0 seconds
