# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/79.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/78.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/79.mdl 
# Started at Wed Jul 20 00:16:30 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/79.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00576, bias-{mean,stddev}=-0.0009624,0.01288
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.14,0.15,0.17 0.18,0.20,0.26,0.36,0.47 0.59,0.71,0.75,0.87), mean=0.299, stddev=0.13], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.43,0.46 0.48,0.53,0.65,0.82,0.92 1.0,1.1,1.1,1.2), mean=0.682, stddev=0.169], bias-{mean,stddev}=-0.007022,0.02269, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.12e+06, self-repaired-proportion=0.0133702, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.001,0.002 0.002,0.004,0.01,0.02,0.03 0.03,0.04,0.04,0.06), mean=0.0132, stddev=0.0105], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.11 0.13,0.19,0.37,0.67,0.79 0.89,0.93,0.94,0.97), mean=0.422, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.08 0.09,0.10,0.13,0.17,0.20 0.23,0.29,0.32,0.44), mean=0.142, stddev=0.0505], oderiv-count=4.55539e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46637.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0008,0.001,0.002 0.002,0.003,0.01,0.02,0.03 0.03,0.04,0.04,0.06), mean=0.0132, stddev=0.0106], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.006 0.008,0.01,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.018, stddev=0.00842]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01342, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61), mean=0.607, stddev=0.000299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.17,0.19 0.21,0.23,0.24,0.27), mean=0.149, stddev=0.0299], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.17,0.20,0.23 0.25,0.28,0.29,0.32), mean=0.171, stddev=0.0423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.33 0.33,0.34,0.35,0.37,0.38 0.38,0.39,0.39,0.40), mean=0.352, stddev=0.0171], bias-{mean,stddev}=-0.02185,0.0289, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.02 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.09), mean=0.0389, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.19,0.27 0.31,0.35,0.42,0.49,0.55 0.61,0.71,0.75,0.86), mean=0.425, stddev=0.108], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.07), mean=0.0261, stddev=0.00651], oderiv-count=4.64525e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46125.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.009,0.01,0.02 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0384, stddev=0.0104], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.06,0.07,0.08,0.08 0.09,0.10,0.11,0.14), mean=0.067, stddev=0.0137]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.009712, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.44, stddev=0.000457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.17), mean=0.109, stddev=0.0152], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.008957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.12,0.14,0.16,0.18 0.19,0.21,0.22,0.26), mean=0.141, stddev=0.0275], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.27,0.29,0.30,0.31 0.31,0.32,0.33,0.33), mean=0.286, stddev=0.0173], bias-{mean,stddev}=-0.02037,0.02272, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.36e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.06,0.07 0.07,0.08,0.09,0.17), mean=0.0554, stddev=0.0123], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.29,0.32 0.35,0.38,0.44,0.49,0.51 0.53,0.56,0.57,0.62), mean=0.433, stddev=0.0643], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0144, stddev=0.00269], oderiv-count=4.22496e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45613.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.05,0.06,0.07 0.07,0.08,0.09,0.17), mean=0.0547, stddev=0.0124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.11,0.11 0.12,0.14,0.15,0.23), mean=0.096, stddev=0.0162]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.009024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.408, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.13,0.13,0.14,0.16), mean=0.101, stddev=0.0131], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.008365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.18,0.24), mean=0.132, stddev=0.0199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.24 0.24,0.25,0.27,0.28,0.29 0.30,0.30,0.31,0.32), mean=0.267, stddev=0.0183], bias-{mean,stddev}=-0.01509,0.01648, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.16), mean=0.0603, stddev=0.0107], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.33,0.35 0.37,0.39,0.43,0.47,0.50 0.52,0.53,0.54,0.59), mean=0.433, stddev=0.0498], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03), mean=0.0213, stddev=0.00302], oderiv-count=1.46938e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15204.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.17), mean=0.0598, stddev=0.0109], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.11,0.12,0.12 0.13,0.14,0.14,0.27), mean=0.106, stddev=0.0154]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.008423, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27), mean=0.27, stddev=0.000376], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.09,0.10,0.11 0.11,0.11,0.12,0.13), mean=0.095, stddev=0.00783], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.008519, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.08,0.09,0.11,0.12 0.12,0.13,0.14,0.19), mean=0.095, stddev=0.0164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.25,0.26,0.27,0.28,0.29 0.30,0.31,0.31,0.33), mean=0.272, stddev=0.017], bias-{mean,stddev}=-0.01272,0.0203, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.000940835, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.006,0.009,0.01 0.02,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0294, stddev=0.00986], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.13,0.17 0.23,0.28,0.38,0.46,0.51 0.54,0.57,0.61,0.75), mean=0.373, stddev=0.111], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.07,0.07,0.09), mean=0.0433, stddev=0.0085], oderiv-count=1.49158e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15204.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.006,0.009,0.01 0.02,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0288, stddev=0.00981], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.04 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0538, stddev=0.0114]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.421, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.13,0.13,0.14,0.16), mean=0.104, stddev=0.012], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008766, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.18,0.28), mean=0.139, stddev=0.0192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.25,0.26,0.28,0.30,0.31 0.32,0.32,0.33,0.36), mean=0.28, stddev=0.021], bias-{mean,stddev}=-0.02675,0.01606, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.15), mean=0.0568, stddev=0.00896], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.30,0.33 0.35,0.37,0.41,0.46,0.48 0.50,0.52,0.53,0.60), mean=0.413, stddev=0.053], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0242, stddev=0.00302], oderiv-count=1.49075e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14692.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.15), mean=0.0562, stddev=0.00903], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.24), mean=0.103, stddev=0.0119]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.411, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.16), mean=0.102, stddev=0.0121], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008752, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.139, stddev=0.018], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.25 0.26,0.26,0.28,0.29,0.30 0.31,0.32,0.32,0.34), mean=0.279, stddev=0.0185], bias-{mean,stddev}=-0.02984,0.01635, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.78e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.10), mean=0.056, stddev=0.00893], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.25,0.28,0.30 0.33,0.36,0.40,0.45,0.48 0.50,0.52,0.54,0.62), mean=0.403, stddev=0.0586], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.05), mean=0.0242, stddev=0.00324], oderiv-count=1.36058e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14180.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.04,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0557, stddev=0.00922], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.22), mean=0.104, stddev=0.0118]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009279, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.42, stddev=0.000211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.13,0.13,0.14,0.17), mean=0.104, stddev=0.0125], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008835, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.09,0.11 0.12,0.13,0.14,0.16,0.16 0.17,0.18,0.18,0.25), mean=0.14, stddev=0.0207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.25 0.26,0.26,0.28,0.30,0.31 0.31,0.32,0.32,0.34), mean=0.282, stddev=0.0192], bias-{mean,stddev}=-0.03226,0.01795, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.41e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.04,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.13), mean=0.0553, stddev=0.0115], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.20,0.24,0.28 0.31,0.34,0.40,0.45,0.48 0.50,0.52,0.53,0.57), mean=0.396, stddev=0.0678], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0237, stddev=0.00319], oderiv-count=1.39782e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13668.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.04,0.05,0.05,0.06,0.07 0.07,0.08,0.08,0.13), mean=0.0547, stddev=0.0115], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.21), mean=0.102, stddev=0.0135]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0093, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.421, stddev=0.000503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.09,0.10,0.12,0.12 0.13,0.13,0.14,0.17), mean=0.104, stddev=0.0133], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008692, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.07,0.10 0.11,0.12,0.14,0.15,0.16 0.17,0.18,0.18,0.31), mean=0.137, stddev=0.0234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.24 0.25,0.26,0.28,0.30,0.30 0.31,0.32,0.32,0.33), mean=0.277, stddev=0.0201], bias-{mean,stddev}=-0.03014,0.01845, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.20), mean=0.0538, stddev=0.0129], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.22,0.26 0.29,0.33,0.39,0.45,0.48 0.50,0.54,0.55,0.63), mean=0.384, stddev=0.0759], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0232, stddev=0.00321], oderiv-count=1.21754e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13156.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.18), mean=0.053, stddev=0.0126], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.28), mean=0.102, stddev=0.0141]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.422, stddev=0.000503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.12,0.12 0.13,0.14,0.15,0.19), mean=0.104, stddev=0.0151], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008787, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.09 0.11,0.12,0.14,0.16,0.16 0.17,0.18,0.19,0.26), mean=0.138, stddev=0.0261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.25 0.26,0.26,0.28,0.30,0.30 0.31,0.32,0.32,0.34), mean=0.281, stddev=0.019], bias-{mean,stddev}=-0.02667,0.01798, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.66e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.04,0.06,0.07,0.07 0.08,0.09,0.10,0.15), mean=0.0568, stddev=0.0148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.19,0.25 0.29,0.33,0.39,0.45,0.48 0.51,0.53,0.55,0.61), mean=0.387, stddev=0.0788], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0223, stddev=0.00342], oderiv-count=1.24538e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12644.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.04,0.06,0.07,0.07 0.08,0.09,0.10,0.15), mean=0.0563, stddev=0.0145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.14,0.14,0.22), mean=0.108, stddev=0.0137]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.436, stddev=0.0008], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.09,0.09,0.11,0.12,0.13 0.14,0.15,0.16,0.22), mean=0.107, stddev=0.018], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.08 0.10,0.13,0.15,0.16,0.17 0.18,0.18,0.19,0.22), mean=0.141, stddev=0.0283], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.27,0.29,0.30,0.31 0.32,0.33,0.34,0.35), mean=0.288, stddev=0.0193], bias-{mean,stddev}=-0.02529,0.01711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.05,0.06,0.07,0.08 0.08,0.09,0.10,0.13), mean=0.0593, stddev=0.0154], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.19,0.25 0.29,0.33,0.39,0.44,0.47 0.49,0.52,0.55,0.60), mean=0.383, stddev=0.0742], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0215, stddev=0.00327], oderiv-count=1.21498e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12132.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.05,0.06,0.07,0.08 0.08,0.09,0.10,0.13), mean=0.0586, stddev=0.0152], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.10,0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.17), mean=0.117, stddev=0.0138]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009306, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.421, stddev=0.000473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.09,0.10,0.12,0.13 0.14,0.15,0.17,0.25), mean=0.103, stddev=0.021], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009254, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.09 0.11,0.12,0.15,0.17,0.18 0.19,0.20,0.20,0.21), mean=0.145, stddev=0.0303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.27,0.28,0.29,0.31,0.32 0.33,0.33,0.34,0.36), mean=0.296, stddev=0.0183], bias-{mean,stddev}=-0.02699,0.01449, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.17e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.11), mean=0.0513, stddev=0.0136], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.20,0.24 0.27,0.30,0.36,0.41,0.44 0.46,0.49,0.51,0.60), mean=0.354, stddev=0.0681], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.06), mean=0.0257, stddev=0.00342], oderiv-count=1.18579e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11620.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.11), mean=0.0509, stddev=0.0135], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.09 0.10,0.10,0.11,0.13,0.13 0.14,0.14,0.15,0.19), mean=0.115, stddev=0.0142]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008912, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.403, stddev=0.000532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.08,0.09,0.11,0.13 0.14,0.16,0.17,0.21), mean=0.0983, stddev=0.0224], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008897, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.07,0.08 0.10,0.12,0.14,0.16,0.18 0.19,0.20,0.20,0.22), mean=0.139, stddev=0.0309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.25 0.26,0.27,0.28,0.30,0.31 0.31,0.32,0.32,0.35), mean=0.284, stddev=0.0185], bias-{mean,stddev}=-0.02707,0.01766, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.61e+05, self-repaired-proportion=0.0155169, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0005,0.003,0.01 0.02,0.03,0.03,0.04,0.05 0.05,0.07,0.07,0.10), mean=0.034, stddev=0.0128], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.03,0.07,0.16 0.21,0.24,0.29,0.35,0.38 0.43,0.48,0.53,0.69), mean=0.293, stddev=0.0848], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.07,0.09,0.10,0.17), mean=0.0431, stddev=0.0134], oderiv-count=1.12781e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11108.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0003,0.002,0.01 0.02,0.03,0.03,0.04,0.05 0.05,0.07,0.07,0.10), mean=0.0341, stddev=0.0126], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.003,0.01,0.06 0.07,0.08,0.09,0.11,0.11 0.12,0.12,0.13,0.15), mean=0.0921, stddev=0.0213]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.037037, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, params-rms=0.01521, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.487, stddev=0.000299], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.21 0.21,0.22,0.24,0.26,0.27 0.28,0.29,0.30,0.32), mean=0.242, stddev=0.0236], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01041, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.21,0.21,0.23), mean=0.165, stddev=0.0207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.30,0.31 0.31,0.32,0.33,0.35,0.35 0.36,0.36,0.37,0.39), mean=0.333, stddev=0.0157], bias-{mean,stddev}=-0.03338,0.01668, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.02,0.03,0.03,0.04,0.05 0.05,0.05,0.06,0.10), mean=0.0337, stddev=0.0101], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.15,0.18 0.21,0.25,0.31,0.37,0.41 0.43,0.47,0.49,0.62), mean=0.312, stddev=0.0764], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.11), mean=0.0417, stddev=0.00662], oderiv-count=1.12211e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11108.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.02,0.03,0.03,0.04,0.05 0.05,0.05,0.06,0.10), mean=0.0332, stddev=0.0101], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.13), mean=0.0715, stddev=0.00995]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, params-rms=0.01269, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.406, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.18,0.19,0.20,0.22,0.23 0.24,0.25,0.26,0.32), mean=0.202, stddev=0.0198], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11108.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-3e-08,-3e-08,-3e-08 -2e-08,-1e-08,-3e-09,1e-08,2e-08 2e-08,3e-08,3e-08,4e-08), mean=-1.24e-09, stddev=1.6e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.43,0.43 0.44,0.45,0.46,0.48,0.49 0.50,0.51,0.51,0.53), mean=0.464, stddev=0.0205]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000163353, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02041, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.17 0.21,0.26,0.31,0.37,0.41 0.47,0.51,0.54,0.77), mean=0.314, stddev=0.0902], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,1.0,1.0 1.0,1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.08, stddev=0.0384], bias-{mean,stddev}=0.0002948,0.05348, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.006873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.02,0.04 0.07,0.09,0.11,0.13,0.14 0.14,0.15,0.15,0.21), mean=0.106, stddev=0.0289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.20 0.21,0.21,0.22,0.23,0.23 0.24,0.24,0.25,0.26), mean=0.22, stddev=0.0113], bias-{mean,stddev}=-0.04495,0.03731, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.66e+05, self-repaired-proportion=0.0374477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.001,0.002,0.003 0.004,0.006,0.01,0.03,0.04 0.05,0.07,0.08,0.12), mean=0.0175, stddev=0.0165], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.07,0.09,0.18,0.34,0.45 0.63,0.75,0.77,0.83), mean=0.23, stddev=0.17], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0255, stddev=0.00632], oderiv-count=1.11347e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11108.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.001,0.002,0.003 0.004,0.006,0.01,0.02,0.04 0.05,0.07,0.08,0.12), mean=0.017, stddev=0.0163], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.10), mean=0.0371, stddev=0.0139]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000163353, l2-regularize=0.008, max-change=0.75, params-rms=0.00856, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27), mean=0.274, stddev=0.000122], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.10,0.11,0.15,0.21 0.24,0.26,0.27,0.27), mean=0.129, stddev=0.0464], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11108.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-2e-08,-2e-08,-2e-08 -1e-08,-7e-09,-1e-10,9e-09,1e-08 2e-08,2e-08,3e-08,4e-08), mean=5.31e-10, stddev=1.09e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.20,0.21,0.22,0.23,0.23 0.24,0.24,0.24,0.25), mean=0.216, stddev=0.0118]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000816767, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03472, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.10 0.18,0.32,0.53,0.69,0.78 0.86,0.92,0.95,1.3), mean=0.51, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,1.9,1.9,1.9 1.9,2.0,2.0,2.0), mean=1.84, stddev=0.0805], bias-{mean,stddev}=5.997e-09,0.05774, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-09,3e-05,0.0002 0.0003,0.0004,0.0008,0.002,0.002 0.003,0.004,0.004,0.04), mean=0.00106, stddev=0.00116], oderiv-count=1.07885e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/78.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/79.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.95795 tdnnf2.linear:1.71158 tdnnf2.affine:1.70305 tdnnf3.linear:1.25416 tdnnf3.affine:1.40543 tdnnf4.linear:1.18319 tdnnf4.affine:1.32813 tdnnf5.linear:0.934045 tdnnf5.affine:1.0299 tdnnf6.linear:1.18829 tdnnf6.affine:1.35366 tdnnf7.linear:1.11766 tdnnf7.affine:1.30819 tdnnf8.linear:1.09414 tdnnf8.affine:1.27261 tdnnf9.linear:1.07982 tdnnf9.affine:1.23944 tdnnf10.linear:1.06037 tdnnf10.affine:1.22544 tdnnf11.linear:1.04339 tdnnf11.affine:1.23305 tdnnf12.linear:1.0358 tdnnf12.affine:1.31856 tdnnf13.linear:1.12655 tdnnf13.affine:1.4432 prefinal-l:1.4958 prefinal-chain.affine:1.57974 prefinal-chain.linear:1.20206 output.affine:1.1915 prefinal-xent.affine:0.862729 prefinal-xent.linear:0.508904 output-xent.affine:0.98351 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:10.4438 tdnnf2.linear:6.86892 tdnnf2.affine:5.74939 tdnnf3.linear:4.97267 tdnnf3.affine:4.68883 tdnnf4.linear:4.62046 tdnnf4.affine:4.34239 tdnnf5.linear:3.04941 tdnnf5.affine:3.1781 tdnnf6.linear:4.75878 tdnnf6.affine:4.5978 tdnnf7.linear:4.64988 tdnnf7.affine:4.61115 tdnnf8.linear:4.75074 tdnnf8.affine:4.67514 tdnnf9.linear:4.76147 tdnnf9.affine:4.59188 tdnnf10.linear:4.77519 tdnnf10.affine:4.61516 tdnnf11.linear:4.92855 tdnnf11.affine:4.71602 tdnnf12.linear:4.76451 tdnnf12.affine:4.83843 tdnnf13.linear:4.56317 tdnnf13.affine:4.67113 prefinal-l:7.78649 prefinal-chain.affine:5.46338 prefinal-chain.linear:6.49964 output.affine:17.5884 prefinal-xent.affine:3.98449 prefinal-xent.linear:4.3827 output-xent.affine:29.683 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.28203 tdnnf2.linear:0.24798 tdnnf2.affine:0.294391 tdnnf3.linear:0.250607 tdnnf3.affine:0.298065 tdnnf4.linear:0.254699 tdnnf4.affine:0.304209 tdnnf5.linear:0.303937 tdnnf5.affine:0.321822 tdnnf6.linear:0.248478 tdnnf6.affine:0.293014 tdnnf7.linear:0.239021 tdnnf7.affine:0.282406 tdnnf8.linear:0.229316 tdnnf8.affine:0.271483 tdnnf9.linear:0.225945 tdnnf9.affine:0.268942 tdnnf10.linear:0.221262 tdnnf10.affine:0.264677 tdnnf11.linear:0.211026 tdnnf11.affine:0.260835 tdnnf12.linear:0.216916 tdnnf12.affine:0.272318 tdnnf13.linear:0.246441 tdnnf13.affine:0.308759 prefinal-l:0.191278 prefinal-chain.affine:0.28822 prefinal-chain.linear:0.183954 output.affine:0.06771 prefinal-xent.affine:0.215286 prefinal-xent.linear:0.115514 output-xent.affine:0.033107 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Wed Jul 20 00:16:30 EDT 2022, elapsed time 0 seconds
