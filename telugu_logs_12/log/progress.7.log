# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/7.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/7.mdl 
# Started at Thu Jul 21 11:38:01 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/7.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.16,0.17,0.31,0.41,0.53 0.64,0.74,0.80,1.3), mean=0.316, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.51,0.52 0.55,0.58,0.69,0.88,1.0 1.1,1.2,1.3,1.3), mean=0.738, stddev=0.187], bias-{mean,stddev}=-0.0006161,0.1355, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.14e+06, self-repaired-proportion=0.65993, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.12,0.20 0.27,0.34,0.38,0.62), mean=0.0662, stddev=0.0928], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.45,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.465, stddev=0.436], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.07,0.12,0.15 0.17,0.20,0.24,0.32), mean=0.0886, stddev=0.044], oderiv-count=4.6016e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46411.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.10,0.17 0.23,0.29,0.33,0.53), mean=0.0579, stddev=0.0795], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.06,0.06 0.07,0.07,0.08,0.09), mean=0.0285, stddev=0.0259]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01698, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.77,0.77,0.77 0.77,0.77,0.77,0.77,0.77 0.77,0.77,0.77,0.77), mean=0.768, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.14,0.14,0.18,0.22,0.25 0.28,0.31,0.33,0.38), mean=0.186, stddev=0.0466], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01645, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.18,0.20,0.25,0.31,0.34 0.37,0.40,0.42,0.52), mean=0.256, stddev=0.0621], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.48,0.48 0.49,0.50,0.52,0.55,0.56 0.57,0.59,0.60,0.61), mean=0.526, stddev=0.0265], bias-{mean,stddev}=-0.02219,0.1623, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.9e+06, self-repaired-proportion=0.00903516, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.02,0.03 0.04,0.07,0.12,0.20,0.24 0.29,0.33,0.36,0.52), mean=0.136, stddev=0.0777], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.11,0.15 0.20,0.28,0.47,0.72,0.85 0.90,0.93,0.94,1.0), mean=0.496, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.03,0.03,0.06), mean=0.0138, stddev=0.00592], oderiv-count=4.65248e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45899.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.02,0.03 0.05,0.07,0.12,0.18,0.22 0.25,0.29,0.31,0.43), mean=0.128, stddev=0.0674], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.06,0.08,0.10 0.12,0.14,0.18,0.21,0.23 0.24,0.25,0.26,0.31), mean=0.176, stddev=0.0417]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.63,0.63 0.63,0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.628, stddev=0.00116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.15,0.18,0.19 0.20,0.21,0.22,0.24), mean=0.155, stddev=0.0256], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01438, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.19,0.20,0.22,0.26,0.28 0.29,0.31,0.31,0.40), mean=0.228, stddev=0.0343], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.43 0.43,0.45,0.46,0.48,0.48 0.49,0.50,0.51,0.54), mean=0.46, stddev=0.02], bias-{mean,stddev}=-0.01322,0.1632, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.14e+06, self-repaired-proportion=0.00210109, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.03,0.05 0.06,0.08,0.14,0.22,0.28 0.32,0.37,0.38,0.57), mean=0.155, stddev=0.0836], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.12,0.13,0.17 0.23,0.30,0.48,0.68,0.78 0.83,0.88,0.91,0.93), mean=0.489, stddev=0.202], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.005 0.006,0.006,0.008,0.01,0.01 0.01,0.02,0.02,0.04), mean=0.00863, stddev=0.00342], oderiv-count=4.67654e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45387.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.03,0.04,0.05 0.06,0.08,0.13,0.20,0.25 0.29,0.33,0.34,0.51), mean=0.146, stddev=0.0731], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.12,0.14 0.16,0.18,0.21,0.24,0.26 0.27,0.29,0.30,0.34), mean=0.21, stddev=0.0406]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.56,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.556, stddev=0.00131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.138, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.26,0.27,0.28,0.33), mean=0.218, stddev=0.0251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.42,0.42,0.44,0.45,0.46 0.47,0.47,0.48,0.49), mean=0.439, stddev=0.0178], bias-{mean,stddev}=-0.003671,0.1743, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.00893346, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.02,0.03,0.04 0.06,0.09,0.15,0.23,0.29 0.36,0.41,0.44,0.67), mean=0.163, stddev=0.0948], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.07,0.11,0.16 0.22,0.29,0.48,0.68,0.78 0.86,0.90,0.92,0.99), mean=0.49, stddev=0.21], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.008 0.009,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.08), mean=0.0137, stddev=0.00525], oderiv-count=1.50234e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15129.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.02,0.03,0.04 0.06,0.09,0.14,0.21,0.27 0.32,0.37,0.39,0.58), mean=0.153, stddev=0.0832], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.10,0.11,0.14 0.16,0.19,0.22,0.25,0.27 0.28,0.29,0.30,0.36), mean=0.217, stddev=0.0426]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01388, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.444, stddev=0.00142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.13 0.14,0.14,0.16,0.17,0.17 0.18,0.18,0.19,0.21), mean=0.156, stddev=0.0136], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01712, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.16,0.17,0.19,0.21,0.22 0.23,0.24,0.25,0.26), mean=0.192, stddev=0.0224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.51,0.51,0.51 0.52,0.53,0.55,0.56,0.57 0.58,0.59,0.59,0.60), mean=0.547, stddev=0.0196], bias-{mean,stddev}=-0.005199,0.1638, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.022853, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.008,0.01,0.02 0.03,0.05,0.10,0.20,0.26 0.32,0.39,0.41,0.57), mean=0.129, stddev=0.0944], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.06,0.10 0.16,0.24,0.46,0.73,0.83 0.89,0.93,0.95,1.0), mean=0.478, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.009,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.05,0.05,0.09), mean=0.0185, stddev=0.00875], oderiv-count=1.3952e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15129.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.007,0.01,0.02 0.03,0.05,0.10,0.18,0.23 0.29,0.34,0.37,0.49), mean=0.117, stddev=0.0828], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.04,0.06,0.08 0.10,0.12,0.16,0.19,0.21 0.22,0.24,0.25,0.29), mean=0.156, stddev=0.0443]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.517, stddev=0.000646], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.19), mean=0.129, stddev=0.013], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01351, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.21,0.23,0.24 0.25,0.26,0.26,0.28), mean=0.215, stddev=0.0209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.40 0.41,0.42,0.43,0.45,0.45 0.46,0.47,0.48,0.50), mean=0.432, stddev=0.0175], bias-{mean,stddev}=-0.01425,0.1597, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.73e+05, self-repaired-proportion=0.00384947, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.05 0.06,0.08,0.14,0.22,0.27 0.31,0.37,0.40,0.63), mean=0.156, stddev=0.0874], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.12,0.17 0.22,0.30,0.47,0.65,0.73 0.79,0.84,0.88,0.98), mean=0.472, stddev=0.191], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.03,0.04), mean=0.0123, stddev=0.0042], oderiv-count=1.49229e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14617.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.04 0.06,0.08,0.13,0.21,0.25 0.28,0.33,0.36,0.55), mean=0.146, stddev=0.0768], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.14 0.16,0.18,0.22,0.25,0.27 0.29,0.30,0.31,0.37), mean=0.217, stddev=0.0433]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.51, stddev=0.000546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.18), mean=0.127, stddev=0.0127], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01341, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.21,0.23,0.24 0.25,0.25,0.26,0.27), mean=0.214, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.41,0.41,0.43,0.44,0.45 0.46,0.47,0.48,0.49), mean=0.429, stddev=0.0177], bias-{mean,stddev}=-0.006968,0.1714, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.32e+05, self-repaired-proportion=0.00105469, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.06,0.08,0.14,0.23,0.30 0.35,0.42,0.46,0.61), mean=0.162, stddev=0.0979], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.13,0.17 0.21,0.29,0.47,0.68,0.76 0.82,0.89,0.90,0.98), mean=0.48, stddev=0.204], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0123, stddev=0.00462], oderiv-count=1.40608e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14105.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.04,0.04 0.06,0.08,0.13,0.21,0.27 0.32,0.38,0.42,0.53), mean=0.15, stddev=0.0862], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.14 0.16,0.18,0.22,0.25,0.27 0.29,0.30,0.31,0.33), mean=0.215, stddev=0.0445]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.51, stddev=0.000622], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.19), mean=0.127, stddev=0.0136], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01339, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.21,0.23,0.24 0.25,0.26,0.26,0.28), mean=0.213, stddev=0.0201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.40 0.41,0.41,0.43,0.44,0.45 0.46,0.47,0.47,0.48), mean=0.428, stddev=0.0174], bias-{mean,stddev}=-0.01427,0.1732, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.2e+05, self-repaired-proportion=0.00372869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.05,0.07,0.13,0.22,0.29 0.34,0.42,0.45,0.56), mean=0.155, stddev=0.0957], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.08,0.10,0.15 0.20,0.28,0.46,0.66,0.76 0.82,0.89,0.92,0.94), mean=0.473, stddev=0.207], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.03,0.03,0.05), mean=0.0125, stddev=0.00492], oderiv-count=1.31302e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13593.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.03,0.04 0.05,0.07,0.13,0.21,0.26 0.30,0.37,0.40,0.50), mean=0.144, stddev=0.0845], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.10,0.13 0.14,0.17,0.21,0.25,0.27 0.28,0.30,0.30,0.35), mean=0.207, stddev=0.0474]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.512, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.22), mean=0.127, stddev=0.0141], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01334, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.18 0.19,0.20,0.21,0.23,0.24 0.24,0.25,0.26,0.28), mean=0.213, stddev=0.0187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.39 0.40,0.41,0.43,0.44,0.45 0.47,0.47,0.47,0.49), mean=0.426, stddev=0.0198], bias-{mean,stddev}=-0.0115,0.1708, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.8e+05, self-repaired-proportion=0.00279416, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.07,0.14,0.23,0.28 0.34,0.41,0.43,0.61), mean=0.156, stddev=0.0943], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.14 0.19,0.28,0.48,0.67,0.76 0.81,0.87,0.90,0.98), mean=0.474, stddev=0.207], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.01,0.01,0.02 0.02,0.03,0.03,0.04), mean=0.012, stddev=0.00484], oderiv-count=1.32902e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13081.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.07,0.13,0.21,0.26 0.30,0.36,0.39,0.54), mean=0.145, stddev=0.0831], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.13 0.15,0.17,0.21,0.25,0.26 0.28,0.29,0.30,0.32), mean=0.206, stddev=0.0451]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.509, stddev=0.000518], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.11,0.12,0.14,0.14 0.15,0.16,0.17,0.22), mean=0.126, stddev=0.0143], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01332, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.21,0.23,0.24 0.24,0.25,0.25,0.27), mean=0.212, stddev=0.0179], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.39 0.40,0.41,0.43,0.44,0.45 0.46,0.47,0.47,0.48), mean=0.426, stddev=0.02], bias-{mean,stddev}=0.002843,0.1703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.94e+05, self-repaired-proportion=0.00637509, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.02,0.03,0.04 0.06,0.08,0.14,0.24,0.30 0.35,0.41,0.46,0.56), mean=0.163, stddev=0.0976], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.09,0.12,0.17 0.22,0.29,0.48,0.70,0.78 0.83,0.90,0.92,0.98), mean=0.492, stddev=0.211], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.03,0.06), mean=0.0117, stddev=0.0049], oderiv-count=1.21862e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12569.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.02,0.03,0.04 0.06,0.08,0.13,0.22,0.27 0.31,0.37,0.41,0.49), mean=0.151, stddev=0.0858], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.09,0.11,0.13 0.15,0.17,0.21,0.25,0.26 0.28,0.29,0.30,0.32), mean=0.207, stddev=0.0456]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.512, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.21), mean=0.127, stddev=0.0141], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01345, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.19,0.20,0.21,0.23,0.24 0.25,0.25,0.26,0.27), mean=0.214, stddev=0.0178], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.40 0.40,0.41,0.43,0.45,0.46 0.46,0.47,0.48,0.49), mean=0.43, stddev=0.0209], bias-{mean,stddev}=-0.01607,0.1746, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.28e+05, self-repaired-proportion=0.00459953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.02,0.02,0.04 0.05,0.07,0.14,0.23,0.29 0.33,0.38,0.43,0.55), mean=0.154, stddev=0.0943], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.08,0.10,0.15 0.19,0.26,0.46,0.67,0.77 0.83,0.88,0.90,0.99), mean=0.47, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.008,0.008,0.01,0.01,0.02 0.02,0.02,0.03,0.06), mean=0.0118, stddev=0.0045], oderiv-count=1.22579e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12057.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.02,0.02,0.04 0.05,0.07,0.13,0.20,0.26 0.30,0.34,0.38,0.47), mean=0.143, stddev=0.0831], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.09,0.10,0.13 0.15,0.16,0.21,0.24,0.26 0.27,0.28,0.29,0.32), mean=0.203, stddev=0.0441]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.526, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.17,0.17,0.21), mean=0.131, stddev=0.0147], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01355, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.19 0.19,0.20,0.22,0.23,0.24 0.24,0.25,0.25,0.27), mean=0.216, stddev=0.0167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.40 0.41,0.42,0.43,0.45,0.46 0.47,0.47,0.48,0.51), mean=0.433, stddev=0.0207], bias-{mean,stddev}=-0.009911,0.169, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.75e+05, self-repaired-proportion=0.00641364, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.02,0.03,0.04 0.06,0.08,0.14,0.23,0.29 0.34,0.40,0.44,0.56), mean=0.158, stddev=0.0936], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.09,0.12,0.16 0.20,0.28,0.47,0.67,0.76 0.83,0.90,0.92,0.97), mean=0.478, stddev=0.206], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.008,0.009,0.01,0.01,0.02 0.02,0.02,0.02,0.07), mean=0.0113, stddev=0.00396], oderiv-count=1.13555e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11545.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.02,0.03,0.04 0.06,0.08,0.13,0.21,0.26 0.31,0.36,0.39,0.49), mean=0.147, stddev=0.0826], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.09,0.11,0.13 0.15,0.17,0.21,0.24,0.26 0.27,0.29,0.30,0.32), mean=0.205, stddev=0.0419]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.539, stddev=0.00108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.12,0.13,0.15,0.15 0.16,0.17,0.17,0.22), mean=0.134, stddev=0.0142], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.19 0.20,0.20,0.22,0.23,0.24 0.24,0.25,0.26,0.28), mean=0.218, stddev=0.0157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.40 0.41,0.42,0.43,0.45,0.47 0.47,0.48,0.49,0.51), mean=0.436, stddev=0.0215], bias-{mean,stddev}=-0.00833,0.1678, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.7e+05, self-repaired-proportion=0.0028943, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.03,0.04,0.05 0.07,0.09,0.15,0.25,0.30 0.34,0.41,0.44,0.53), mean=0.169, stddev=0.0923], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.11,0.14,0.18 0.23,0.31,0.47,0.66,0.74 0.80,0.86,0.88,0.93), mean=0.48, stddev=0.191], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.01,0.01,0.01 0.02,0.02,0.02,0.05), mean=0.0103, stddev=0.00334], oderiv-count=1.17587e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11033.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,0.03,0.04,0.05 0.07,0.09,0.15,0.23,0.27 0.31,0.36,0.39,0.47), mean=0.159, stddev=0.0816], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.12,0.13,0.15 0.17,0.19,0.23,0.26,0.28 0.29,0.30,0.31,0.35), mean=0.224, stddev=0.0429]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, params-rms=0.01581, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.506, stddev=0.000598], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.23 0.24,0.24,0.25,0.26,0.27 0.27,0.28,0.29,0.31), mean=0.253, stddev=0.0134], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01366, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.18,0.19 0.20,0.20,0.22,0.23,0.24 0.25,0.25,0.26,0.30), mean=0.218, stddev=0.0173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.41 0.41,0.42,0.44,0.45,0.46 0.46,0.47,0.47,0.48), mean=0.437, stddev=0.0167], bias-{mean,stddev}=-0.009054,0.1688, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.04e+05, self-repaired-proportion=0.0130037, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.01,0.03,0.04 0.05,0.07,0.13,0.22,0.28 0.34,0.41,0.45,0.55), mean=0.151, stddev=0.0951], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.07,0.10,0.15 0.19,0.28,0.46,0.68,0.78 0.84,0.90,0.92,0.97), mean=0.475, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.007,0.008 0.009,0.01,0.01,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0136, stddev=0.00471], oderiv-count=1.10496e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11033.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.01,0.03,0.04 0.05,0.07,0.12,0.20,0.26 0.31,0.37,0.40,0.49), mean=0.142, stddev=0.084], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.07,0.12,0.13 0.15,0.17,0.20,0.23,0.25 0.26,0.27,0.28,0.42), mean=0.199, stddev=0.0426]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, params-rms=0.01481, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.474, stddev=0.000122], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.27,0.28,0.29), mean=0.236, stddev=0.0169], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11033.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-08,-6e-08,-4e-08,-4e-08 -3e-08,-2e-08,4e-10,2e-08,3e-08 4e-08,5e-08,6e-08,7e-08), mean=3.57e-10, stddev=2.36e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.60,0.61,0.63 0.63,0.65,0.67,0.70,0.71 0.72,0.73,0.73,0.77), mean=0.673, stddev=0.0298]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000451363, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01763, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.01,0.03,0.09 0.16,0.21,0.28,0.33,0.37 0.39,0.43,0.44,0.95), mean=0.268, stddev=0.087], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.83,0.86 0.87,0.89,0.93,0.98,1.0 1.0,1.0,1.1,1.1), mean=0.935, stddev=0.0534], bias-{mean,stddev}=0.0001221,0.05018, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.29), mean=0.177, stddev=0.0164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.33 0.34,0.34,0.35,0.36,0.37 0.38,0.39,0.39,0.41), mean=0.355, stddev=0.0138], bias-{mean,stddev}=-0.00866,0.1617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.03e+05, self-repaired-proportion=0.0243081, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,0.009,0.01,0.02 0.03,0.04,0.10,0.19,0.26 0.31,0.37,0.40,0.62), mean=0.122, stddev=0.0925], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.05,0.08,0.11 0.15,0.23,0.45,0.70,0.82 0.89,0.93,0.95,1.0), mean=0.469, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.006,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00692, stddev=0.00277], oderiv-count=1.10061e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11033.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,0.006,0.01,0.02 0.03,0.04,0.09,0.17,0.24 0.28,0.32,0.35,0.54), mean=0.111, stddev=0.0822], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.04,0.06,0.08 0.09,0.11,0.14,0.18,0.20 0.21,0.22,0.22,0.32), mean=0.143, stddev=0.0422]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000451363, l2-regularize=0.008, max-change=0.75, params-rms=0.009739, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.31 0.31,0.31,0.31,0.31,0.31 0.31,0.31,0.31,0.31), mean=0.312, stddev=0.000122], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.14,0.15,0.17,0.17 0.18,0.19,0.19,0.23), mean=0.155, stddev=0.0151], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11033.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-2e-08 -2e-08,-1e-08,9e-11,1e-08,2e-08 2e-08,2e-08,3e-08,3e-08), mean=-1.09e-09, stddev=1.34e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.32 0.33,0.34,0.35,0.36,0.37 0.38,0.38,0.39,0.40), mean=0.349, stddev=0.0166]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00225681, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.033, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.05 0.11,0.22,0.51,0.68,0.77 0.83,0.89,0.91,1.3), mean=0.47, stddev=0.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.7,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.75, stddev=0.082], bias-{mean,stddev}=7.924e-09,0.0709, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,9e-09,3e-05,0.0001 0.0002,0.0004,0.0007,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000996, stddev=0.00117], oderiv-count=1.1417e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/7.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.62189 tdnnf2.linear:3.16419 tdnnf2.affine:3.98055 tdnnf3.linear:2.95173 tdnnf3.affine:3.52304 tdnnf4.linear:2.69016 tdnnf4.affine:3.41726 tdnnf5.linear:2.13511 tdnnf5.affine:2.8289 tdnnf6.linear:2.45521 tdnnf6.affine:3.16117 tdnnf7.linear:2.35177 tdnnf7.affine:3.09737 tdnnf8.linear:2.25907 tdnnf8.affine:3.03568 tdnnf9.linear:2.1873 tdnnf9.affine:2.95411 tdnnf10.linear:2.12326 tdnnf10.affine:2.88492 tdnnf11.linear:2.06035 tdnnf11.affine:2.88725 tdnnf12.linear:2.04573 tdnnf12.affine:2.83973 tdnnf13.linear:1.97236 tdnnf13.affine:2.84598 prefinal-l:2.25675 prefinal-chain.affine:2.98716 prefinal-chain.linear:2.13306 output.affine:3.37577 prefinal-xent.affine:2.33017 prefinal-xent.linear:1.16193 output-xent.affine:2.98256 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.097 tdnnf2.linear:8.69147 tdnnf2.affine:9.91991 tdnnf3.linear:7.09937 tdnnf3.affine:9.03803 tdnnf4.linear:6.28484 tdnnf4.affine:8.97417 tdnnf5.linear:5.02352 tdnnf5.affine:8.11804 tdnnf6.linear:5.85453 tdnnf6.affine:8.61089 tdnnf7.linear:5.7655 tdnnf7.affine:8.79071 tdnnf8.linear:5.77237 tdnnf8.affine:8.83002 tdnnf9.linear:5.79763 tdnnf9.affine:8.75563 tdnnf10.linear:5.75319 tdnnf10.affine:8.73247 tdnnf11.linear:5.7939 tdnnf11.affine:8.88291 tdnnf12.linear:5.94987 tdnnf12.affine:8.8012 tdnnf13.linear:6.09297 tdnnf13.affine:8.81673 prefinal-l:8.09442 prefinal-chain.affine:8.83931 prefinal-chain.linear:7.58106 output.affine:15.2254 prefinal-xent.affine:7.68704 prefinal-xent.linear:4.98624 output-xent.affine:28.3081 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.436292 tdnnf2.linear:0.363942 tdnnf2.affine:0.357389 tdnnf3.linear:0.409398 tdnnf3.affine:0.33472 tdnnf4.linear:0.417962 tdnnf4.affine:0.32093 tdnnf5.linear:0.406847 tdnnf5.affine:0.286262 tdnnf6.linear:0.407873 tdnnf6.affine:0.310098 tdnnf7.linear:0.395905 tdnnf7.affine:0.296042 tdnnf8.linear:0.381149 tdnnf8.affine:0.288745 tdnnf9.linear:0.368124 tdnnf9.affine:0.283649 tdnnf10.linear:0.359748 tdnnf10.affine:0.27732 tdnnf11.linear:0.348256 tdnnf11.affine:0.273122 tdnnf12.linear:0.336323 tdnnf12.affine:0.271968 tdnnf13.linear:0.317774 tdnnf13.affine:0.272834 prefinal-l:0.274868 prefinal-chain.affine:0.285046 prefinal-chain.linear:0.278265 output.affine:0.226474 prefinal-xent.affine:0.246318 prefinal-xent.linear:0.230698 output-xent.affine:0.105949 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 21 11:38:02 EDT 2022, elapsed time 1 seconds
