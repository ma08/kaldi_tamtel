# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/2.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
# Started at Thu Jul 21 11:30:15 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.03257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.41,0.42 0.43,0.44,0.47,0.51,0.54 0.59,0.65,0.67,0.80), mean=0.48, stddev=0.0527], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.95 0.96,0.98,1.0,1.1,1.2 1.2,1.3,1.3,1.5), mean=1.04, stddev=0.0914], bias-{mean,stddev}=-0.00787,0.4244, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.17e+06, self-repaired-proportion=0.81509, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.41,0.63 0.83,1.0,1.1,1.8), mean=0.196, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.44,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.487, stddev=0.465], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.09,0.11,0.13 0.15,0.17,0.18,0.36), mean=0.0901, stddev=0.0309], oderiv-count=4.71622e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47897.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.36,0.54 0.71,0.88,0.97,1.5), mean=0.169, stddev=0.249], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.07,0.08 0.09,0.10,0.10,0.14), mean=0.036, stddev=0.0342]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.81,0.81 0.81,0.82,0.82,0.82,0.82 0.82,0.83,0.83,0.83), mean=0.819, stddev=0.0035], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.15 0.16,0.17,0.20,0.23,0.25 0.27,0.29,0.30,0.34), mean=0.202, stddev=0.0362], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.02916, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.44,0.46,0.49,0.50 0.52,0.54,0.55,0.62), mean=0.466, stddev=0.0311], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.89,0.89 0.90,0.91,0.93,0.95,0.96 0.97,0.98,0.99,1.0), mean=0.933, stddev=0.0231], bias-{mean,stddev}=-0.003776,0.4178, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.1e+06, self-repaired-proportion=0.0717533, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0009,0.004,0.02 0.04,0.08,0.22,0.50,0.65 0.78,0.92,1.1,1.9), mean=0.292, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.005,0.02,0.07 0.12,0.21,0.50,0.79,0.89 0.93,0.96,0.98,1.0), mean=0.499, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.005,0.006,0.008,0.02,0.02 0.03,0.05,0.06,0.06), mean=0.0115, stddev=0.0092], oderiv-count=4.45485e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47385.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0008,0.004,0.02 0.04,0.07,0.20,0.44,0.57 0.68,0.80,0.97,1.6), mean=0.259, stddev=0.219], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.04,0.10 0.15,0.20,0.29,0.38,0.42 0.45,0.50,0.54,0.60), mean=0.288, stddev=0.108]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01576, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71,0.71 0.72,0.72,0.72,0.72), mean=0.713, stddev=0.00106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.27), mean=0.177, stddev=0.0202], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0286, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.46,0.48,0.49 0.50,0.51,0.51,0.54), mean=0.457, stddev=0.0238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.87,0.88 0.89,0.90,0.91,0.93,0.94 0.95,0.95,0.97,1.0), mean=0.915, stddev=0.0221], bias-{mean,stddev}=-0.006182,0.4284, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.17e+06, self-repaired-proportion=0.0238159, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.02,0.03,0.05 0.08,0.12,0.28,0.53,0.71 0.83,0.99,1.1,1.7), mean=0.339, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.07,0.11 0.16,0.24,0.50,0.74,0.84 0.89,0.93,0.95,0.98), mean=0.496, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.008,0.01 0.01,0.02,0.02,0.07), mean=0.00638, stddev=0.0044], oderiv-count=4.32518e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46873.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.02,0.03,0.05 0.07,0.11,0.25,0.46,0.62 0.73,0.86,0.90,1.5), mean=0.296, stddev=0.217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.11,0.15,0.19 0.22,0.27,0.38,0.47,0.51 0.55,0.59,0.60,0.67), mean=0.371, stddev=0.112]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01469, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.66,0.66,0.66 0.66,0.66,0.66,0.67,0.67 0.67,0.67,0.67,0.67), mean=0.665, stddev=0.00116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.14 0.15,0.15,0.16,0.18,0.19 0.19,0.20,0.21,0.26), mean=0.165, stddev=0.015], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.02836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.42,0.43,0.45,0.47,0.48 0.49,0.50,0.51,0.53), mean=0.453, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.87 0.88,0.89,0.91,0.93,0.93 0.94,0.95,0.95,0.97), mean=0.907, stddev=0.0217], bias-{mean,stddev}=0.005224,0.4686, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.0215288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.03,0.04,0.06 0.09,0.14,0.31,0.56,0.77 0.96,1.1,1.2,2.0), mean=0.375, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.04,0.06,0.11 0.17,0.26,0.50,0.74,0.83 0.89,0.94,0.94,1.0), mean=0.499, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.006,0.008,0.01,0.01 0.02,0.02,0.02,0.09), mean=0.00928, stddev=0.00704], oderiv-count=1.49043e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15624.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.02,0.03,0.05 0.08,0.12,0.27,0.49,0.67 0.84,0.94,1.1,1.7), mean=0.326, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.14,0.17,0.21 0.25,0.30,0.41,0.51,0.56 0.60,0.64,0.66,0.73), mean=0.408, stddev=0.119]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58,0.58 0.58,0.59,0.59,0.59), mean=0.582, stddev=0.00166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.19,0.21,0.22,0.22 0.23,0.24,0.24,0.25), mean=0.205, stddev=0.0139], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.0396, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.38,0.40 0.41,0.42,0.45,0.47,0.49 0.50,0.51,0.51,0.53), mean=0.447, stddev=0.0303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.2,1.3,1.3,1.3 1.3,1.3,1.3,1.3), mean=1.27, stddev=0.0283], bias-{mean,stddev}=-0.0007081,0.4468, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.87e+05, self-repaired-proportion=0.0405309, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.03,0.04 0.07,0.11,0.26,0.54,0.69 0.88,1.1,1.2,1.7), mean=0.335, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.03,0.05,0.09 0.14,0.23,0.48,0.76,0.84 0.91,0.95,0.97,1.0), mean=0.49, stddev=0.259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.006,0.008,0.01,0.02 0.02,0.02,0.04,0.10), mean=0.00998, stddev=0.00682], oderiv-count=1.54957e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15624.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.01,0.02,0.03 0.06,0.09,0.22,0.47,0.60 0.78,0.95,1.0,1.5), mean=0.291, stddev=0.239], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.08,0.11,0.15 0.19,0.25,0.36,0.46,0.51 0.56,0.59,0.61,0.68), mean=0.355, stddev=0.123]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01393, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.631, stddev=0.000573], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.17 0.18,0.18,0.19,0.20), mean=0.157, stddev=0.0119], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02834, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.45,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.453, stddev=0.021], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.87,0.88 0.88,0.89,0.91,0.92,0.93 0.94,0.95,0.95,0.98), mean=0.907, stddev=0.0205], bias-{mean,stddev}=-0.01458,0.4256, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.49e+05, self-repaired-proportion=0.0101883, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.04,0.05,0.07 0.11,0.16,0.32,0.55,0.70 0.83,1.0,1.1,1.8), mean=0.367, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.09,0.13 0.19,0.27,0.48,0.70,0.78 0.84,0.89,0.91,0.99), mean=0.486, stddev=0.221], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.03), mean=0.0074, stddev=0.00335], oderiv-count=1.50982e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15112.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.04,0.06 0.09,0.14,0.27,0.48,0.61 0.72,0.87,0.92,1.6), mean=0.319, stddev=0.218], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.16,0.19,0.23 0.27,0.32,0.44,0.54,0.58 0.62,0.66,0.67,0.77), mean=0.43, stddev=0.12]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.626, stddev=0.00111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.17 0.18,0.18,0.19,0.20), mean=0.156, stddev=0.012], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.44,0.45,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.454, stddev=0.0212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.87,0.88 0.88,0.89,0.91,0.93,0.93 0.94,0.95,0.96,0.97), mean=0.908, stddev=0.02], bias-{mean,stddev}=0.005931,0.4541, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.27e+05, self-repaired-proportion=0.0120302, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.05,0.07 0.10,0.15,0.32,0.59,0.76 0.92,1.1,1.2,1.7), mean=0.385, stddev=0.274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.10,0.14 0.18,0.27,0.49,0.72,0.81 0.87,0.92,0.95,0.99), mean=0.497, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.03), mean=0.00726, stddev=0.00353], oderiv-count=1.4295e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14600.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.06 0.09,0.13,0.28,0.51,0.67 0.82,1.0,1.1,1.5), mean=0.338, stddev=0.242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.17,0.22 0.27,0.32,0.44,0.54,0.59 0.62,0.67,0.69,0.85), mean=0.433, stddev=0.125]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01371, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.621, stddev=0.00117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.14,0.14,0.15,0.16,0.17 0.18,0.18,0.19,0.22), mean=0.155, stddev=0.0127], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02835, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.43,0.45,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.453, stddev=0.0213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.87,0.88 0.88,0.89,0.91,0.92,0.93 0.95,0.95,0.96,0.98), mean=0.907, stddev=0.0207], bias-{mean,stddev}=-0.01314,0.4609, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.73e+05, self-repaired-proportion=0.0204585, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.03,0.04,0.06 0.09,0.15,0.31,0.56,0.76 0.91,1.1,1.2,1.6), mean=0.377, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.06,0.08,0.12 0.18,0.26,0.49,0.70,0.80 0.86,0.92,0.95,0.98), mean=0.489, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.06), mean=0.00732, stddev=0.00378], oderiv-count=1.37382e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14088.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.04,0.05 0.08,0.13,0.27,0.50,0.66 0.79,1.0,1.1,1.4), mean=0.329, stddev=0.238], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.15,0.17,0.22 0.25,0.31,0.43,0.54,0.59 0.63,0.67,0.70,0.83), mean=0.427, stddev=0.129]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01367, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.618, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.18,0.18,0.19,0.20), mean=0.154, stddev=0.0125], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.45,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.453, stddev=0.0209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.86,0.87 0.88,0.89,0.91,0.93,0.93 0.94,0.95,0.96,0.99), mean=0.907, stddev=0.022], bias-{mean,stddev}=-0.006366,0.4512, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.34e+05, self-repaired-proportion=0.0115259, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.06 0.10,0.15,0.32,0.57,0.74 0.87,1.1,1.2,1.8), mean=0.378, stddev=0.263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.12 0.17,0.27,0.49,0.71,0.80 0.85,0.91,0.93,0.98), mean=0.49, stddev=0.229], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.03), mean=0.00703, stddev=0.00339], oderiv-count=1.34464e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13576.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.04,0.05 0.08,0.13,0.28,0.49,0.66 0.76,0.93,1.0,1.5), mean=0.329, stddev=0.231], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.17,0.18,0.21 0.26,0.31,0.43,0.54,0.59 0.62,0.65,0.68,0.80), mean=0.427, stddev=0.125]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01355, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61), mean=0.613, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.17,0.18,0.19,0.22), mean=0.153, stddev=0.0127], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02834, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.42 0.43,0.44,0.45,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.453, stddev=0.0203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.87,0.87 0.88,0.89,0.91,0.92,0.93 0.94,0.95,0.96,0.97), mean=0.907, stddev=0.0213], bias-{mean,stddev}=0.02938,0.4528, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.71e+05, self-repaired-proportion=0.0153276, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.04,0.05,0.07 0.10,0.15,0.33,0.62,0.79 0.91,1.1,1.3,1.6), mean=0.397, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.10,0.13 0.20,0.27,0.51,0.74,0.82 0.88,0.94,0.95,0.99), mean=0.508, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.006,0.008,0.01 0.01,0.01,0.02,0.04), mean=0.00674, stddev=0.00314], oderiv-count=1.25018e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13064.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.04,0.06 0.09,0.13,0.28,0.54,0.68 0.80,0.99,1.1,1.4), mean=0.344, stddev=0.244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.16,0.18,0.22 0.26,0.31,0.43,0.53,0.59 0.62,0.68,0.70,0.79), mean=0.426, stddev=0.126]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01346, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61), mean=0.609, stddev=0.00127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.17,0.18,0.19,0.22), mean=0.152, stddev=0.0126], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02831, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.43,0.45,0.47,0.48 0.49,0.49,0.50,0.52), mean=0.452, stddev=0.0213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.86,0.87 0.88,0.89,0.90,0.93,0.93 0.94,0.95,0.95,0.96), mean=0.906, stddev=0.0208], bias-{mean,stddev}=-0.02447,0.4642, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.67e+05, self-repaired-proportion=0.0146734, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.03,0.04,0.07 0.09,0.13,0.31,0.57,0.75 0.89,1.0,1.1,1.6), mean=0.369, stddev=0.265], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.06,0.09,0.13 0.17,0.24,0.49,0.71,0.81 0.88,0.92,0.93,0.99), mean=0.484, stddev=0.238], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.08), mean=0.00701, stddev=0.00383], oderiv-count=1.18509e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12552.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,0.02,0.04,0.06 0.08,0.12,0.27,0.51,0.66 0.78,0.90,0.99,1.4), mean=0.323, stddev=0.234], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.14,0.16,0.22 0.25,0.30,0.42,0.53,0.58 0.61,0.66,0.69,0.78), mean=0.415, stddev=0.125]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.618, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.18,0.18,0.19,0.22), mean=0.154, stddev=0.0133], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02829, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.43,0.43,0.45,0.47,0.48 0.49,0.49,0.50,0.51), mean=0.452, stddev=0.0206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.86,0.87 0.88,0.89,0.91,0.92,0.93 0.94,0.95,0.95,0.98), mean=0.905, stddev=0.0212], bias-{mean,stddev}=-0.01231,0.4513, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.92e+05, self-repaired-proportion=0.0109181, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.05,0.07 0.10,0.15,0.31,0.57,0.75 0.91,1.1,1.2,1.6), mean=0.375, stddev=0.267], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.07,0.10,0.13 0.18,0.26,0.48,0.70,0.81 0.87,0.92,0.93,0.99), mean=0.488, stddev=0.229], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.006,0.008,0.01 0.01,0.01,0.01,0.07), mean=0.00662, stddev=0.0037], oderiv-count=1.17638e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12040.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.03,0.04,0.06 0.09,0.13,0.27,0.50,0.65 0.80,0.96,1.0,1.4), mean=0.326, stddev=0.233], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.16,0.19,0.22 0.26,0.31,0.41,0.52,0.57 0.61,0.66,0.68,0.75), mean=0.413, stddev=0.12]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.624, stddev=0.00191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.13 0.14,0.14,0.15,0.17,0.17 0.18,0.18,0.19,0.21), mean=0.155, stddev=0.013], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02832, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.42 0.43,0.44,0.45,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.453, stddev=0.0208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.85,0.86,0.87 0.88,0.89,0.91,0.92,0.93 0.94,0.95,0.96,0.99), mean=0.906, stddev=0.0231], bias-{mean,stddev}=-0.005674,0.4475, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.02e+05, self-repaired-proportion=0.00963517, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.04,0.06,0.08 0.11,0.17,0.32,0.60,0.77 0.90,1.1,1.2,1.5), mean=0.387, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.07,0.10,0.15 0.20,0.28,0.48,0.72,0.80 0.86,0.91,0.94,0.97), mean=0.492, stddev=0.223], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.006,0.008,0.009 0.01,0.01,0.02,0.07), mean=0.00617, stddev=0.00367], oderiv-count=1.14195e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,0.03,0.05,0.07 0.09,0.15,0.28,0.53,0.67 0.78,0.93,1.0,1.3), mean=0.337, stddev=0.229], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.16,0.20,0.23 0.28,0.32,0.43,0.53,0.59 0.63,0.67,0.70,0.74), mean=0.428, stddev=0.12]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, params-rms=0.01806, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58), mean=0.578, stddev=0.00088], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.26 0.27,0.28,0.29,0.30,0.31 0.31,0.32,0.32,0.34), mean=0.289, stddev=0.0156], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02842, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.42 0.43,0.44,0.45,0.47,0.48 0.49,0.49,0.50,0.51), mean=0.454, stddev=0.02], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.87,0.88 0.88,0.89,0.91,0.93,0.93 0.94,0.95,0.95,0.96), mean=0.909, stddev=0.0198], bias-{mean,stddev}=-0.004899,0.4539, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.01e+05, self-repaired-proportion=0.0385742, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.01,0.03,0.05 0.07,0.11,0.26,0.53,0.72 0.89,1.1,1.3,1.6), mean=0.339, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.06,0.10 0.15,0.24,0.48,0.75,0.85 0.91,0.95,0.97,1.0), mean=0.491, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.004 0.005,0.005,0.007,0.01,0.01 0.02,0.02,0.03,0.06), mean=0.00843, stddev=0.00595], oderiv-count=1.09222e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,0.01,0.02,0.04 0.06,0.10,0.23,0.46,0.63 0.78,0.98,1.1,1.4), mean=0.296, stddev=0.24], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.08,0.14,0.17 0.20,0.24,0.36,0.46,0.50 0.54,0.57,0.59,0.69), mean=0.353, stddev=0.117]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, params-rms=0.01739, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.56,0.56 0.56,0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.557, stddev=0.000752], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.26,0.28,0.29,0.30 0.31,0.31,0.32,0.35), mean=0.278, stddev=0.0183], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,3e-09,3e-08,4e-08 5e-08,5e-08,6e-08,7e-08), mean=1.65e-09, stddev=2.67e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.65,0.65 0.67,0.68,0.71,0.74,0.76 0.77,0.78,0.79,0.82), mean=0.713, stddev=0.0347]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000483231, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01526, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.005,0.02,0.06 0.10,0.16,0.24,0.30,0.33 0.36,0.39,0.41,0.95), mean=0.227, stddev=0.0894], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.71,0.72 0.74,0.77,0.81,0.85,0.87 0.89,0.91,0.95,0.95), mean=0.809, stddev=0.0509], bias-{mean,stddev}=6.294e-05,0.0449, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02736, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.40 0.41,0.42,0.44,0.46,0.46 0.47,0.48,0.49,0.51), mean=0.437, stddev=0.022], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.83,0.84,0.84 0.85,0.86,0.87,0.89,0.90 0.91,0.92,0.93,0.95), mean=0.875, stddev=0.0203], bias-{mean,stddev}=0.001887,0.439, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.04e+05, self-repaired-proportion=0.0452399, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.02,0.04,0.05 0.07,0.11,0.25,0.50,0.71 0.85,1.1,1.2,1.8), mean=0.327, stddev=0.261], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.04,0.07,0.12 0.16,0.25,0.48,0.76,0.87 0.93,0.96,0.97,1.0), mean=0.498, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.004,0.004 0.005,0.006,0.007,0.02), mean=0.00298, stddev=0.00172], oderiv-count=1.12448e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,0.02,0.03,0.05 0.06,0.09,0.21,0.43,0.62 0.75,0.92,1.0,1.5), mean=0.282, stddev=0.228], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.12,0.14,0.18 0.20,0.23,0.33,0.42,0.46 0.50,0.53,0.55,0.65), mean=0.328, stddev=0.102]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000483231, l2-regularize=0.008, max-change=0.75, params-rms=0.01311, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.419, stddev=0.000211], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.18,0.19,0.21,0.22,0.23 0.24,0.24,0.25,0.25), mean=0.209, stddev=0.0183], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,-2e-09,1e-08,2e-08 3e-08,4e-08,4e-08,7e-08), mean=-1.28e-09, stddev=2.02e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.42,0.44,0.47,0.50,0.51 0.52,0.53,0.53,0.55), mean=0.468, stddev=0.0335]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00241616, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03084, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.06,0.13,0.45,0.66,0.75 0.82,0.87,0.91,1.2), mean=0.421, stddev=0.257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.6,1.8,1.8 1.8,1.9,1.9,2.1), mean=1.63, stddev=0.151], bias-{mean,stddev}=1.105e-08,0.07754, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-07,4e-05,0.0001 0.0002,0.0003,0.0007,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000968, stddev=0.00118], oderiv-count=1.10221e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/2.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.63841 tdnnf2.linear:3.89598 tdnnf2.affine:6.858 tdnnf3.linear:3.62253 tdnnf3.affine:6.52357 tdnnf4.linear:3.42127 tdnnf4.affine:6.65177 tdnnf5.linear:2.87887 tdnnf5.affine:6.31181 tdnnf6.linear:3.22976 tdnnf6.affine:6.26567 tdnnf7.linear:3.11043 tdnnf7.affine:6.41539 tdnnf8.linear:3.00811 tdnnf8.affine:6.44507 tdnnf9.linear:2.91042 tdnnf9.affine:6.34989 tdnnf10.linear:2.83276 tdnnf10.affine:6.34482 tdnnf11.linear:2.76098 tdnnf11.affine:6.40867 tdnnf12.linear:2.71652 tdnnf12.affine:6.29392 tdnnf13.linear:2.65379 tdnnf13.affine:6.26685 prefinal-l:2.97654 prefinal-chain.affine:6.33836 prefinal-chain.linear:2.63938 output.affine:4.06447 prefinal-xent.affine:6.17153 prefinal-xent.linear:2.2945 output-xent.affine:5.10615 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:20.5796 tdnnf2.linear:9.26954 tdnnf2.affine:20.042 tdnnf3.linear:8.07122 tdnnf3.affine:20.0575 tdnnf4.linear:7.51919 tdnnf4.affine:20.8752 tdnnf5.linear:6.58259 tdnnf5.affine:20.2486 tdnnf6.linear:7.13412 tdnnf6.affine:19.9037 tdnnf7.linear:7.08377 tdnnf7.affine:20.5555 tdnnf8.linear:7.02175 tdnnf8.affine:20.697 tdnnf9.linear:6.99664 tdnnf9.affine:20.4785 tdnnf10.linear:6.93705 tdnnf10.affine:20.5255 tdnnf11.linear:6.89103 tdnnf11.affine:20.7698 tdnnf12.linear:6.99125 tdnnf12.affine:20.4569 tdnnf13.linear:7.05863 tdnnf13.affine:20.3819 prefinal-l:9.24743 prefinal-chain.affine:20.5596 prefinal-chain.linear:8.90456 output.affine:13.1923 prefinal-xent.affine:19.8382 prefinal-xent.linear:6.70997 output-xent.affine:26.544 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.292182 tdnnf2.linear:0.397684 tdnnf2.affine:0.265323 tdnnf3.linear:0.416522 tdnnf3.affine:0.251775 tdnnf4.linear:0.412761 tdnnf4.affine:0.246439 tdnnf5.linear:0.383134 tdnnf5.affine:0.239939 tdnnf6.linear:0.405945 tdnnf6.affine:0.243635 tdnnf7.linear:0.393385 tdnnf7.affine:0.241503 tdnnf8.linear:0.383562 tdnnf8.affine:0.240816 tdnnf9.linear:0.373547 tdnnf9.affine:0.239938 tdnnf10.linear:0.36675 tdnnf10.affine:0.239092 tdnnf11.linear:0.359821 tdnnf11.affine:0.238735 tdnnf12.linear:0.351957 tdnnf12.affine:0.238126 tdnnf13.linear:0.343284 tdnnf13.affine:0.237984 prefinal-l:0.291971 prefinal-chain.affine:0.238534 prefinal-chain.linear:0.259439 output.affine:0.336493 prefinal-xent.affine:0.238584 prefinal-xent.linear:0.272519 output-xent.affine:0.203666 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 21 11:30:15 EDT 2022, elapsed time 0 seconds
