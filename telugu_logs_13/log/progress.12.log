# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/12.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/11.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/12.mdl 
# Started at Thu Jul 21 12:19:19 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/12.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02877, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.09,0.11 0.15,0.24,0.36,0.49,0.60 0.75,0.90,1.0,1.5), mean=0.381, stddev=0.191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.56,0.58 0.60,0.65,0.82,1.1,1.2 1.5,1.6,1.7,1.7), mean=0.88, stddev=0.269], bias-{mean,stddev}=-0.00393,0.03682, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.93e+06, self-repaired-proportion=0.0404152, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0003,0.0004,0.0007 0.001,0.003,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0241, stddev=0.018], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.09,0.13,0.47,0.70,0.82 0.88,0.93,0.94,0.98), mean=0.445, stddev=0.271], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.09,0.13,0.15 0.17,0.20,0.23,0.29), mean=0.0962, stddev=0.0408], oderiv-count=4.47507e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=48008.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,4e-05,0.0001,0.0004 0.001,0.003,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0242, stddev=0.0181], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0005,0.001,0.002 0.004,0.01,0.03,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0301, stddev=0.0168]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01979, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.896, stddev=0.00279], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.18,0.21,0.25,0.28 0.32,0.35,0.37,0.46), mean=0.218, stddev=0.0518], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01549, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.17,0.19,0.23,0.28,0.32 0.36,0.41,0.43,0.48), mean=0.24, stddev=0.0608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.44 0.44,0.46,0.49,0.52,0.54 0.56,0.57,0.59,0.61), mean=0.494, stddev=0.0378], bias-{mean,stddev}=-0.03173,0.05591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.12e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.09 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.17,0.21), mean=0.124, stddev=0.0209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.29,0.32,0.35 0.38,0.41,0.45,0.50,0.54 0.57,0.60,0.64,0.73), mean=0.455, stddev=0.0664], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.02,0.02,0.03), mean=0.00958, stddev=0.00267], oderiv-count=4.68141e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47496.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.18,0.21), mean=0.128, stddev=0.0228], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.18,0.21,0.24,0.26 0.28,0.30,0.31,0.37), mean=0.213, stddev=0.0363]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01456, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.65,0.65,0.65 0.66,0.66,0.66,0.66,0.66 0.66,0.66,0.66,0.67), mean=0.659, stddev=0.00284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.14,0.16,0.18,0.20 0.21,0.22,0.23,0.27), mean=0.163, stddev=0.0241], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.20,0.23,0.26 0.29,0.31,0.33,0.38), mean=0.204, stddev=0.0421], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.37 0.38,0.39,0.41,0.44,0.45 0.46,0.47,0.48,0.50), mean=0.415, stddev=0.0274], bias-{mean,stddev}=-0.01761,0.02766, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.20,0.24), mean=0.152, stddev=0.0202], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.40 0.41,0.43,0.46,0.50,0.51 0.53,0.54,0.55,0.60), mean=0.463, stddev=0.0395], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.006,0.007,0.007 0.008,0.01,0.01,0.01), mean=0.00597, stddev=0.0014], oderiv-count=4.50432e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46984.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.21,0.25), mean=0.154, stddev=0.0216], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.20 0.22,0.23,0.26,0.29,0.31 0.32,0.34,0.36,0.42), mean=0.262, stddev=0.0377]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01393, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.63,0.63 0.63,0.63,0.63,0.63,0.63 0.63,0.64,0.64,0.64), mean=0.63, stddev=0.00277], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.21,0.24), mean=0.156, stddev=0.0194], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.15,0.16,0.19,0.22,0.23 0.24,0.26,0.28,0.33), mean=0.192, stddev=0.0309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.35 0.35,0.37,0.38,0.41,0.42 0.44,0.44,0.45,0.47), mean=0.388, stddev=0.0275], bias-{mean,stddev}=-0.008449,0.02085, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.18,0.19,0.20,0.23), mean=0.155, stddev=0.0173], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.40,0.41 0.42,0.44,0.46,0.50,0.51 0.53,0.54,0.55,0.59), mean=0.467, stddev=0.0359], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00902, stddev=0.00198], oderiv-count=1.49715e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15661.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.20,0.23), mean=0.156, stddev=0.0186], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.24,0.26,0.29,0.31 0.32,0.34,0.35,0.40), mean=0.264, stddev=0.0341]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01382, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.442, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.13 0.14,0.14,0.16,0.17,0.17 0.18,0.19,0.19,0.21), mean=0.156, stddev=0.0139], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.11,0.12,0.14,0.17,0.18 0.19,0.20,0.21,0.24), mean=0.145, stddev=0.0253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.38,0.39,0.42,0.44,0.46 0.47,0.49,0.49,0.51), mean=0.415, stddev=0.0327], bias-{mean,stddev}=-0.004317,0.03422, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=4.38904e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.08,0.10,0.11,0.12 0.12,0.13,0.14,0.15), mean=0.0964, stddev=0.0166], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.27,0.29,0.33 0.35,0.38,0.44,0.51,0.54 0.57,0.60,0.62,0.69), mean=0.442, stddev=0.0756], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.04), mean=0.0142, stddev=0.00301], oderiv-count=1.48218e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15661.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.08,0.10,0.11,0.12 0.13,0.13,0.14,0.15), mean=0.0967, stddev=0.0175], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.13,0.14,0.17,0.19,0.20 0.21,0.22,0.23,0.24), mean=0.165, stddev=0.0269]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01304, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.58,0.59 0.59,0.59,0.59,0.59,0.59 0.60,0.60,0.60,0.60), mean=0.59, stddev=0.00309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.13,0.15,0.16,0.17 0.18,0.18,0.19,0.21), mean=0.147, stddev=0.0166], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01175, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.29), mean=0.186, stddev=0.0282], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.33 0.34,0.35,0.37,0.40,0.41 0.42,0.43,0.44,0.45), mean=0.375, stddev=0.0272], bias-{mean,stddev}=-0.02201,0.01879, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.13,0.14,0.15,0.16,0.17 0.18,0.18,0.19,0.22), mean=0.15, stddev=0.0164], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.42,0.45,0.48,0.50 0.52,0.54,0.54,0.58), mean=0.454, stddev=0.0361], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.0084, stddev=0.00107], oderiv-count=1.48832e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15149.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.15,0.17,0.17 0.18,0.19,0.20,0.22), mean=0.153, stddev=0.0174], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.24,0.26,0.29,0.30 0.31,0.33,0.34,0.36), mean=0.263, stddev=0.0306]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01207, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.546, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.12,0.14,0.15,0.15 0.16,0.17,0.17,0.19), mean=0.136, stddev=0.0147], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.30), mean=0.184, stddev=0.0274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.33 0.34,0.35,0.37,0.39,0.41 0.41,0.42,0.43,0.44), mean=0.372, stddev=0.0256], bias-{mean,stddev}=-0.0245,0.02046, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.46e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.16 0.17,0.18,0.19,0.21), mean=0.143, stddev=0.0168], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.38 0.39,0.41,0.44,0.48,0.50 0.52,0.54,0.55,0.59), mean=0.447, stddev=0.0421], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00885, stddev=0.00119], oderiv-count=1.37754e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14637.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.17 0.17,0.18,0.20,0.21), mean=0.145, stddev=0.0176], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.23,0.25,0.28,0.29 0.30,0.31,0.33,0.37), mean=0.254, stddev=0.0283]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.56, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.18,0.18,0.22), mean=0.139, stddev=0.0156], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.27,0.29), mean=0.184, stddev=0.0278], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.34 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.43,0.44), mean=0.372, stddev=0.0233], bias-{mean,stddev}=-0.0258,0.02344, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.24e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.10,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.138, stddev=0.0181], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.36,0.37 0.39,0.41,0.44,0.48,0.50 0.52,0.54,0.54,0.58), mean=0.444, stddev=0.0448], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00915, stddev=0.00135], oderiv-count=1.40493e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14125.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.10,0.11 0.12,0.12,0.14,0.15,0.16 0.17,0.18,0.19,0.20), mean=0.139, stddev=0.0188], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.18,0.20 0.21,0.22,0.24,0.26,0.27 0.29,0.30,0.32,0.38), mean=0.241, stddev=0.0279]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01237, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.56, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.139, stddev=0.0166], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01154, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.31), mean=0.182, stddev=0.0287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.33,0.33 0.34,0.34,0.37,0.39,0.40 0.42,0.43,0.44,0.47), mean=0.368, stddev=0.0267], bias-{mean,stddev}=-0.02468,0.02494, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.85e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.132, stddev=0.0201], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.33,0.36 0.38,0.40,0.44,0.48,0.50 0.52,0.54,0.55,0.59), mean=0.437, stddev=0.0491], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00935, stddev=0.00138], oderiv-count=1.31072e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13613.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.12,0.13,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.132, stddev=0.0205], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.27 0.28,0.29,0.31,0.33), mean=0.234, stddev=0.0261]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01268, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.57,0.57,0.57 0.57,0.57,0.57,0.57,0.58 0.58,0.58,0.58,0.58), mean=0.574, stddev=0.00109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.20,0.22), mean=0.142, stddev=0.0182], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.14 0.15,0.16,0.18,0.21,0.22 0.24,0.26,0.27,0.32), mean=0.184, stddev=0.0312], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.33 0.34,0.35,0.37,0.39,0.41 0.42,0.42,0.43,0.44), mean=0.373, stddev=0.0246], bias-{mean,stddev}=-0.02119,0.02381, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.10 0.10,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.133, stddev=0.0222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.34,0.37 0.38,0.40,0.44,0.48,0.49 0.51,0.53,0.54,0.57), mean=0.439, stddev=0.0455], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00926, stddev=0.00147], oderiv-count=1.27475e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13101.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.133, stddev=0.0224], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.23,0.26,0.27 0.28,0.30,0.31,0.39), mean=0.238, stddev=0.0265]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01308, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.59,0.59 0.59,0.59,0.59,0.59,0.59 0.59,0.60,0.60,0.60), mean=0.592, stddev=0.00154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.17 0.18,0.20,0.22,0.28), mean=0.147, stddev=0.0207], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01209, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.13 0.14,0.16,0.19,0.22,0.24 0.25,0.27,0.28,0.31), mean=0.19, stddev=0.0375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.34 0.36,0.36,0.39,0.40,0.42 0.43,0.44,0.45,0.47), mean=0.386, stddev=0.0257], bias-{mean,stddev}=-0.01947,0.02227, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.21,0.25), mean=0.142, stddev=0.0257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.31,0.33,0.36 0.37,0.40,0.43,0.47,0.49 0.50,0.52,0.53,0.61), mean=0.432, stddev=0.0466], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00884, stddev=0.00146], oderiv-count=1.1936e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12589.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.12,0.14,0.16,0.18 0.18,0.19,0.21,0.25), mean=0.142, stddev=0.0265], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.23,0.24,0.26,0.29,0.30 0.31,0.33,0.34,0.39), mean=0.262, stddev=0.0294]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01322, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.60,0.60 0.60,0.60,0.60,0.60,0.60 0.60,0.60,0.60,0.60), mean=0.598, stddev=0.00139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.18 0.19,0.21,0.23,0.29), mean=0.148, stddev=0.024], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.14,0.16,0.20,0.24,0.25 0.27,0.29,0.31,0.34), mean=0.198, stddev=0.0466], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.36 0.37,0.38,0.40,0.43,0.44 0.46,0.47,0.48,0.52), mean=0.405, stddev=0.0301], bias-{mean,stddev}=-0.01924,0.01998, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.8e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.11,0.12,0.15,0.17,0.18 0.19,0.21,0.21,0.25), mean=0.147, stddev=0.0286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.31,0.33 0.36,0.38,0.42,0.46,0.48 0.49,0.50,0.51,0.57), mean=0.418, stddev=0.0468], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00904, stddev=0.00162], oderiv-count=1.14138e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12077.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.10 0.11,0.12,0.15,0.17,0.18 0.20,0.21,0.22,0.27), mean=0.148, stddev=0.0298], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.26,0.27,0.29,0.32,0.34 0.35,0.37,0.39,0.46), mean=0.293, stddev=0.0338]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01241, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56,0.56 0.56,0.57,0.57,0.57), mean=0.562, stddev=0.00191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.17 0.19,0.21,0.23,0.29), mean=0.138, stddev=0.0257], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.16,0.19,0.24,0.27 0.29,0.32,0.34,0.37), mean=0.2, stddev=0.0501], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.39,0.41,0.44,0.45 0.46,0.47,0.47,0.50), mean=0.411, stddev=0.0271], bias-{mean,stddev}=-0.01988,0.01804, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.10,0.11,0.13,0.16,0.18 0.19,0.20,0.21,0.24), mean=0.135, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.29 0.31,0.34,0.39,0.43,0.45 0.47,0.50,0.52,0.57), mean=0.384, stddev=0.0555], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.009,0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0115, stddev=0.00206], oderiv-count=1.13875e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11565.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.11,0.13,0.17,0.18 0.19,0.20,0.21,0.26), mean=0.136, stddev=0.0319], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.27,0.30,0.34,0.36 0.38,0.40,0.43,0.50), mean=0.303, stddev=0.0417]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, params-rms=0.0219, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.69,0.70,0.70 0.70,0.70,0.70,0.70,0.70 0.70,0.71,0.71,0.71), mean=0.701, stddev=0.00247], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.32,0.35,0.37,0.39 0.41,0.43,0.44,0.49), mean=0.349, stddev=0.0303], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01402, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.13,0.14,0.21,0.27,0.30 0.33,0.38,0.41,0.57), mean=0.212, stddev=0.0729], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.41,0.43,0.45,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.448, stddev=0.0252], bias-{mean,stddev}=-0.02644,0.03366, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.08 0.09,0.10,0.13,0.17,0.18 0.19,0.20,0.20,0.23), mean=0.132, stddev=0.0358], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.25,0.28 0.31,0.35,0.40,0.44,0.46 0.48,0.50,0.51,0.53), mean=0.391, stddev=0.0602], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.006 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0113, stddev=0.004], oderiv-count=1.11533e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11565.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.09,0.10,0.13,0.17,0.18 0.19,0.20,0.21,0.25), mean=0.131, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.22,0.23 0.25,0.26,0.29,0.32,0.33 0.34,0.36,0.36,0.41), mean=0.289, stddev=0.0342]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, params-rms=0.01952, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.63,0.63), mean=0.625, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.30,0.34,0.36 0.38,0.42,0.45,0.50), mean=0.31, stddev=0.0418], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11565.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-6e-08,-5e-08 -4e-08,-2e-08,1e-09,3e-08,4e-08 5e-08,7e-08,8e-08,9e-08), mean=1.77e-09, stddev=3.02e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.88,0.89,0.91 0.94,0.96,1.0,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.02, stddev=0.0713]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.0012434, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02678, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.21 0.29,0.35,0.42,0.49,0.54 0.57,0.62,0.64,1.2), mean=0.413, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.5 1.6,1.6,1.7,1.7), mean=1.42, stddev=0.114], bias-{mean,stddev}=0.0003704,0.08534, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009954, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.04,0.05,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.24,0.24,0.28), mean=0.152, stddev=0.0471], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.32,0.33,0.34 0.35,0.36,0.37,0.40), mean=0.318, stddev=0.0201], bias-{mean,stddev}=-0.05073,0.06632, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.86e+05, self-repaired-proportion=0.00488281, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.02 0.03,0.04,0.07,0.10,0.11 0.11,0.13,0.14,0.21), mean=0.0681, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.08,0.10,0.12 0.15,0.21,0.35,0.48,0.53 0.65,0.69,0.70,0.76), mean=0.352, stddev=0.152], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.006,0.008,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00803, stddev=0.00261], oderiv-count=1.15987e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11565.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.01,0.01,0.02 0.03,0.04,0.07,0.10,0.11 0.11,0.13,0.14,0.22), mean=0.0676, stddev=0.031], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.06,0.07,0.08 0.09,0.11,0.13,0.15,0.15 0.16,0.18,0.18,0.26), mean=0.127, stddev=0.0266]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.0012434, l2-regularize=0.008, max-change=0.75, params-rms=0.01195, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38), mean=0.382, stddev=0.00061], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.17,0.21,0.24 0.28,0.31,0.33,0.37), mean=0.187, stddev=0.0417], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11565.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,9e-10,2e-08,3e-08 3e-08,4e-08,4e-08,6e-08), mean=1.4e-10, stddev=2.04e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.41 0.42,0.43,0.44,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.442, stddev=0.0208]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00621698, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03351, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.07 0.14,0.26,0.51,0.69,0.77 0.83,0.88,0.91,1.2), mean=0.484, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.6 1.6,1.7,1.8,1.9,1.9 1.9,2.0,2.0,2.0), mean=1.78, stddev=0.0982], bias-{mean,stddev}=3.702e-09,0.07744, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-07,5e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00101, stddev=0.00117], oderiv-count=1.09997e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/11.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/12.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.40564 tdnnf2.linear:5.60706 tdnnf2.affine:5.64542 tdnnf3.linear:4.26737 tdnnf3.affine:4.79002 tdnnf4.linear:4.18293 tdnnf4.affine:4.68587 tdnnf5.linear:3.25648 tdnnf5.affine:3.58983 tdnnf6.linear:3.66545 tdnnf6.affine:4.2454 tdnnf7.linear:3.36452 tdnnf7.affine:4.04336 tdnnf8.linear:3.36765 tdnnf8.affine:3.94406 tdnnf9.linear:3.29254 tdnnf9.affine:3.82759 tdnnf10.linear:3.27453 tdnnf10.affine:3.76766 tdnnf11.linear:3.1586 tdnnf11.affine:3.76329 tdnnf12.linear:3.09789 tdnnf12.affine:3.89262 tdnnf13.linear:3.12291 tdnnf13.affine:4.1933 prefinal-l:4.39006 prefinal-chain.affine:4.722 prefinal-chain.linear:4.07003 output.affine:7.20347 prefinal-xent.affine:2.53601 prefinal-xent.linear:1.69488 output-xent.affine:5.14315 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.7054 tdnnf2.linear:10.135 tdnnf2.affine:8.19508 tdnnf3.linear:7.45524 tdnnf3.affine:6.73547 tdnnf4.linear:7.13295 tdnnf4.affine:6.27196 tdnnf5.linear:5.00264 tdnnf5.affine:4.84248 tdnnf6.linear:6.6767 tdnnf6.affine:6.08562 tdnnf7.linear:6.18143 tdnnf7.affine:6.04781 tdnnf8.linear:6.33061 tdnnf8.affine:6.07184 tdnnf9.linear:6.3353 tdnnf9.affine:6.01317 tdnnf10.linear:6.49229 tdnnf10.affine:6.06657 tdnnf11.linear:6.69634 tdnnf11.affine:6.26143 tdnnf12.linear:6.7684 tdnnf12.affine:6.56422 tdnnf13.linear:6.35315 tdnnf13.affine:6.64841 prefinal-l:11.2153 prefinal-chain.affine:7.30816 prefinal-chain.linear:9.99668 output.affine:23.2174 prefinal-xent.affine:5.75464 prefinal-xent.linear:6.11756 output-xent.affine:28.7844 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.689377 tdnnf2.linear:0.552953 tdnnf2.affine:0.688758 tdnnf3.linear:0.570081 tdnnf3.affine:0.71357 tdnnf4.linear:0.589822 tdnnf4.affine:0.746626 tdnnf5.linear:0.647356 tdnnf5.affine:0.741221 tdnnf6.linear:0.551587 tdnnf6.affine:0.69885 tdnnf7.linear:0.543692 tdnnf7.affine:0.670731 tdnnf8.linear:0.531975 tdnnf8.affine:0.653235 tdnnf9.linear:0.519526 tdnnf9.affine:0.639498 tdnnf10.linear:0.50399 tdnnf10.affine:0.6233 tdnnf11.linear:0.472126 tdnnf11.affine:0.603885 tdnnf12.linear:0.456574 tdnnf12.affine:0.596945 tdnnf13.linear:0.489372 tdnnf13.affine:0.630246 prefinal-l:0.397046 prefinal-chain.affine:0.651218 prefinal-chain.linear:0.405714 output.affine:0.31149 prefinal-xent.affine:0.443599 prefinal-xent.linear:0.276852 output-xent.affine:0.178883 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 21 12:19:19 EDT 2022, elapsed time 0 seconds
