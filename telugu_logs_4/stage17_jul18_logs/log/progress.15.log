# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/15.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/14.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/15.mdl 
# Started at Mon Jul 18 19:37:43 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/15.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005757, bias-{mean,stddev}=-0.001083,0.01285
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05744, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.76,0.77,0.78 0.80,0.82,0.85,0.88,0.90 0.92,0.94,0.95,0.99), mean=0.851, stddev=0.0412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.84, stddev=0.0444], bias-{mean,stddev}=-0.01726,0.843, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.19e+06, self-repaired-proportion=0.845764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.72,1.1 1.4,1.7,1.9,3.0), mean=0.336, stddev=0.492], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.43,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.488, stddev=0.47], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.09,0.14,0.30,0.31 0.32,0.33,0.34,0.38), mean=0.189, stddev=0.1], oderiv-count=4.61229e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47038.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.71,1.1 1.4,1.7,1.9,3.0), mean=0.335, stddev=0.49], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.11,0.12 0.14,0.16,0.17,0.24), mean=0.0548, stddev=0.054]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01892, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86), mean=0.856, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.21,0.23,0.23 0.24,0.25,0.25,0.30), mean=0.214, stddev=0.0159], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05359, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.77,0.78,0.79 0.81,0.82,0.86,0.89,0.91 0.92,0.93,0.94,0.98), mean=0.857, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.71, stddev=0.0364], bias-{mean,stddev}=0.006807,0.831, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.96e+06, self-repaired-proportion=0.288374, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-09,5e-06,2e-05,9e-05 0.003,0.03,0.24,0.74,1.0 1.4,1.7,2.1,3.3), mean=0.41, stddev=0.469], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-05,0.0001,0.0007 0.02,0.10,0.51,0.90,0.97 0.99,1.0,1.0,1.0), mean=0.501, stddev=0.353], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.008 0.009,0.01,0.02,0.04,0.10 0.16,0.17,0.17,0.19), mean=0.0344, stddev=0.0435], oderiv-count=4.63302e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46526.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-15,4e-06,2e-05,9e-05 0.003,0.03,0.24,0.73,1.0 1.3,1.7,2.1,3.3), mean=0.408, stddev=0.467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,0.0008,0.002,0.004 0.03,0.13,0.33,0.49,0.56 0.64,0.73,0.79,1.1), mean=0.321, stddev=0.196]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01882, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85), mean=0.852, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.23 0.24,0.25,0.25,0.28), mean=0.212, stddev=0.0158], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0535, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.78,0.79 0.81,0.82,0.85,0.89,0.90 0.92,0.94,0.95,0.98), mean=0.855, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.9), mean=1.71, stddev=0.0397], bias-{mean,stddev}=-0.005337,0.8252, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.04e+06, self-repaired-proportion=0.0879238, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,0.0002,0.008,0.03 0.06,0.11,0.37,0.81,1.2 1.4,1.6,1.8,3.0), mean=0.492, stddev=0.438], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.001,0.02,0.06 0.10,0.19,0.50,0.79,0.89 0.95,0.98,0.99,1.0), mean=0.498, stddev=0.286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.006,0.008,0.01,0.02 0.02,0.05,0.12,0.14), mean=0.0116, stddev=0.0159], oderiv-count=4.3129e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46014.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0002,0.009,0.03 0.06,0.11,0.37,0.81,1.1 1.3,1.6,1.8,3.0), mean=0.489, stddev=0.436], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.008,0.08,0.17 0.24,0.32,0.55,0.74,0.83 0.90,0.99,1.1,1.4), mean=0.54, stddev=0.231]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85), mean=0.851, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.23 0.24,0.25,0.25,0.32), mean=0.212, stddev=0.0155], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.77,0.79 0.80,0.82,0.85,0.89,0.90 0.91,0.93,0.95,1.0), mean=0.853, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.71, stddev=0.0375], bias-{mean,stddev}=0.01162,0.8974, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.0686448, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.02,0.03,0.05 0.09,0.16,0.44,0.89,1.2 1.6,1.8,2.1,3.3), mean=0.564, stddev=0.483], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.04,0.07 0.12,0.22,0.50,0.78,0.88 0.94,0.96,0.97,1.0), mean=0.502, stddev=0.273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.007,0.007,0.01,0.01,0.02 0.02,0.04,0.05,0.23), mean=0.0134, stddev=0.0178], oderiv-count=1.60474e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15338.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.02,0.03,0.05 0.09,0.16,0.44,0.88,1.2 1.6,1.8,2.1,3.3), mean=0.561, stddev=0.481], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.13,0.18,0.25 0.33,0.43,0.66,0.86,0.97 1.0,1.2,1.3,1.7), mean=0.656, stddev=0.249]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02633, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.842, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.27,0.28,0.30,0.31,0.32 0.33,0.34,0.35,0.37), mean=0.297, stddev=0.021], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.07555, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.72,0.73,0.77 0.79,0.81,0.85,0.90,0.93 0.95,0.98,0.98,1.0), mean=0.853, stddev=0.0557], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.3,2.3 2.3,2.4,2.4,2.5,2.5 2.5,2.5,2.5,2.6), mean=2.42, stddev=0.0531], bias-{mean,stddev}=-0.0003605,0.8591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.0552676, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.03,0.07 0.10,0.18,0.43,0.90,1.2 1.5,1.9,2.1,2.9), mean=0.561, stddev=0.466], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.04,0.09 0.14,0.23,0.48,0.76,0.86 0.92,0.96,0.98,1.0), mean=0.495, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.006,0.006,0.009,0.01,0.02 0.02,0.03,0.04,0.20), mean=0.0114, stddev=0.0145], oderiv-count=1.48403e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15338.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.02,0.03,0.07 0.10,0.18,0.42,0.90,1.2 1.5,1.9,2.0,2.8), mean=0.558, stddev=0.465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.12,0.19,0.29 0.36,0.47,0.68,0.92,1.0 1.1,1.2,1.3,1.5), mean=0.692, stddev=0.262]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01866, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.844, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.23 0.24,0.24,0.25,0.28), mean=0.211, stddev=0.0152], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05344, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.76,0.77,0.79 0.80,0.82,0.86,0.88,0.90 0.92,0.93,0.95,0.96), mean=0.854, stddev=0.0383], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.71, stddev=0.0371], bias-{mean,stddev}=-0.02398,0.814, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.43e+05, self-repaired-proportion=0.0312538, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.04,0.07 0.13,0.20,0.47,0.88,1.1 1.4,1.6,1.8,3.1), mean=0.56, stddev=0.425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.05,0.10 0.16,0.25,0.48,0.73,0.83 0.89,0.93,0.95,0.99), mean=0.491, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.006,0.008,0.01,0.01 0.02,0.02,0.03,0.17), mean=0.0092, stddev=0.00818], oderiv-count=1.4073e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14826.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.03,0.04,0.07 0.13,0.20,0.47,0.87,1.1 1.4,1.6,1.8,3.1), mean=0.558, stddev=0.424], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.21,0.24,0.33 0.42,0.52,0.75,0.93,1.0 1.1,1.3,1.3,1.5), mean=0.734, stddev=0.246]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01865, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.844, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.17,0.19 0.19,0.20,0.21,0.22,0.23 0.23,0.24,0.25,0.27), mean=0.21, stddev=0.0155], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.77,0.78,0.79 0.80,0.82,0.86,0.89,0.90 0.92,0.94,0.95,0.99), mean=0.855, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.71, stddev=0.0374], bias-{mean,stddev}=0.01572,0.8677, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.15e+05, self-repaired-proportion=0.0410896, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.05,0.07 0.12,0.20,0.46,0.93,1.2 1.5,1.9,2.1,3.0), mean=0.595, stddev=0.473], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.05,0.10 0.15,0.24,0.50,0.76,0.84 0.91,0.96,0.97,0.99), mean=0.501, stddev=0.256], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.005,0.007,0.01,0.01 0.02,0.02,0.03,0.13), mean=0.00855, stddev=0.00687], oderiv-count=1.43744e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14314.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.05,0.07 0.12,0.20,0.46,0.93,1.2 1.5,1.9,2.1,3.0), mean=0.593, stddev=0.471], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.19,0.23,0.33 0.40,0.52,0.74,0.97,1.1 1.2,1.3,1.4,1.5), mean=0.746, stddev=0.259]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.844, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.23 0.23,0.24,0.25,0.28), mean=0.21, stddev=0.0156], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05345, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.76,0.78,0.79 0.81,0.82,0.85,0.89,0.90 0.92,0.94,0.95,0.99), mean=0.854, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.71, stddev=0.0369], bias-{mean,stddev}=-0.02174,0.8825, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.13e+05, self-repaired-proportion=0.0466186, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.03,0.04,0.07 0.12,0.20,0.48,0.89,1.2 1.5,1.9,2.1,2.7), mean=0.587, stddev=0.463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.05,0.08 0.14,0.25,0.48,0.74,0.84 0.90,0.96,0.97,0.99), mean=0.49, stddev=0.254], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.004,0.005,0.006,0.01,0.01 0.02,0.02,0.03,0.15), mean=0.00844, stddev=0.0115], oderiv-count=1.36742e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13802.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.04,0.07 0.12,0.20,0.47,0.88,1.2 1.5,1.9,2.1,2.7), mean=0.584, stddev=0.461], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.20,0.24,0.34 0.40,0.51,0.75,0.98,1.1 1.2,1.3,1.4,1.9), mean=0.755, stddev=0.275]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01858, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.841, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.18,0.19 0.19,0.20,0.21,0.22,0.23 0.23,0.24,0.25,0.28), mean=0.21, stddev=0.0159], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05348, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.77,0.78,0.79 0.81,0.82,0.85,0.89,0.90 0.92,0.93,0.94,0.98), mean=0.855, stddev=0.0386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.9), mean=1.71, stddev=0.0384], bias-{mean,stddev}=-0.009177,0.8625, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.7e+05, self-repaired-proportion=0.0312688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.03,0.04,0.08 0.12,0.21,0.50,0.93,1.2 1.4,1.8,2.0,3.0), mean=0.6, stddev=0.448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.04,0.05,0.10 0.16,0.25,0.50,0.74,0.83 0.89,0.94,0.96,0.99), mean=0.496, stddev=0.247], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.006,0.009,0.01 0.01,0.02,0.02,0.16), mean=0.00735, stddev=0.00826], oderiv-count=1.3168e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13290.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.03,0.04,0.08 0.12,0.21,0.50,0.92,1.2 1.4,1.8,2.0,3.0), mean=0.597, stddev=0.446], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.22,0.25,0.32 0.41,0.52,0.78,1.0,1.1 1.2,1.3,1.4,1.8), mean=0.77, stddev=0.275]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01851, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.838, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.22,0.23 0.23,0.24,0.25,0.27), mean=0.209, stddev=0.0159], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05345, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.78,0.79 0.81,0.82,0.85,0.88,0.90 0.92,0.94,0.95,0.98), mean=0.854, stddev=0.0378], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.71, stddev=0.0377], bias-{mean,stddev}=0.05844,0.8666, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.46e+05, self-repaired-proportion=0.033051, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.05,0.09 0.13,0.22,0.51,1.0,1.3 1.5,1.9,2.1,2.7), mean=0.633, stddev=0.476], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.05,0.06,0.12 0.17,0.26,0.51,0.77,0.85 0.90,0.95,0.97,0.99), mean=0.513, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.008,0.01 0.01,0.02,0.02,0.13), mean=0.00665, stddev=0.00774], oderiv-count=1.27757e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12778.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.03,0.05,0.09 0.13,0.22,0.51,1.0,1.3 1.5,1.9,2.1,2.7), mean=0.63, stddev=0.475], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.19,0.26,0.34 0.42,0.52,0.76,1.0,1.1 1.2,1.4,1.5,2.1), mean=0.775, stddev=0.285]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01853, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.839, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.23 0.23,0.24,0.25,0.28), mean=0.209, stddev=0.0155], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05335, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.78,0.79 0.80,0.82,0.85,0.89,0.90 0.92,0.93,0.94,0.99), mean=0.853, stddev=0.0393], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.71, stddev=0.0359], bias-{mean,stddev}=-0.04556,0.8882, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.76e+05, self-repaired-proportion=0.0243315, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.04,0.05,0.08 0.12,0.20,0.47,0.94,1.2 1.5,1.8,1.9,2.7), mean=0.597, stddev=0.457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.04,0.07,0.10 0.15,0.23,0.48,0.73,0.83 0.88,0.93,0.95,1.0), mean=0.485, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.02,0.12), mean=0.00629, stddev=0.00808], oderiv-count=1.16038e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12266.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.04,0.05,0.08 0.12,0.20,0.47,0.94,1.2 1.5,1.7,1.9,2.7), mean=0.593, stddev=0.455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.21,0.25,0.32 0.40,0.51,0.76,0.98,1.1 1.2,1.4,1.4,2.0), mean=0.761, stddev=0.282]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01849, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.837, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.19,0.20,0.21,0.22,0.23 0.23,0.24,0.25,0.28), mean=0.209, stddev=0.0158], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05326, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.78,0.79 0.80,0.82,0.85,0.88,0.90 0.91,0.93,0.94,0.97), mean=0.851, stddev=0.0378], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.7, stddev=0.0356], bias-{mean,stddev}=-0.0238,0.8636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.45e+05, self-repaired-proportion=0.0214988, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.06,0.09 0.14,0.22,0.49,0.95,1.3 1.5,1.8,2.0,2.8), mean=0.606, stddev=0.457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.05,0.07,0.10 0.16,0.25,0.49,0.72,0.83 0.90,0.94,0.95,0.99), mean=0.489, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.004,0.006,0.008 0.009,0.01,0.01,0.09), mean=0.0053, stddev=0.00607], oderiv-count=1.18285e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11754.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.04,0.06,0.09 0.14,0.21,0.49,0.94,1.3 1.5,1.8,2.0,2.8), mean=0.602, stddev=0.456], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.22,0.28,0.35 0.42,0.52,0.76,1.0,1.1 1.2,1.4,1.4,1.7), mean=0.769, stddev=0.271]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01833, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.83,0.83,0.83 0.83,0.83,0.83,0.83,0.83 0.83,0.83,0.83,0.83), mean=0.829, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.27), mean=0.207, stddev=0.0156], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05331, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.77,0.78,0.79 0.80,0.82,0.85,0.88,0.90 0.92,0.93,0.95,0.99), mean=0.852, stddev=0.0394], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8), mean=1.71, stddev=0.0378], bias-{mean,stddev}=-0.01197,0.8567, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.77e+05, self-repaired-proportion=0.0218314, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.05,0.06,0.09 0.15,0.23,0.51,0.98,1.3 1.5,1.8,2.0,2.5), mean=0.624, stddev=0.449], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.08,0.13 0.18,0.27,0.48,0.72,0.81 0.87,0.92,0.95,0.98), mean=0.492, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.007 0.008,0.01,0.01,0.08), mean=0.00449, stddev=0.00465], oderiv-count=1.14784e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11242.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.05,0.06,0.09 0.15,0.23,0.50,0.98,1.3 1.5,1.8,2.0,2.5), mean=0.621, stddev=0.447], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.25,0.28,0.35 0.43,0.53,0.78,1.0,1.1 1.3,1.4,1.5,1.8), mean=0.787, stddev=0.28]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.0987654, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02536, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.81,0.81 0.81,0.81,0.81,0.81,0.81 0.81,0.81,0.81,0.81), mean=0.812, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.36 0.37,0.38,0.41,0.43,0.44 0.45,0.45,0.46,0.48), mean=0.405, stddev=0.0251], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.77,0.79 0.80,0.82,0.85,0.88,0.90 0.91,0.92,0.93,0.96), mean=0.849, stddev=0.0376], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8), mean=1.7, stddev=0.0354], bias-{mean,stddev}=-0.006846,0.8734, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.56e+05, self-repaired-proportion=0.0380325, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.03,0.07 0.11,0.20,0.47,0.92,1.2 1.5,1.9,2.1,2.7), mean=0.591, stddev=0.468], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.006,0.06,0.11 0.16,0.27,0.49,0.74,0.84 0.91,0.95,0.97,1.0), mean=0.497, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.005,0.007 0.009,0.01,0.05,0.07), mean=0.00468, stddev=0.00632], oderiv-count=1.10336e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11242.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.001,0.03,0.07 0.11,0.20,0.47,0.92,1.2 1.5,1.9,2.1,2.7), mean=0.587, stddev=0.467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.02,0.19,0.28 0.35,0.47,0.70,0.91,1.0 1.2,1.3,1.4,1.7), mean=0.701, stddev=0.271]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02613, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.84), mean=0.836, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.45 0.46,0.47,0.48,0.53), mean=0.417, stddev=0.0286], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11242.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9e-08,-8e-08,-7e-08,-6e-08 -4e-08,-3e-08,-1e-09,3e-08,5e-08 6e-08,7e-08,8e-08,1e-07), mean=1.13e-10, stddev=3.51e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.70,0.71,0.73 0.75,0.78,0.83,0.90,0.93 0.98,1.0,1.1,1.2), mean=0.841, stddev=0.08]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=1.3762e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.008641, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.002,0.004,0.01 0.02,0.04,0.11,0.19,0.22 0.24,0.27,0.29,0.37), mean=0.116, stddev=0.0754], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.39 0.41,0.42,0.46,0.49,0.51 0.52,0.53,0.54,0.56), mean=0.458, stddev=0.0391], bias-{mean,stddev}=1.312e-05,0.02722, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.77,0.79 0.80,0.81,0.85,0.88,0.90 0.91,0.93,0.94,0.98), mean=0.847, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.6,1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8), mean=1.69, stddev=0.0373], bias-{mean,stddev}=-0.001486,0.8489, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.1e+05, self-repaired-proportion=0.0319672, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.03,0.05,0.09 0.13,0.23,0.48,0.91,1.2 1.5,1.8,2.0,3.0), mean=0.597, stddev=0.445], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.04,0.06,0.11 0.17,0.27,0.49,0.72,0.82 0.89,0.94,0.96,0.99), mean=0.49, stddev=0.239], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0007 0.0008,0.0009,0.001,0.002,0.002 0.003,0.004,0.004,0.03), mean=0.00155, stddev=0.00207], oderiv-count=1.09491e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11242.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,0.03,0.05,0.09 0.13,0.23,0.47,0.91,1.2 1.5,1.8,2.0,3.0), mean=0.593, stddev=0.443], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.17,0.24,0.33 0.43,0.52,0.74,0.95,1.1 1.2,1.3,1.3,1.5), mean=0.738, stddev=0.253]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.3762e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02516, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.81,0.81 0.81,0.81,0.81,0.81,0.81 0.81,0.81,0.81,0.81), mean=0.805, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.35 0.36,0.38,0.40,0.42,0.44 0.45,0.46,0.46,0.48), mean=0.402, stddev=0.0287], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11242.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-1e-07,-8e-08,-7e-08 -5e-08,-3e-08,-3e-09,3e-08,4e-08 6e-08,7e-08,9e-08,1e-07), mean=-2.32e-09, stddev=3.9e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.75,0.75,0.77 0.78,0.81,0.86,0.91,0.95 0.99,1.0,1.1,1.3), mean=0.864, stddev=0.0715]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=6.88099e-05, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.11,0.50,0.65 0.73,0.80,0.84,1.1), mean=0.235, stddev=0.248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.74,0.75,0.82 0.88,0.99,1.1,1.3,1.3 1.3,1.4,1.4,1.5), mean=1.12, stddev=0.161], bias-{mean,stddev}=1.627e-08,0.0663, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-07,4e-05,9e-05 0.0001,0.0002,0.0006,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000887, stddev=0.00117], oderiv-count=1.13011e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/14.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/15.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.350493 tdnnf2.linear:0.3994 tdnnf2.affine:0.339984 tdnnf3.linear:0.29355 tdnnf3.affine:0.315694 tdnnf4.linear:0.250543 tdnnf4.affine:0.316575 tdnnf5.linear:0.179188 tdnnf5.affine:0.29915 tdnnf6.linear:0.224088 tdnnf6.affine:0.296822 tdnnf7.linear:0.21661 tdnnf7.affine:0.304414 tdnnf8.linear:0.206063 tdnnf8.affine:0.305695 tdnnf9.linear:0.195138 tdnnf9.affine:0.301314 tdnnf10.linear:0.189046 tdnnf10.affine:0.301458 tdnnf11.linear:0.17827 tdnnf11.affine:0.304165 tdnnf12.linear:0.17411 tdnnf12.affine:0.299843 tdnnf13.linear:0.167083 tdnnf13.affine:0.299594 prefinal-l:0.189623 prefinal-chain.affine:0.299414 prefinal-chain.linear:0.133521 output.affine:0.2581 prefinal-xent.affine:0.30208 prefinal-xent.linear:0.16474 output-xent.affine:0.637323 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:38.3555 tdnnf2.linear:9.68858 tdnnf2.affine:38.2121 tdnnf3.linear:9.63411 tdnnf3.affine:38.0479 tdnnf4.linear:9.62529 tdnnf4.affine:39.6447 tdnnf5.linear:9.53099 tdnnf5.affine:38.779 tdnnf6.linear:9.55434 tdnnf6.affine:37.7858 tdnnf7.linear:9.55061 tdnnf7.affine:39.0166 tdnnf8.linear:9.54564 tdnnf8.affine:39.3306 tdnnf9.linear:9.51451 tdnnf9.affine:38.8802 tdnnf10.linear:9.47607 tdnnf10.affine:39.0045 tdnnf11.linear:9.48692 tdnnf11.affine:39.4467 tdnnf12.linear:9.46522 tdnnf12.affine:38.833 tdnnf13.linear:9.38368 tdnnf13.affine:38.6848 prefinal-l:12.9854 prefinal-chain.affine:38.9954 prefinal-chain.linear:13.3771 output.affine:7.48828 prefinal-xent.affine:38.3861 prefinal-xent.linear:12.8808 output-xent.affine:18.471 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.00906859 tdnnf2.linear:0.0409452 tdnnf2.affine:0.0088283 tdnnf3.linear:0.0302431 tdnnf3.affine:0.0082341 tdnnf4.linear:0.0258311 tdnnf4.affine:0.00792548 tdnnf5.linear:0.018647 tdnnf5.affine:0.00765663 tdnnf6.linear:0.0232694 tdnnf6.affine:0.00779689 tdnnf7.linear:0.0225048 tdnnf7.affine:0.00774407 tdnnf8.linear:0.0214196 tdnnf8.affine:0.00771455 tdnnf9.linear:0.0203507 tdnnf9.affine:0.00769213 tdnnf10.linear:0.0197931 tdnnf10.affine:0.00767124 tdnnf11.linear:0.0186431 tdnnf11.affine:0.00765334 tdnnf12.linear:0.0182486 tdnnf12.affine:0.00766375 tdnnf13.linear:0.0176646 tdnnf13.affine:0.00768655 prefinal-l:0.0144724 prefinal-chain.affine:0.007621 prefinal-chain.linear:0.00990686 output.affine:0.0351394 prefinal-xent.affine:0.0078094 prefinal-xent.linear:0.0126623 output-xent.affine:0.0353856 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Mon Jul 18 19:37:43 EDT 2022, elapsed time 0 seconds
