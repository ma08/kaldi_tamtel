# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/34.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/33.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/34.mdl 
# Started at Mon Jul 18 20:28:00 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/34.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005757, bias-{mean,stddev}=-0.001083,0.01285
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.0521, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.69,0.70,0.71 0.72,0.74,0.77,0.80,0.82 0.84,0.85,0.87,0.90), mean=0.772, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.6 1.6,1.6,1.7,1.7,1.7 1.7,1.8,1.8,1.9), mean=1.67, stddev=0.0437], bias-{mean,stddev}=-0.0158,0.7648, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.02e+06, self-repaired-proportion=0.84945, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.65,0.98 1.3,1.6,1.7,2.7), mean=0.304, stddev=0.446], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.43,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.489, stddev=0.471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.07,0.13,0.21,0.22 0.23,0.23,0.25,0.30), mean=0.139, stddev=0.0674], oderiv-count=4.73651e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46116.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.65,0.98 1.3,1.6,1.7,2.7), mean=0.303, stddev=0.445], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.09,0.11 0.13,0.14,0.15,0.22), mean=0.0462, stddev=0.0464]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01688, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76), mean=0.764, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.22,0.22,0.23,0.27), mean=0.19, stddev=0.0158], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.04857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.70,0.72 0.73,0.75,0.78,0.81,0.82 0.84,0.85,0.86,0.89), mean=0.776, stddev=0.0359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.5,1.6,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.55, stddev=0.0332], bias-{mean,stddev}=0.00406,0.7504, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.89e+06, self-repaired-proportion=0.241494, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,4e-05,9e-05,0.0002 0.008,0.04,0.23,0.67,0.94 1.2,1.5,1.9,3.0), mean=0.377, stddev=0.42], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0003,0.0006,0.002 0.03,0.11,0.50,0.88,0.96 0.99,1.0,1.0,1.0), mean=0.499, stddev=0.344], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.007,0.007,0.01,0.03,0.07 0.11,0.12,0.12,0.14), mean=0.0243, stddev=0.0301], oderiv-count=4.6903e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45604.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,3e-05,6e-05,0.0002 0.008,0.04,0.23,0.67,0.94 1.2,1.5,1.9,3.0), mean=0.376, stddev=0.419], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.004,0.007 0.06,0.15,0.33,0.47,0.53 0.59,0.65,0.69,0.92), mean=0.313, stddev=0.178]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01682, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76), mean=0.761, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.26), mean=0.19, stddev=0.015], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.04851, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.70,0.71,0.72 0.73,0.74,0.77,0.80,0.82 0.84,0.85,0.86,0.89), mean=0.775, stddev=0.0359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.55, stddev=0.0362], bias-{mean,stddev}=-0.005475,0.7481, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.79e+06, self-repaired-proportion=0.0695466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0005,0.01,0.04 0.06,0.11,0.35,0.74,1.0 1.2,1.5,1.6,2.7), mean=0.455, stddev=0.394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.02,0.07 0.12,0.20,0.51,0.78,0.88 0.93,0.97,0.98,1.0), mean=0.499, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.006,0.01,0.01 0.02,0.03,0.08,0.10), mean=0.00858, stddev=0.011], oderiv-count=4.45555e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45092.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0004,0.01,0.04 0.06,0.11,0.35,0.74,1.0 1.2,1.5,1.6,2.7), mean=0.454, stddev=0.393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.13,0.19 0.25,0.33,0.52,0.69,0.77 0.84,0.89,0.97,1.2), mean=0.516, stddev=0.204]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01681, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76,0.76 0.76,0.76,0.76,0.76), mean=0.761, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.29), mean=0.19, stddev=0.0141], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0484, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.72 0.73,0.74,0.77,0.80,0.82 0.83,0.85,0.86,0.90), mean=0.774, stddev=0.0357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.55, stddev=0.0346], bias-{mean,stddev}=0.01057,0.8157, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.0528312, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.05 0.09,0.16,0.41,0.82,1.1 1.4,1.6,1.9,3.0), mean=0.525, stddev=0.435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.04,0.08 0.13,0.23,0.50,0.78,0.87 0.92,0.95,0.97,1.0), mean=0.503, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.005 0.005,0.006,0.008,0.01,0.01 0.02,0.02,0.03,0.16), mean=0.0101, stddev=0.0124], oderiv-count=1.46765e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15030.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.03,0.05 0.09,0.16,0.41,0.82,1.1 1.4,1.6,1.9,3.0), mean=0.522, stddev=0.434], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.16,0.21,0.27 0.34,0.42,0.63,0.81,0.89 0.96,1.0,1.1,1.4), mean=0.623, stddev=0.216]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02339, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.749, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.23 0.24,0.25,0.26,0.28,0.29 0.29,0.30,0.31,0.33), mean=0.264, stddev=0.0185], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.06853, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.67,0.70 0.71,0.73,0.77,0.82,0.84 0.86,0.89,0.89,0.92), mean=0.774, stddev=0.051], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.1,2.1,2.1,2.1 2.1,2.2,2.2,2.2,2.3 2.3,2.3,2.3,2.3), mean=2.19, stddev=0.0481], bias-{mean,stddev}=-0.0003221,0.781, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.86e+05, self-repaired-proportion=0.0478292, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.04,0.07 0.10,0.17,0.41,0.83,1.1 1.4,1.7,1.9,2.6), mean=0.522, stddev=0.42], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.03,0.05,0.10 0.15,0.24,0.48,0.76,0.84 0.91,0.95,0.98,1.0), mean=0.496, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.005,0.007,0.01,0.01 0.02,0.02,0.03,0.12), mean=0.00869, stddev=0.00972], oderiv-count=1.48109e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15030.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.04,0.07 0.10,0.17,0.40,0.83,1.1 1.4,1.7,1.9,2.6), mean=0.52, stddev=0.419], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.15,0.20,0.30 0.37,0.46,0.66,0.86,0.96 1.0,1.1,1.2,1.3), mean=0.657, stddev=0.229]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01664, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.753, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.22,0.22,0.24), mean=0.188, stddev=0.0135], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.72 0.73,0.75,0.78,0.80,0.82 0.83,0.85,0.86,0.88), mean=0.775, stddev=0.0351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.55, stddev=0.0337], bias-{mean,stddev}=-0.02201,0.7403, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.94e+05, self-repaired-proportion=0.0185805, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.04,0.05,0.09 0.14,0.21,0.45,0.82,1.1 1.2,1.5,1.6,2.8), mean=0.531, stddev=0.384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.07,0.11 0.17,0.26,0.48,0.72,0.81 0.87,0.91,0.94,0.99), mean=0.491, stddev=0.235], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.10), mean=0.00711, stddev=0.00531], oderiv-count=1.46182e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14518.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.04,0.05,0.09 0.14,0.21,0.44,0.82,1.1 1.2,1.5,1.6,2.8), mean=0.53, stddev=0.383], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.23,0.27,0.35 0.43,0.52,0.72,0.89,0.98 1.1,1.2,1.2,1.4), mean=0.712, stddev=0.218]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.755, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.22,0.24), mean=0.188, stddev=0.0138], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04858, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.70,0.70,0.72 0.73,0.75,0.78,0.81,0.82 0.84,0.85,0.86,0.90), mean=0.776, stddev=0.0357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.5,1.6,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.55, stddev=0.035], bias-{mean,stddev}=0.01411,0.7891, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.86e+05, self-repaired-proportion=0.0302329, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.06,0.09 0.13,0.20,0.45,0.87,1.1 1.4,1.7,1.9,2.7), mean=0.562, stddev=0.425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.05,0.06,0.12 0.16,0.26,0.50,0.74,0.83 0.90,0.94,0.96,0.99), mean=0.501, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.006,0.008,0.01 0.01,0.02,0.02,0.09), mean=0.00674, stddev=0.00417], oderiv-count=1.34944e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14006.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.06,0.08 0.13,0.20,0.44,0.86,1.1 1.4,1.7,1.9,2.7), mean=0.56, stddev=0.424], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.22,0.25,0.35 0.42,0.51,0.72,0.92,1.0 1.1,1.2,1.2,1.4), mean=0.717, stddev=0.228]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01666, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.754, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.22,0.22,0.25), mean=0.188, stddev=0.0141], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04853, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.70,0.70,0.72 0.73,0.75,0.77,0.81,0.82 0.84,0.85,0.86,0.90), mean=0.776, stddev=0.0355], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.7,1.7), mean=1.55, stddev=0.0359], bias-{mean,stddev}=-0.01997,0.8025, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.77e+05, self-repaired-proportion=0.0330121, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.05,0.08 0.12,0.20,0.45,0.83,1.1 1.4,1.7,1.9,2.5), mean=0.551, stddev=0.417], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.06,0.10 0.16,0.26,0.49,0.73,0.83 0.88,0.95,0.96,0.99), mean=0.491, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.005,0.008,0.01 0.01,0.02,0.02,0.12), mean=0.00683, stddev=0.00779], oderiv-count=1.3623e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13494.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.05,0.08 0.12,0.20,0.45,0.83,1.1 1.4,1.7,1.9,2.4), mean=0.549, stddev=0.417], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.22,0.26,0.34 0.41,0.51,0.72,0.91,1.0 1.1,1.2,1.3,1.6), mean=0.72, stddev=0.241]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.751, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.22,0.23,0.25), mean=0.187, stddev=0.0143], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.69,0.70,0.71 0.73,0.75,0.78,0.80,0.82 0.83,0.84,0.86,0.89), mean=0.776, stddev=0.0354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.6,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.55, stddev=0.035], bias-{mean,stddev}=-0.008465,0.7844, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.4e+05, self-repaired-proportion=0.0202168, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.05,0.09 0.13,0.21,0.47,0.85,1.1 1.3,1.6,1.8,2.7), mean=0.561, stddev=0.405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.05,0.06,0.12 0.17,0.27,0.50,0.73,0.82 0.87,0.93,0.94,0.99), mean=0.495, stddev=0.237], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.02,0.12), mean=0.00614, stddev=0.00594], oderiv-count=1.33005e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12982.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.05,0.09 0.13,0.21,0.47,0.86,1.1 1.3,1.6,1.8,2.7), mean=0.56, stddev=0.404], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.24,0.28,0.34 0.41,0.51,0.74,0.93,1.0 1.1,1.2,1.3,1.5), mean=0.729, stddev=0.238]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0165, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.747, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.22,0.24), mean=0.186, stddev=0.0141], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.71,0.72 0.73,0.75,0.77,0.80,0.82 0.83,0.85,0.86,0.89), mean=0.775, stddev=0.0346], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.55, stddev=0.0341], bias-{mean,stddev}=0.05317,0.7882, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.64e+05, self-repaired-proportion=0.0240133, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.06,0.10 0.14,0.23,0.48,0.93,1.2 1.4,1.7,1.9,2.5), mean=0.593, stddev=0.428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.06,0.08,0.13 0.19,0.27,0.51,0.76,0.83 0.89,0.94,0.95,0.99), mean=0.512, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.004,0.005,0.007,0.008 0.01,0.01,0.02,0.11), mean=0.00563, stddev=0.00538], oderiv-count=1.32301e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12470.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.06,0.10 0.14,0.22,0.48,0.92,1.2 1.4,1.7,1.9,2.5), mean=0.592, stddev=0.427], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.20,0.29,0.35 0.43,0.53,0.74,0.95,1.1 1.1,1.3,1.3,1.8), mean=0.744, stddev=0.249]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01651, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.747, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.22,0.22,0.25), mean=0.186, stddev=0.0138], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0484, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.71 0.73,0.74,0.77,0.80,0.82 0.83,0.85,0.85,0.90), mean=0.774, stddev=0.0363], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.0333], bias-{mean,stddev}=-0.04131,0.8079, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.93e+05, self-repaired-proportion=0.0194695, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.04,0.06,0.09 0.13,0.20,0.45,0.87,1.1 1.4,1.6,1.7,2.5), mean=0.561, stddev=0.411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.08,0.12 0.17,0.24,0.49,0.72,0.82 0.87,0.92,0.94,0.99), mean=0.487, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.003,0.005,0.007,0.008 0.01,0.01,0.01,0.10), mean=0.0056, stddev=0.00644], oderiv-count=1.23245e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11958.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.04,0.06,0.09 0.13,0.20,0.45,0.87,1.1 1.4,1.6,1.7,2.5), mean=0.56, stddev=0.411], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.24,0.29,0.34 0.41,0.51,0.74,0.94,1.0 1.1,1.2,1.3,1.8), mean=0.734, stddev=0.246]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01644, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.74,0.74 0.74,0.74,0.74,0.74,0.74 0.74,0.74,0.74,0.74), mean=0.744, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.16 0.17,0.17,0.19,0.20,0.20 0.21,0.22,0.22,0.25), mean=0.185, stddev=0.0141], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04828, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.69,0.70,0.72 0.73,0.74,0.77,0.80,0.82 0.83,0.84,0.85,0.88), mean=0.772, stddev=0.0348], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.54, stddev=0.0324], bias-{mean,stddev}=-0.02123,0.7854, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.08e+05, self-repaired-proportion=0.0164035, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.06,0.07,0.09 0.14,0.22,0.47,0.89,1.2 1.4,1.7,1.8,2.5), mean=0.569, stddev=0.412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.08,0.13 0.17,0.26,0.48,0.71,0.82 0.88,0.92,0.93,0.98), mean=0.49, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.004,0.006,0.007 0.008,0.01,0.01,0.08), mean=0.00502, stddev=0.00497], oderiv-count=1.15622e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11446.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.06,0.07,0.09 0.14,0.22,0.46,0.88,1.2 1.4,1.7,1.8,2.5), mean=0.568, stddev=0.411], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.27,0.31,0.37 0.44,0.53,0.73,0.94,1.0 1.1,1.2,1.3,1.5), mean=0.737, stddev=0.235]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.74,0.74 0.74,0.74,0.74,0.74,0.74 0.74,0.74,0.74,0.74), mean=0.737, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.16 0.17,0.17,0.18,0.20,0.20 0.21,0.21,0.22,0.24), mean=0.184, stddev=0.0139], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04833, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.69,0.70,0.71 0.73,0.74,0.77,0.80,0.82 0.83,0.85,0.86,0.91), mean=0.772, stddev=0.0365], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.55, stddev=0.0349], bias-{mean,stddev}=-0.01009,0.779, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.56e+05, self-repaired-proportion=0.0126691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.07,0.11 0.16,0.24,0.48,0.92,1.2 1.4,1.6,1.8,2.3), mean=0.589, stddev=0.404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.06,0.10,0.14 0.19,0.28,0.49,0.71,0.80 0.85,0.90,0.93,0.98), mean=0.493, stddev=0.222], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.007,0.009,0.01,0.08), mean=0.0045, stddev=0.00422], oderiv-count=1.20115e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.05,0.07,0.11 0.16,0.24,0.48,0.92,1.2 1.4,1.6,1.8,2.3), mean=0.587, stddev=0.403], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.28,0.30,0.38 0.45,0.54,0.75,0.97,1.1 1.2,1.3,1.3,1.5), mean=0.755, stddev=0.24]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, params-rms=0.02205, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71), mean=0.705, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.32,0.33,0.35,0.37,0.38 0.39,0.39,0.40,0.41), mean=0.352, stddev=0.0217], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.04815, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.69,0.70,0.71 0.73,0.74,0.77,0.80,0.81 0.82,0.84,0.84,0.87), mean=0.77, stddev=0.0346], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.54, stddev=0.0323], bias-{mean,stddev}=-0.005878,0.7939, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.11e+05, self-repaired-proportion=0.0283316, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0002,0.04,0.08 0.12,0.20,0.44,0.84,1.1 1.4,1.7,1.9,2.4), mean=0.547, stddev=0.421], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.07,0.11 0.17,0.26,0.49,0.73,0.83 0.90,0.94,0.96,0.99), mean=0.496, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.007 0.009,0.01,0.05,0.08), mean=0.00528, stddev=0.00689], oderiv-count=1.10899e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0003,0.04,0.08 0.12,0.20,0.44,0.85,1.1 1.4,1.7,1.9,2.4), mean=0.545, stddev=0.42], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.21,0.30 0.37,0.47,0.66,0.85,0.96 1.0,1.2,1.2,1.5), mean=0.668, stddev=0.232]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, params-rms=0.02354, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.753, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.32,0.33 0.34,0.35,0.38,0.40,0.41 0.42,0.43,0.43,0.48), mean=0.376, stddev=0.0264], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-08,-6e-08,-6e-08,-5e-08 -4e-08,-3e-08,6e-10,3e-08,4e-08 6e-08,7e-08,8e-08,1e-07), mean=1.53e-09, stddev=3.21e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.69,0.71 0.72,0.75,0.78,0.83,0.85 0.88,0.91,0.97,1.0), mean=0.787, stddev=0.055]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=6.12109e-06, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.006,0.02 0.03,0.06,0.15,0.22,0.25 0.28,0.31,0.32,0.42), mean=0.145, stddev=0.0812], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.48 0.50,0.52,0.55,0.59,0.60 0.62,0.63,0.64,0.67), mean=0.551, stddev=0.0424], bias-{mean,stddev}=2.034e-05,0.03224, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.04781, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.68,0.69,0.71 0.72,0.73,0.76,0.80,0.81 0.82,0.84,0.85,0.89), mean=0.764, stddev=0.0364], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.53, stddev=0.0339], bias-{mean,stddev}=-6.146e-05,0.7714, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.03e+05, self-repaired-proportion=0.0240978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.04,0.06,0.10 0.14,0.22,0.44,0.83,1.1 1.3,1.7,1.8,2.7), mean=0.552, stddev=0.399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.08,0.13 0.18,0.27,0.48,0.71,0.82 0.89,0.93,0.95,0.99), mean=0.492, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0008,0.0008,0.0009 0.001,0.001,0.001,0.002,0.002 0.003,0.003,0.004,0.03), mean=0.00176, stddev=0.00219], oderiv-count=1.0624e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.04,0.06,0.10 0.14,0.22,0.44,0.83,1.1 1.3,1.6,1.8,2.7), mean=0.551, stddev=0.398], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.21,0.27,0.36 0.44,0.51,0.70,0.88,0.98 1.1,1.1,1.1,1.3), mean=0.698, stddev=0.213]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=6.12109e-06, l2-regularize=0.008, max-change=0.75, params-rms=0.022, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.70,0.70,0.70 0.70,0.70,0.70,0.70,0.70 0.70,0.70,0.70,0.70), mean=0.704, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.29,0.31 0.31,0.33,0.35,0.37,0.39 0.40,0.40,0.41,0.42), mean=0.351, stddev=0.027], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10934.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9e-08,-9e-08,-7e-08,-6e-08 -4e-08,-3e-08,3e-09,3e-08,4e-08 5e-08,6e-08,8e-08,8e-08), mean=1.16e-09, stddev=3.44e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.64,0.67 0.69,0.71,0.76,0.81,0.83 0.85,0.87,0.88,1.0), mean=0.76, stddev=0.059]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=3.06055e-05, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02516, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.19,0.59,0.71 0.79,0.86,0.90,1.2), mean=0.298, stddev=0.271], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.87,0.93 1.0,1.2,1.3,1.5,1.6 1.6,1.6,1.6,1.7), mean=1.32, stddev=0.203], bias-{mean,stddev}=1.851e-08,0.07306, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-07,3e-05,9e-05 0.0002,0.0002,0.0006,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000922, stddev=0.00118], oderiv-count=1.11648e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/33.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/34.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.140659 tdnnf2.linear:0.150304 tdnnf2.affine:0.133655 tdnnf3.linear:0.114292 tdnnf3.affine:0.12447 tdnnf4.linear:0.0953024 tdnnf4.affine:0.12546 tdnnf5.linear:0.068259 tdnnf5.affine:0.119553 tdnnf6.linear:0.0869319 tdnnf6.affine:0.118659 tdnnf7.linear:0.0862189 tdnnf7.affine:0.121946 tdnnf8.linear:0.0839568 tdnnf8.affine:0.122456 tdnnf9.linear:0.0812333 tdnnf9.affine:0.120907 tdnnf10.linear:0.0795474 tdnnf10.affine:0.120969 tdnnf11.linear:0.076588 tdnnf11.affine:0.122176 tdnnf12.linear:0.0753427 tdnnf12.affine:0.120461 tdnnf13.linear:0.0735995 tdnnf13.affine:0.120052 prefinal-l:0.0809267 prefinal-chain.affine:0.121151 prefinal-chain.linear:0.0577132 output.affine:0.091485 prefinal-xent.affine:0.119536 prefinal-xent.linear:0.0568321 output-xent.affine:0.153377 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:34.795 tdnnf2.linear:8.64339 tdnnf2.affine:34.5703 tdnnf3.linear:8.61161 tdnnf3.affine:34.4974 tdnnf4.linear:8.60588 tdnnf4.affine:35.9942 tdnnf5.linear:8.4684 tdnnf5.affine:35.2154 tdnnf6.linear:8.51919 tdnnf6.affine:34.3201 tdnnf7.linear:8.53829 tdnnf7.affine:35.4456 tdnnf8.linear:8.53096 tdnnf8.affine:35.74 tdnnf9.linear:8.49849 tdnnf9.affine:35.3173 tdnnf10.linear:8.44868 tdnnf10.affine:35.4262 tdnnf11.linear:8.45153 tdnnf11.affine:35.8344 tdnnf12.linear:8.41782 tdnnf12.affine:35.2613 tdnnf13.linear:8.34354 tdnnf13.affine:35.1242 prefinal-l:11.2878 prefinal-chain.affine:35.3991 prefinal-chain.linear:12.0513 output.affine:9.00344 prefinal-xent.affine:34.7645 prefinal-xent.linear:11.2654 output-xent.affine:21.7411 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.00402905 tdnnf2.linear:0.0173341 tdnnf2.affine:0.00385284 tdnnf3.linear:0.0132276 tdnnf3.affine:0.00359598 tdnnf4.linear:0.0110365 tdnnf4.affine:0.00347399 tdnnf5.linear:0.00803171 tdnnf5.affine:0.00338367 tdnnf6.linear:0.0101689 tdnnf6.affine:0.00344602 tdnnf7.linear:0.0100639 tdnnf7.affine:0.00342903 tdnnf8.linear:0.00980862 tdnnf8.affine:0.00341502 tdnnf9.linear:0.00952683 tdnnf9.affine:0.00341218 tdnnf10.linear:0.00938372 tdnnf10.affine:0.00340341 tdnnf11.linear:0.00903152 tdnnf11.affine:0.00339821 tdnnf12.linear:0.00891993 tdnnf12.affine:0.00340494 tdnnf13.linear:0.00879075 tdnnf13.affine:0.00340662 prefinal-l:0.00714002 prefinal-chain.affine:0.00341109 prefinal-chain.linear:0.0047726 output.affine:0.0101978 prefinal-xent.affine:0.00342688 prefinal-xent.linear:0.00502529 output-xent.affine:0.00707294 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Mon Jul 18 20:28:00 EDT 2022, elapsed time 0 seconds
