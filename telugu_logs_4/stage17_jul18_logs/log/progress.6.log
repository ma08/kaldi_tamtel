# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/5.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl 
# Started at Mon Jul 18 17:35:50 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.0009892,0.01287
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.06238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.83,0.84,0.85 0.87,0.89,0.92,0.96,0.98 1.0,1.0,1.0,1.1), mean=0.924, stddev=0.0441], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,2.0,2.0,2.0,2.1 2.1,2.1,2.1,2.1), mean=2, stddev=0.046], bias-{mean,stddev}=-0.01903,0.915, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.08e+06, self-repaired-proportion=0.844992, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.78,1.2 1.5,1.9,2.1,3.2), mean=0.366, stddev=0.535], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.42,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.488, stddev=0.471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.12,0.27,0.28 0.29,0.29,0.30,0.33), mean=0.165, stddev=0.094], oderiv-count=4.72704e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47651.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.77,1.2 1.5,1.9,2.1,3.2), mean=0.363, stddev=0.532], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.11,0.13 0.16,0.18,0.19,0.27), mean=0.0592, stddev=0.0587]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0203, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.919, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.26,0.26,0.27,0.32), mean=0.229, stddev=0.017], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05807, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.83,0.84,0.86 0.87,0.89,0.93,0.96,0.98 1.0,1.0,1.0,1.1), mean=0.928, stddev=0.0418], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.86, stddev=0.0394], bias-{mean,stddev}=0.007035,0.9073, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.01e+06, self-repaired-proportion=0.273542, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,1e-05,3e-05,0.0001 0.004,0.04,0.28,0.81,1.2 1.5,1.8,2.3,3.6), mean=0.454, stddev=0.513], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,7e-05,0.0002,0.001 0.02,0.10,0.51,0.88,0.97 0.99,1.0,1.0,1.0), mean=0.5, stddev=0.348], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.007,0.008,0.01,0.03,0.08 0.14,0.15,0.15,0.16), mean=0.0281, stddev=0.0379], oderiv-count=4.64038e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47139.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,5e-06,3e-05,0.0001 0.004,0.04,0.28,0.81,1.2 1.5,1.8,2.2,3.6), mean=0.451, stddev=0.51], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.001,0.003,0.005 0.04,0.15,0.37,0.54,0.64 0.75,0.84,0.93,1.3), mean=0.362, stddev=0.226]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.921, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.26,0.27,0.27,0.31), mean=0.23, stddev=0.0166], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.85,0.86 0.87,0.89,0.93,0.96,0.98 1.0,1.0,1.0,1.1), mean=0.927, stddev=0.0421], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.86, stddev=0.0428], bias-{mean,stddev}=-0.00623,0.8976, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.94e+06, self-repaired-proportion=0.0824444, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0006,0.01,0.04 0.07,0.13,0.41,0.88,1.3 1.5,1.8,2.0,3.3), mean=0.546, stddev=0.478], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.02,0.06 0.11,0.20,0.50,0.78,0.87 0.94,0.98,0.99,1.0), mean=0.497, stddev=0.28], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.006,0.01,0.01 0.02,0.03,0.09,0.12), mean=0.00877, stddev=0.0123], oderiv-count=4.52832e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46627.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0005,0.01,0.04 0.07,0.13,0.41,0.88,1.2 1.5,1.8,2.0,3.3), mean=0.542, stddev=0.475], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.09,0.19 0.26,0.36,0.61,0.83,0.94 1.0,1.1,1.2,1.6), mean=0.606, stddev=0.263]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0204, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.923, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.26,0.27,0.27,0.35), mean=0.23, stddev=0.0168], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05787, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.84,0.86 0.87,0.89,0.92,0.96,0.98 0.99,1.0,1.0,1.1), mean=0.925, stddev=0.0419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.85, stddev=0.0407], bias-{mean,stddev}=0.01213,0.973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.0569343, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.06 0.10,0.18,0.50,0.99,1.3 1.7,1.9,2.3,3.6), mean=0.63, stddev=0.526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.02,0.04,0.07 0.13,0.23,0.50,0.77,0.87 0.93,0.96,0.97,1.0), mean=0.501, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.005,0.007,0.01,0.01 0.02,0.03,0.04,0.18), mean=0.01, stddev=0.0137], oderiv-count=1.49587e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15542.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.02,0.03,0.06 0.10,0.18,0.49,0.98,1.3 1.7,1.9,2.2,3.6), mean=0.626, stddev=0.523], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.13,0.19,0.28 0.36,0.47,0.75,0.98,1.1 1.2,1.3,1.4,2.0), mean=0.742, stddev=0.288]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02874, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.92, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.30,0.31,0.32,0.34,0.35 0.36,0.37,0.38,0.40), mean=0.324, stddev=0.0228], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.0819, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.79,0.80,0.84 0.85,0.87,0.92,0.97,1.0 1.0,1.1,1.1,1.1), mean=0.925, stddev=0.0602], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.5,2.5,2.5,2.5 2.5,2.6,2.6,2.7,2.7 2.7,2.7,2.7,2.8), mean=2.62, stddev=0.0576], bias-{mean,stddev}=-0.0008011,0.9312, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.0447325, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.04,0.08 0.12,0.20,0.48,1.0,1.3 1.7,2.0,2.2,3.1), mean=0.626, stddev=0.508], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.03,0.05,0.10 0.14,0.24,0.48,0.75,0.85 0.91,0.95,0.98,1.0), mean=0.494, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.006,0.009,0.01 0.02,0.02,0.04,0.19), mean=0.00831, stddev=0.011], oderiv-count=1.5168e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15542.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.04,0.08 0.12,0.20,0.48,0.99,1.3 1.6,2.0,2.2,3.1), mean=0.622, stddev=0.505], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.11,0.22,0.31 0.41,0.51,0.77,1.0,1.2 1.3,1.4,1.5,1.8), mean=0.78, stddev=0.301]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.919, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.26,0.26,0.27,0.30), mean=0.229, stddev=0.0165], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05793, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.84,0.86 0.87,0.89,0.93,0.96,0.98 0.99,1.0,1.0,1.0), mean=0.926, stddev=0.0413], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.85, stddev=0.0401], bias-{mean,stddev}=-0.02629,0.882, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.74e+05, self-repaired-proportion=0.0286553, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.03,0.05,0.09 0.15,0.23,0.53,0.97,1.2 1.5,1.8,2.0,3.4), mean=0.622, stddev=0.463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.05,0.10 0.16,0.25,0.48,0.73,0.83 0.88,0.92,0.94,0.99), mean=0.491, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.005,0.008,0.01 0.01,0.02,0.02,0.12), mean=0.00656, stddev=0.00563], oderiv-count=1.53766e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15030.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.05,0.09 0.14,0.23,0.53,0.96,1.2 1.5,1.8,1.9,3.4), mean=0.618, stddev=0.46], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.20,0.25,0.36 0.46,0.58,0.83,1.0,1.2 1.3,1.5,1.5,1.8), mean=0.821, stddev=0.284]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.918, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.26,0.27,0.30), mean=0.229, stddev=0.017], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.83,0.84,0.86 0.87,0.89,0.93,0.96,0.98 1.0,1.0,1.0,1.1), mean=0.927, stddev=0.042], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0), mean=1.86, stddev=0.0405], bias-{mean,stddev}=0.0168,0.9404, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.04e+05, self-repaired-proportion=0.0376018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.03,0.06,0.08 0.13,0.23,0.51,1.0,1.4 1.6,2.1,2.3,3.3), mean=0.66, stddev=0.514], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.06,0.10 0.15,0.25,0.50,0.75,0.84 0.90,0.95,0.97,0.99), mean=0.5, stddev=0.251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.02,0.02,0.10), mean=0.00601, stddev=0.00515], oderiv-count=1.39821e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14518.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.03,0.05,0.08 0.13,0.23,0.51,1.0,1.3 1.6,2.0,2.3,3.2), mean=0.655, stddev=0.511], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.21,0.25,0.35 0.45,0.58,0.83,1.1,1.2 1.3,1.5,1.5,1.7), mean=0.838, stddev=0.298]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.918, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.26,0.26,0.27,0.31), mean=0.229, stddev=0.017], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05794, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.83,0.84,0.86 0.88,0.89,0.92,0.96,0.98 1.0,1.0,1.0,1.1), mean=0.926, stddev=0.042], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0), mean=1.85, stddev=0.04], bias-{mean,stddev}=-0.02379,0.9563, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.43e+05, self-repaired-proportion=0.0361365, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.05,0.08 0.14,0.23,0.54,1.0,1.4 1.7,2.1,2.3,2.9), mean=0.657, stddev=0.505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.03,0.05,0.09 0.15,0.25,0.49,0.73,0.83 0.89,0.95,0.97,0.99), mean=0.49, stddev=0.248], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.004,0.007,0.009 0.01,0.01,0.02,0.11), mean=0.00584, stddev=0.0081], oderiv-count=1.34016e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14006.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.05,0.08 0.14,0.23,0.54,0.99,1.4 1.6,2.1,2.3,2.9), mean=0.653, stddev=0.502], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.20,0.27,0.37 0.45,0.58,0.86,1.1,1.2 1.4,1.5,1.7,2.1), mean=0.856, stddev=0.319]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02021, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91), mean=0.915, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.26,0.27,0.31), mean=0.228, stddev=0.0174], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05798, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.83,0.84,0.86 0.87,0.89,0.93,0.96,0.98 1.0,1.0,1.0,1.1), mean=0.927, stddev=0.0417], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.85, stddev=0.0416], bias-{mean,stddev}=-0.01021,0.9346, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.94e+05, self-repaired-proportion=0.0244319, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.05,0.09 0.15,0.25,0.57,1.0,1.3 1.6,2.0,2.1,3.3), mean=0.673, stddev=0.487], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.06,0.10 0.16,0.26,0.50,0.73,0.82 0.88,0.93,0.95,0.99), mean=0.496, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.008 0.01,0.01,0.02,0.12), mean=0.00507, stddev=0.00572], oderiv-count=1.28262e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13494.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.03,0.05,0.09 0.15,0.24,0.56,1.0,1.3 1.6,2.0,2.1,3.2), mean=0.668, stddev=0.485], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.19,0.27,0.35 0.47,0.59,0.87,1.1,1.3 1.4,1.5,1.6,2.1), mean=0.871, stddev=0.317]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91), mean=0.912, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.26,0.27,0.30), mean=0.227, stddev=0.0174], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05796, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.85,0.86 0.87,0.89,0.93,0.96,0.98 0.99,1.0,1.0,1.1), mean=0.926, stddev=0.0409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0), mean=1.85, stddev=0.0409], bias-{mean,stddev}=0.06296,0.939, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.73e+05, self-repaired-proportion=0.0256478, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.06,0.10 0.16,0.26,0.60,1.1,1.4 1.7,2.1,2.3,3.0), mean=0.712, stddev=0.519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.05,0.07,0.12 0.17,0.28,0.51,0.76,0.83 0.89,0.94,0.96,0.99), mean=0.512, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.007 0.008,0.01,0.01,0.11), mean=0.00451, stddev=0.00459], oderiv-count=1.22298e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12982.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.06,0.10 0.15,0.26,0.59,1.1,1.4 1.7,2.1,2.3,3.0), mean=0.706, stddev=0.516], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.22,0.28,0.39 0.47,0.59,0.87,1.1,1.3 1.4,1.6,1.7,2.5), mean=0.884, stddev=0.329]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91), mean=0.913, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.27,0.27,0.31), mean=0.228, stddev=0.0168], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.84,0.86 0.87,0.89,0.92,0.96,0.98 0.99,1.0,1.0,1.1), mean=0.925, stddev=0.0425], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.85, stddev=0.0388], bias-{mean,stddev}=-0.04984,0.9624, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.86e+05, self-repaired-proportion=0.0242016, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.06,0.10 0.14,0.24,0.54,1.1,1.4 1.7,1.9,2.1,2.9), mean=0.672, stddev=0.498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.07,0.11 0.16,0.24,0.48,0.72,0.82 0.87,0.91,0.94,0.99), mean=0.484, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.007 0.008,0.01,0.01,0.09), mean=0.00438, stddev=0.00552], oderiv-count=1.18682e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12470.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.06,0.10 0.14,0.24,0.54,1.1,1.4 1.6,1.9,2.1,2.9), mean=0.668, stddev=0.495], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.20,0.28,0.36 0.45,0.59,0.87,1.1,1.3 1.4,1.6,1.7,2.4), mean=0.871, stddev=0.328]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91), mean=0.912, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.24,0.25 0.26,0.26,0.27,0.30), mean=0.227, stddev=0.0173], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05778, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.84,0.86 0.87,0.89,0.92,0.96,0.98 0.99,1.0,1.0,1.1), mean=0.924, stddev=0.0408], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.85, stddev=0.0387], bias-{mean,stddev}=-0.02638,0.9357, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.52e+05, self-repaired-proportion=0.015625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.06,0.11 0.17,0.26,0.57,1.1,1.4 1.7,2.0,2.2,3.0), mean=0.688, stddev=0.497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.08,0.11 0.17,0.27,0.49,0.71,0.81 0.89,0.92,0.94,0.99), mean=0.489, stddev=0.233], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.006 0.007,0.009,0.01,0.08), mean=0.00378, stddev=0.00425], oderiv-count=1.14131e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11958.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.07,0.11 0.17,0.26,0.57,1.1,1.4 1.7,2.0,2.2,3.0), mean=0.684, stddev=0.494], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.25,0.31,0.39 0.49,0.60,0.88,1.2,1.3 1.4,1.6,1.6,1.9), mean=0.885, stddev=0.311]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01998, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.904, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.26,0.26,0.30), mean=0.225, stddev=0.0171], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.83,0.84,0.85 0.87,0.89,0.92,0.96,0.98 0.99,1.0,1.0,1.1), mean=0.924, stddev=0.0425], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.8,1.9,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.85, stddev=0.0408], bias-{mean,stddev}=-0.01385,0.9284, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.88e+05, self-repaired-proportion=0.0168101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.07,0.11 0.18,0.27,0.57,1.1,1.4 1.6,1.9,2.1,2.7), mean=0.699, stddev=0.488], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.06,0.09,0.13 0.18,0.27,0.48,0.72,0.81 0.86,0.91,0.94,0.98), mean=0.491, stddev=0.226], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.009,0.07), mean=0.00331, stddev=0.00297], oderiv-count=1.11962e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.06,0.07,0.11 0.18,0.27,0.57,1.1,1.4 1.6,1.9,2.1,2.7), mean=0.696, stddev=0.485], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.27,0.31,0.39 0.49,0.61,0.88,1.2,1.3 1.5,1.6,1.7,2.1), mean=0.896, stddev=0.322]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02798, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.895, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.40 0.41,0.42,0.45,0.47,0.48 0.49,0.50,0.51,0.54), mean=0.447, stddev=0.0273], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05757, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.84,0.85 0.87,0.88,0.92,0.96,0.97 0.98,1.0,1.0,1.0), mean=0.92, stddev=0.0406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.84, stddev=0.0382], bias-{mean,stddev}=-0.007432,0.9465, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.37e+05, self-repaired-proportion=0.030911, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.008,0.04,0.09 0.15,0.24,0.56,1.0,1.3 1.6,2.1,2.3,2.9), mean=0.672, stddev=0.505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.02,0.06,0.12 0.18,0.27,0.49,0.73,0.83 0.89,0.93,0.96,0.99), mean=0.497, stddev=0.239], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.001 0.002,0.002,0.003,0.004,0.005 0.006,0.01,0.02,0.06), mean=0.00354, stddev=0.00538], oderiv-count=1.13754e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.008,0.04,0.09 0.15,0.24,0.56,1.0,1.3 1.6,2.1,2.3,2.9), mean=0.667, stddev=0.503], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.07,0.19,0.33 0.43,0.56,0.82,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.815, stddev=0.305]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02828, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.905, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.45,0.48,0.49 0.50,0.51,0.52,0.58), mean=0.451, stddev=0.0305], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-9e-08,-8e-08,-7e-08 -6e-08,-4e-08,8e-10,3e-08,5e-08 6e-08,7e-08,9e-08,1e-07), mean=-1.7e-09, stddev=4.03e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.75,0.77,0.80 0.83,0.85,0.91,1.0,1.1 1.1,1.2,1.2,1.4), mean=0.933, stddev=0.0979]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=2.01998e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.006076, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0009,0.002,0.005 0.009,0.02,0.05,0.13,0.17 0.20,0.22,0.24,0.30), mean=0.0738, stddev=0.0633], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.27 0.28,0.30,0.32,0.35,0.36 0.37,0.38,0.38,0.39), mean=0.322, stddev=0.0299], bias-{mean,stddev}=6.344e-06,0.0194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05768, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.84,0.86 0.87,0.89,0.92,0.96,0.97 0.99,1.0,1.0,1.1), mean=0.922, stddev=0.0415], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.85, stddev=0.0403], bias-{mean,stddev}=-0.002724,0.9204, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.84e+05, self-repaired-proportion=0.02673, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.03,0.05,0.09 0.15,0.25,0.55,1.0,1.3 1.6,2.0,2.2,3.3), mean=0.668, stddev=0.487], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.04,0.07,0.12 0.18,0.28,0.49,0.71,0.81 0.89,0.93,0.96,0.99), mean=0.493, stddev=0.233], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0004,0.0004 0.0005,0.0006,0.0007,0.001,0.001 0.002,0.002,0.004,0.02), mean=0.000962, stddev=0.00118], oderiv-count=1.10701e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.03,0.05,0.09 0.15,0.25,0.54,1.0,1.3 1.6,2.0,2.2,3.3), mean=0.664, stddev=0.484], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.15,0.24,0.34 0.45,0.56,0.83,1.1,1.2 1.3,1.4,1.5,1.7), mean=0.828, stddev=0.297]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.01998e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02827, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.905, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.40 0.41,0.43,0.45,0.48,0.49 0.50,0.51,0.52,0.54), mean=0.451, stddev=0.0301], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-1e-07,-8e-08,-7e-08 -5e-08,-4e-08,2e-09,4e-08,6e-08 7e-08,9e-08,9e-08,2e-07), mean=1.99e-09, stddev=4.45e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.81,0.83 0.85,0.89,0.95,1.0,1.1 1.2,1.2,1.3,1.6), mean=0.965, stddev=0.104]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000100999, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.01202, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.04,0.19,0.39 0.49,0.56,0.59,0.73), mean=0.114, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.48,0.51 0.55,0.57,0.64,0.69,0.72 0.74,0.76,0.77,0.80), mean=0.635, stddev=0.0692], bias-{mean,stddev}=7.393e-09,0.04833, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-06,5e-05,9e-05 0.0001,0.0002,0.0005,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000809, stddev=0.00115], oderiv-count=1.11802e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/5.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.54833 tdnnf2.linear:0.590653 tdnnf2.affine:0.538008 tdnnf3.linear:0.444493 tdnnf3.affine:0.500989 tdnnf4.linear:0.382464 tdnnf4.affine:0.502334 tdnnf5.linear:0.279466 tdnnf5.affine:0.476572 tdnnf6.linear:0.345242 tdnnf6.affine:0.472784 tdnnf7.linear:0.335187 tdnnf7.affine:0.485243 tdnnf8.linear:0.32279 tdnnf8.affine:0.487962 tdnnf9.linear:0.314038 tdnnf9.affine:0.483306 tdnnf10.linear:0.314388 tdnnf10.affine:0.485175 tdnnf11.linear:0.308293 tdnnf11.affine:0.491895 tdnnf12.linear:0.316594 tdnnf12.affine:0.48856 tdnnf13.linear:0.324877 tdnnf13.affine:0.493227 prefinal-l:0.410434 prefinal-chain.affine:0.492281 prefinal-chain.linear:0.278767 output.affine:0.778367 prefinal-xent.affine:0.513923 prefinal-xent.linear:0.354294 output-xent.affine:2.11317 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:41.6457 tdnnf2.linear:10.3957 tdnnf2.affine:41.5573 tdnnf3.linear:10.422 tdnnf3.affine:41.3097 tdnnf4.linear:10.4463 tdnnf4.affine:42.9851 tdnnf5.linear:10.4037 tdnnf5.affine:42.0372 tdnnf6.linear:10.4012 tdnnf6.affine:40.9537 tdnnf7.linear:10.3857 tdnnf7.affine:42.2848 tdnnf8.linear:10.3821 tdnnf8.affine:42.6298 tdnnf9.linear:10.3476 tdnnf9.affine:42.1407 tdnnf10.linear:10.3222 tdnnf10.affine:42.2776 tdnnf11.linear:10.3314 tdnnf11.affine:42.7608 tdnnf12.linear:10.3201 tdnnf12.affine:42.1 tdnnf13.linear:10.232 tdnnf13.affine:41.9493 prefinal-l:14.3253 prefinal-chain.affine:42.2631 prefinal-chain.linear:14.4782 output.affine:5.26827 prefinal-xent.affine:41.7091 prefinal-xent.linear:14.472 output-xent.affine:10.5371 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0130186 tdnnf2.linear:0.0562041 tdnnf2.affine:0.0127982 tdnnf3.linear:0.0421611 tdnnf3.affine:0.0119921 tdnnf4.linear:0.0361807 tdnnf4.affine:0.0115578 tdnnf5.linear:0.0265246 tdnnf5.affine:0.0112126 tdnnf6.linear:0.0327849 tdnnf6.affine:0.0114178 tdnnf7.linear:0.0318795 tdnnf7.affine:0.0113499 tdnnf8.linear:0.0307074 tdnnf8.affine:0.011321 tdnnf9.linear:0.0299733 tdnnf9.affine:0.011343 tdnnf10.linear:0.0300738 tdnnf10.affine:0.0113498 tdnnf11.linear:0.0294622 tdnnf11.affine:0.0113768 tdnnf12.linear:0.0302798 tdnnf12.affine:0.0114766 tdnnf13.linear:0.031332 tdnnf13.affine:0.0116272 prefinal-l:0.0282165 prefinal-chain.affine:0.01152 prefinal-chain.linear:0.0190372 output.affine:0.164291 prefinal-xent.affine:0.0121803 prefinal-xent.linear:0.0240566 output-xent.affine:0.241865 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Mon Jul 18 17:35:50 EDT 2022, elapsed time 0 seconds
