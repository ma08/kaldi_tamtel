# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/4.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/4.mdl 
# Started at Mon Jul 18 17:31:57 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/4.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.0009892,0.01287
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.06386, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.85,0.86,0.87 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.1,1.1), mean=0.946, stddev=0.0449], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.1,2.1 2.1,2.1,2.2,2.2), mean=2.04, stddev=0.0466], bias-{mean,stddev}=-0.01956,0.9361, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.13e+06, self-repaired-proportion=0.844215, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.80,1.2 1.6,1.9,2.1,3.3), mean=0.374, stddev=0.548], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.41,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.487, stddev=0.471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.10,0.22,0.23 0.24,0.24,0.25,0.27), mean=0.138, stddev=0.0799], oderiv-count=4.53222e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46350.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.79,1.2 1.6,1.9,2.1,3.3), mean=0.372, stddev=0.545], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,0.12,0.14 0.16,0.18,0.20,0.28), mean=0.0606, stddev=0.0603]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.94, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.26 0.26,0.27,0.28,0.33), mean=0.234, stddev=0.0173], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0594, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.85,0.86,0.88 0.90,0.91,0.95,0.99,1.0 1.0,1.0,1.0,1.1), mean=0.95, stddev=0.0426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.0), mean=1.9, stddev=0.0402], bias-{mean,stddev}=0.00693,0.9296, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.86e+06, self-repaired-proportion=0.270893, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,2e-05,5e-05,0.0002 0.005,0.04,0.29,0.83,1.2 1.5,1.9,2.3,3.7), mean=0.466, stddev=0.526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.0001,0.0004,0.002 0.02,0.10,0.51,0.88,0.97 0.99,1.0,1.0,1.0), mean=0.499, stddev=0.347], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.006,0.01,0.03,0.06 0.11,0.12,0.12,0.13), mean=0.0227, stddev=0.0306], oderiv-count=4.79648e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45838.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,9e-06,4e-05,0.0002 0.004,0.04,0.29,0.82,1.2 1.5,1.9,2.3,3.7), mean=0.463, stddev=0.523], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.003,0.007 0.04,0.14,0.39,0.57,0.66 0.77,0.88,0.98,1.3), mean=0.374, stddev=0.235]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.944, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.23,0.25,0.26 0.26,0.27,0.28,0.32), mean=0.235, stddev=0.0169], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05932, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.87,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.1,1.1), mean=0.948, stddev=0.043], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.1), mean=1.9, stddev=0.0438], bias-{mean,stddev}=-0.00652,0.9187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.92e+06, self-repaired-proportion=0.0889648, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.01,0.04 0.06,0.13,0.43,0.92,1.3 1.5,1.8,2.0,3.4), mean=0.557, stddev=0.491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.006,0.02,0.06 0.11,0.20,0.50,0.78,0.88 0.94,0.98,0.99,1.0), mean=0.497, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.005,0.008,0.01 0.02,0.03,0.06,0.09), mean=0.00696, stddev=0.00923], oderiv-count=4.46131e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45326.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.001,0.01,0.04 0.06,0.13,0.42,0.91,1.3 1.5,1.8,2.0,3.3), mean=0.555, stddev=0.488], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.03,0.09,0.19 0.25,0.37,0.63,0.85,0.96 1.0,1.1,1.3,1.6), mean=0.618, stddev=0.273]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02091, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.946, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.26,0.27,0.28,0.36), mean=0.236, stddev=0.0172], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05921, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.85,0.86,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.0,1.1), mean=0.946, stddev=0.0428], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.89, stddev=0.0417], bias-{mean,stddev}=0.0122,0.9951, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.0572316, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.01,0.02,0.05 0.10,0.18,0.51,1.0,1.4 1.8,2.0,2.3,3.7), mean=0.643, stddev=0.539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.02,0.04,0.07 0.13,0.23,0.50,0.76,0.87 0.93,0.96,0.97,1.0), mean=0.501, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.006,0.009,0.01 0.02,0.03,0.03,0.15), mean=0.00784, stddev=0.0101], oderiv-count=1.50931e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15108.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.02,0.02,0.06 0.10,0.18,0.51,1.0,1.4 1.8,2.0,2.3,3.7), mean=0.641, stddev=0.536], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.11,0.18,0.27 0.37,0.48,0.76,1.0,1.1 1.2,1.3,1.5,2.1), mean=0.757, stddev=0.3]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.0295, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.944, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.28,0.29 0.30,0.31,0.33,0.35,0.36 0.37,0.38,0.39,0.41), mean=0.333, stddev=0.0233], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.08378, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.81,0.82,0.86 0.87,0.89,0.94,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.946, stddev=0.0615], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.6,2.6 2.6,2.6,2.7,2.7,2.8 2.8,2.8,2.8,2.8), mean=2.68, stddev=0.0589], bias-{mean,stddev}=-0.0009644,0.9522, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.5e+05, self-repaired-proportion=0.0464867, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.02,0.04,0.08 0.11,0.20,0.50,1.0,1.3 1.7,2.1,2.3,3.2), mean=0.641, stddev=0.521], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.05,0.10 0.15,0.24,0.48,0.75,0.85 0.91,0.96,0.98,1.0), mean=0.494, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.004,0.005,0.007,0.01 0.01,0.02,0.03,0.14), mean=0.00648, stddev=0.00821], oderiv-count=1.46189e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15108.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.04,0.08 0.12,0.20,0.49,1.0,1.3 1.7,2.1,2.3,3.2), mean=0.639, stddev=0.518], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.12,0.21,0.31 0.40,0.53,0.78,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.798, stddev=0.309]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02084, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.943, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.26,0.27,0.28,0.31), mean=0.235, stddev=0.0169], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05927, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.84,0.86,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.1,1.1), mean=0.947, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.9, stddev=0.0411], bias-{mean,stddev}=-0.02702,0.9019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.17e+05, self-repaired-proportion=0.0312428, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.03,0.04,0.08 0.14,0.24,0.54,0.99,1.3 1.5,1.8,2.0,3.5), mean=0.634, stddev=0.475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.04,0.05,0.10 0.16,0.25,0.48,0.73,0.83 0.89,0.92,0.95,0.98), mean=0.491, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.004,0.006,0.008 0.01,0.01,0.02,0.06), mean=0.00517, stddev=0.00366], oderiv-count=1.47149e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14596.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.05,0.08 0.15,0.23,0.53,0.98,1.3 1.5,1.8,2.0,3.4), mean=0.632, stddev=0.472], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.21,0.26,0.35 0.46,0.59,0.84,1.1,1.2 1.3,1.5,1.6,1.8), mean=0.834, stddev=0.292]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.942, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.20,0.21 0.21,0.22,0.24,0.25,0.26 0.26,0.27,0.28,0.31), mean=0.235, stddev=0.0174], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.85,0.86,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.1,1.1), mean=0.948, stddev=0.0429], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.0), mean=1.9, stddev=0.0414], bias-{mean,stddev}=0.01704,0.9617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.22e+05, self-repaired-proportion=0.0360982, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.05,0.08 0.13,0.23,0.52,1.0,1.4 1.7,2.1,2.4,3.4), mean=0.67, stddev=0.528], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.04,0.06,0.10 0.15,0.24,0.49,0.75,0.84 0.90,0.95,0.97,0.99), mean=0.5, stddev=0.254], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.007 0.01,0.01,0.02,0.07), mean=0.0048, stddev=0.00354], oderiv-count=1.39654e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14084.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.06,0.08 0.13,0.23,0.52,1.0,1.4 1.7,2.1,2.3,3.3), mean=0.669, stddev=0.524], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.20,0.25,0.35 0.45,0.59,0.84,1.1,1.2 1.4,1.5,1.6,1.8), mean=0.851, stddev=0.306]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.942, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.20,0.21 0.22,0.22,0.23,0.25,0.26 0.26,0.27,0.28,0.31), mean=0.235, stddev=0.0174], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05928, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.85,0.86,0.88 0.90,0.91,0.94,0.98,1.0 1.0,1.0,1.1,1.1), mean=0.948, stddev=0.0429], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.9, stddev=0.0409], bias-{mean,stddev}=-0.02445,0.9779, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.65e+05, self-repaired-proportion=0.0357256, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.03,0.05,0.08 0.14,0.23,0.55,1.0,1.4 1.7,2.1,2.4,3.0), mean=0.67, stddev=0.518], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.05,0.09 0.15,0.25,0.49,0.74,0.83 0.89,0.94,0.97,0.99), mean=0.49, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.007 0.009,0.01,0.02,0.09), mean=0.00461, stddev=0.00548], oderiv-count=1.35635e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13572.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.03,0.05,0.08 0.14,0.23,0.56,1.0,1.4 1.7,2.1,2.4,3.0), mean=0.668, stddev=0.515], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.20,0.28,0.36 0.45,0.58,0.87,1.1,1.3 1.4,1.5,1.7,2.2), mean=0.871, stddev=0.327]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.939, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.26,0.27,0.28,0.32), mean=0.234, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05932, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.85,0.86,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.0,1.1), mean=0.948, stddev=0.0426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.1), mean=1.9, stddev=0.0425], bias-{mean,stddev}=-0.01062,0.9557, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.57e+05, self-repaired-proportion=0.0264338, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.05,0.09 0.15,0.24,0.58,1.1,1.4 1.6,2.0,2.2,3.3), mean=0.685, stddev=0.501], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.06,0.10 0.15,0.26,0.50,0.74,0.83 0.88,0.93,0.96,0.99), mean=0.496, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.008,0.01,0.01,0.09), mean=0.00409, stddev=0.00427], oderiv-count=1.31904e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13060.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.03,0.05,0.09 0.15,0.25,0.57,1.0,1.4 1.6,2.0,2.2,3.3), mean=0.683, stddev=0.497], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.20,0.27,0.35 0.47,0.59,0.89,1.2,1.3 1.4,1.6,1.7,2.2), mean=0.89, stddev=0.329]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0207, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.937, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.21 0.21,0.22,0.23,0.25,0.25 0.26,0.27,0.28,0.31), mean=0.234, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0593, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.87,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.1,1.1), mean=0.948, stddev=0.0418], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.9, stddev=0.0419], bias-{mean,stddev}=0.06416,0.9602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.25e+05, self-repaired-proportion=0.0290652, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.06,0.10 0.16,0.26,0.61,1.1,1.5 1.7,2.1,2.4,3.0), mean=0.725, stddev=0.532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.07,0.11 0.18,0.28,0.52,0.76,0.84 0.90,0.94,0.96,0.99), mean=0.513, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.004,0.006 0.007,0.01,0.01,0.08), mean=0.00371, stddev=0.00361], oderiv-count=1.25606e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12548.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.06,0.10 0.16,0.26,0.61,1.1,1.4 1.7,2.1,2.4,3.0), mean=0.724, stddev=0.528], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.18,0.27,0.39 0.48,0.61,0.89,1.2,1.3 1.5,1.6,1.7,2.6), mean=0.903, stddev=0.341]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02073, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.938, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.26,0.27,0.28,0.32), mean=0.234, stddev=0.0172], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0592, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.87,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.0,1.1), mean=0.946, stddev=0.0434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.89, stddev=0.0397], bias-{mean,stddev}=-0.05122,0.9841, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.87e+05, self-repaired-proportion=0.0249853, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.02,0.05,0.09 0.14,0.23,0.55,1.1,1.4 1.7,2.0,2.1,3.0), mean=0.68, stddev=0.511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.07,0.11 0.16,0.23,0.48,0.73,0.82 0.87,0.92,0.94,0.99), mean=0.485, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.004,0.006 0.007,0.009,0.01,0.07), mean=0.00361, stddev=0.00382], oderiv-count=1.18093e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12036.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.05,0.09 0.14,0.24,0.55,1.1,1.4 1.7,1.9,2.1,3.0), mean=0.68, stddev=0.508], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.16,0.26,0.35 0.44,0.60,0.89,1.1,1.3 1.4,1.6,1.7,2.6), mean=0.884, stddev=0.341]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.938, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.26,0.27,0.28,0.31), mean=0.234, stddev=0.0177], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.86,0.88 0.89,0.91,0.94,0.98,1.0 1.0,1.0,1.0,1.1), mean=0.945, stddev=0.0416], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.89, stddev=0.0396], bias-{mean,stddev}=-0.02726,0.9569, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.87e+05, self-repaired-proportion=0.0172073, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.06,0.10 0.16,0.26,0.58,1.1,1.4 1.7,2.0,2.2,3.1), mean=0.698, stddev=0.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.08,0.11 0.17,0.26,0.49,0.71,0.82 0.88,0.93,0.94,0.99), mean=0.49, stddev=0.236], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.01,0.06), mean=0.00314, stddev=0.00303], oderiv-count=1.16691e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11524.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.06,0.10 0.17,0.26,0.58,1.1,1.4 1.7,2.0,2.2,3.1), mean=0.697, stddev=0.507], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.22,0.28,0.39 0.49,0.61,0.89,1.2,1.3 1.4,1.6,1.7,1.9), mean=0.901, stddev=0.324]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02055, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93), mean=0.93, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.26,0.27,0.27,0.31), mean=0.232, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0592, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.85,0.86,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.0,1.1), mean=0.946, stddev=0.0434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.89, stddev=0.0417], bias-{mean,stddev}=-0.01456,0.9494, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.69e+05, self-repaired-proportion=0.0183417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.06,0.10 0.16,0.27,0.58,1.1,1.4 1.7,2.0,2.2,2.8), mean=0.704, stddev=0.503], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.06,0.08,0.13 0.18,0.26,0.49,0.72,0.81 0.86,0.92,0.95,0.98), mean=0.492, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.001 0.002,0.002,0.002,0.003,0.004 0.005,0.007,0.008,0.06), mean=0.00282, stddev=0.00244], oderiv-count=1.13018e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11012.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.06,0.10 0.17,0.27,0.57,1.1,1.4 1.7,2.0,2.2,2.7), mean=0.706, stddev=0.499], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.23,0.29,0.38 0.48,0.61,0.90,1.2,1.3 1.5,1.6,1.7,2.2), mean=0.91, stddev=0.338]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.0289, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.925, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.42,0.44,0.46,0.48,0.50 0.51,0.52,0.53,0.55), mean=0.462, stddev=0.028], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05891, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.86,0.87 0.89,0.91,0.94,0.98,1.0 1.0,1.0,1.0,1.1), mean=0.942, stddev=0.0415], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.88, stddev=0.0391], bias-{mean,stddev}=-0.007674,0.9678, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.21e+05, self-repaired-proportion=0.0325661, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.007,0.04,0.09 0.15,0.25,0.56,1.1,1.4 1.7,2.1,2.4,3.0), mean=0.686, stddev=0.517], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.02,0.06,0.11 0.17,0.27,0.49,0.73,0.83 0.89,0.94,0.96,0.99), mean=0.496, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0009,0.001,0.001 0.001,0.002,0.002,0.003,0.004 0.005,0.009,0.02,0.06), mean=0.00298, stddev=0.00461], oderiv-count=1.1063e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11012.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.008,0.04,0.09 0.15,0.25,0.56,1.0,1.4 1.7,2.1,2.4,3.0), mean=0.683, stddev=0.514], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.07,0.18,0.32 0.43,0.58,0.84,1.1,1.2 1.4,1.5,1.6,2.1), mean=0.842, stddev=0.316]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02896, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93), mean=0.927, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.42,0.44,0.46,0.49,0.50 0.51,0.52,0.53,0.60), mean=0.462, stddev=0.0311], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11012.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-1e-07,-7e-08,-6e-08 -5e-08,-3e-08,-7e-10,3e-08,5e-08 6e-08,8e-08,9e-08,1e-07), mean=4.38e-10, stddev=3.79e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.78,0.81,0.82 0.85,0.88,0.95,1.0,1.1 1.1,1.2,1.2,1.4), mean=0.961, stddev=0.0989]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=2.19981e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.004668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0006,0.002,0.003 0.006,0.009,0.03,0.10,0.14 0.16,0.18,0.20,0.24), mean=0.0532, stddev=0.0524], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.22,0.23,0.25,0.27,0.28 0.28,0.29,0.30,0.31), mean=0.247, stddev=0.0246], bias-{mean,stddev}=4.499e-06,0.01506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.86,0.88 0.89,0.91,0.95,0.98,1.0 1.0,1.0,1.0,1.1), mean=0.945, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.9,1.9,1.9,1.9 2.0,2.0,2.0,2.0), mean=1.89, stddev=0.0413], bias-{mean,stddev}=-0.003079,0.9414, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.71e+05, self-repaired-proportion=0.0228041, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.04,0.09 0.14,0.26,0.56,1.1,1.4 1.7,2.0,2.2,3.4), mean=0.678, stddev=0.502], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.05,0.07,0.12 0.17,0.27,0.49,0.72,0.82 0.89,0.93,0.95,0.99), mean=0.495, stddev=0.237], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0002,0.0003 0.0003,0.0004,0.0005,0.0007,0.001 0.001,0.002,0.003,0.01), mean=0.000612, stddev=0.000656], oderiv-count=1.04979e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11012.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.05,0.09 0.14,0.26,0.56,1.0,1.4 1.6,2.0,2.2,3.4), mean=0.676, stddev=0.498], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.15,0.24,0.33 0.42,0.57,0.86,1.1,1.2 1.4,1.5,1.5,1.8), mean=0.846, stddev=0.31]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.19981e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02931, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.938, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.43,0.44,0.47,0.50,0.51 0.52,0.53,0.54,0.56), mean=0.468, stddev=0.0309], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11012.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-9e-08,-8e-08,-7e-08 -5e-08,-4e-08,-5e-09,3e-08,4e-08 7e-08,1e-07,1e-07,1e-07), mean=-2.56e-09, stddev=4.03e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.81,0.82,0.84 0.86,0.90,0.96,1.1,1.1 1.2,1.2,1.3,1.7), mean=0.98, stddev=0.11]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00010999, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.00744, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.009,0.01,0.02,0.10,0.22 0.30,0.39,0.43,0.56), mean=0.0667, stddev=0.0986], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.33 0.34,0.36,0.40,0.43,0.45 0.46,0.47,0.48,0.49), mean=0.393, stddev=0.0404], bias-{mean,stddev}=5.456e-09,0.03417, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-06,4e-05,0.0001 0.0001,0.0002,0.0004,0.001,0.002 0.002,0.003,0.004,0.04), mean=0.000743, stddev=0.0011], oderiv-count=1.11226e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/4.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.621735 tdnnf2.linear:0.713145 tdnnf2.affine:0.60241 tdnnf3.linear:0.523194 tdnnf3.affine:0.558788 tdnnf4.linear:0.444547 tdnnf4.affine:0.559488 tdnnf5.linear:0.321528 tdnnf5.affine:0.531618 tdnnf6.linear:0.402469 tdnnf6.affine:0.52857 tdnnf7.linear:0.396929 tdnnf7.affine:0.542897 tdnnf8.linear:0.386144 tdnnf8.affine:0.547318 tdnnf9.linear:0.385535 tdnnf9.affine:0.543878 tdnnf10.linear:0.393182 tdnnf10.affine:0.5483 tdnnf11.linear:0.396858 tdnnf11.affine:0.557497 tdnnf12.linear:0.413068 tdnnf12.affine:0.556873 tdnnf13.linear:0.43777 tdnnf13.affine:0.566599 prefinal-l:0.557557 prefinal-chain.affine:0.572371 prefinal-chain.linear:0.402037 output.affine:1.21587 prefinal-xent.affine:0.575919 prefinal-xent.linear:0.400706 output-xent.affine:2.66232 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:42.6182 tdnnf2.linear:10.6338 tdnnf2.affine:42.5448 tdnnf3.linear:10.6748 tdnnf3.affine:42.2686 tdnnf4.linear:10.7049 tdnnf4.affine:43.9669 tdnnf5.linear:10.6795 tdnnf5.affine:42.9948 tdnnf6.linear:10.6716 tdnnf6.affine:41.8869 tdnnf7.linear:10.6552 tdnnf7.affine:43.248 tdnnf8.linear:10.6552 tdnnf8.affine:43.6017 tdnnf9.linear:10.6204 tdnnf9.affine:43.1028 tdnnf10.linear:10.5999 tdnnf10.affine:43.2443 tdnnf11.linear:10.6117 tdnnf11.affine:43.7404 tdnnf12.linear:10.6076 tdnnf12.affine:43.0686 tdnnf13.linear:10.5233 tdnnf13.affine:42.9194 prefinal-l:14.7971 prefinal-chain.affine:43.2312 prefinal-chain.linear:14.8267 output.affine:4.0491 prefinal-xent.affine:42.7077 prefinal-xent.linear:15.0088 output-xent.affine:6.58175 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0144098 tdnnf2.linear:0.0661435 tdnnf2.affine:0.0139836 tdnnf3.linear:0.0483527 tdnnf3.affine:0.0130593 tdnnf4.linear:0.0409638 tdnnf4.affine:0.0125729 tdnnf5.linear:0.0296728 tdnnf5.affine:0.0122172 tdnnf6.linear:0.0371761 tdnnf6.affine:0.0124681 tdnnf7.linear:0.0367164 tdnnf7.affine:0.0124031 tdnnf8.linear:0.0357058 tdnnf8.affine:0.0124024 tdnnf9.linear:0.0357592 tdnnf9.affine:0.0124667 tdnnf10.linear:0.0365253 tdnnf10.affine:0.0125266 tdnnf11.linear:0.0368186 tdnnf11.affine:0.012592 tdnnf12.linear:0.0383149 tdnnf12.affine:0.0127731 tdnnf13.linear:0.0409066 tdnnf13.affine:0.0130403 prefinal-l:0.0369479 prefinal-chain.affine:0.0130786 prefinal-chain.linear:0.0267176 output.affine:0.383776 prefinal-xent.affine:0.0133152 prefinal-xent.linear:0.0261704 output-xent.affine:0.636673 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Mon Jul 18 17:31:58 EDT 2022, elapsed time 1 seconds
