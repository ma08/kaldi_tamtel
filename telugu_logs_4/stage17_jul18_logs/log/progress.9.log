# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/9.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/8.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/9.mdl 
# Started at Mon Jul 18 19:23:15 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/9.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005757, bias-{mean,stddev}=-0.001083,0.01285
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.06046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.80,0.81,0.83 0.84,0.86,0.89,0.93,0.95 0.97,0.99,1.0,1.0), mean=0.896, stddev=0.043], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.9,1.9 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.1), mean=1.93, stddev=0.0455], bias-{mean,stddev}=-0.01834,0.8872, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.21e+06, self-repaired-proportion=0.848886, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.75,1.1 1.5,1.8,2.0,3.1), mean=0.354, stddev=0.519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.42,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.488, stddev=0.471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.08,0.13,0.29,0.30 0.31,0.32,0.32,0.35), mean=0.178, stddev=0.0985], oderiv-count=4.61914e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46819.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.75,1.1 1.5,1.8,2.0,3.1), mean=0.352, stddev=0.516], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.11,0.13 0.15,0.17,0.19,0.26), mean=0.0581, stddev=0.0576]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01976, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.894, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.24 0.25,0.26,0.26,0.31), mean=0.223, stddev=0.0166], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05633, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.81,0.82,0.83 0.85,0.87,0.90,0.94,0.95 0.97,0.98,0.99,1.0), mean=0.9, stddev=0.0407], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.0383], bias-{mean,stddev}=0.006936,0.8778, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.97e+06, self-repaired-proportion=0.279695, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,7e-06,2e-05,8e-05 0.003,0.04,0.26,0.78,1.1 1.4,1.8,2.2,3.5), mean=0.436, stddev=0.496], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,6e-05,0.0002,0.0007 0.02,0.10,0.51,0.89,0.97 0.99,1.0,1.0,1.0), mean=0.501, stddev=0.351], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.007 0.008,0.009,0.01,0.04,0.11 0.15,0.16,0.16,0.18), mean=0.0311, stddev=0.041], oderiv-count=4.61037e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46307.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-09,4e-06,2e-05,8e-05 0.003,0.03,0.26,0.78,1.1 1.4,1.8,2.2,3.5), mean=0.434, stddev=0.494], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0007,0.002,0.004 0.03,0.14,0.35,0.52,0.60 0.70,0.79,0.86,1.2), mean=0.345, stddev=0.213]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01975, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.894, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.24 0.25,0.26,0.26,0.30), mean=0.223, stddev=0.0162], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05625, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.82,0.83 0.85,0.86,0.90,0.93,0.95 0.97,0.99,1.0,1.0), mean=0.899, stddev=0.0409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.8, stddev=0.0417], bias-{mean,stddev}=-0.005856,0.8697, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.85e+06, self-repaired-proportion=0.0845224, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0003,0.009,0.04 0.07,0.12,0.40,0.86,1.2 1.4,1.7,1.9,3.2), mean=0.526, stddev=0.463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.002,0.02,0.06 0.11,0.20,0.50,0.78,0.88 0.94,0.98,0.99,1.0), mean=0.497, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.004,0.005,0.007,0.01,0.02 0.02,0.04,0.11,0.13), mean=0.0101, stddev=0.0144], oderiv-count=4.65984e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45795.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0002,0.009,0.04 0.06,0.12,0.39,0.85,1.2 1.4,1.7,1.9,3.2), mean=0.523, stddev=0.46], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.08,0.19 0.26,0.36,0.59,0.80,0.91 0.98,1.1,1.2,1.5), mean=0.584, stddev=0.253]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01978, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.895, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.24 0.25,0.26,0.26,0.34), mean=0.223, stddev=0.0163], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05614, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.81,0.83 0.84,0.86,0.90,0.93,0.95 0.96,0.98,0.99,1.0), mean=0.897, stddev=0.0407], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.0395], bias-{mean,stddev}=0.01196,0.9439, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.0590685, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.03,0.05 0.10,0.17,0.48,0.95,1.3 1.7,1.9,2.2,3.5), mean=0.605, stddev=0.509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.04,0.07 0.13,0.23,0.50,0.77,0.87 0.93,0.96,0.97,1.0), mean=0.501, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.005 0.006,0.006,0.008,0.01,0.02 0.02,0.03,0.04,0.20), mean=0.0115, stddev=0.0155], oderiv-count=1.47302e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15265.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.02,0.03,0.05 0.10,0.17,0.48,0.94,1.3 1.7,1.9,2.2,3.5), mean=0.602, stddev=0.506], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.14,0.19,0.27 0.35,0.46,0.71,0.94,1.0 1.1,1.3,1.4,1.9), mean=0.711, stddev=0.275]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.0278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.889, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.30,0.31,0.33,0.34 0.35,0.36,0.37,0.39), mean=0.314, stddev=0.0222], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.07945, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.76,0.77,0.81 0.83,0.85,0.89,0.95,0.98 1.0,1.0,1.0,1.1), mean=0.897, stddev=0.0585], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.4,2.4,2.5 2.5,2.5,2.5,2.6,2.6 2.6,2.7,2.7,2.7), mean=2.54, stddev=0.0559], bias-{mean,stddev}=-0.0005844,0.9033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.0485934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.08 0.11,0.19,0.46,0.96,1.2 1.6,2.0,2.2,3.0), mean=0.602, stddev=0.491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.02,0.05,0.09 0.15,0.24,0.48,0.76,0.85 0.92,0.96,0.98,1.0), mean=0.495, stddev=0.259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.005,0.007,0.01,0.01 0.02,0.03,0.04,0.19), mean=0.0096, stddev=0.0122], oderiv-count=1.55629e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15265.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.08 0.11,0.19,0.46,0.95,1.2 1.6,2.0,2.2,3.0), mean=0.599, stddev=0.489], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.13,0.20,0.30 0.39,0.50,0.73,1.0,1.1 1.2,1.3,1.4,1.6), mean=0.748, stddev=0.286]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01966, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.89, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.22,0.23,0.24 0.25,0.26,0.26,0.29), mean=0.222, stddev=0.016], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0562, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.79,0.81,0.83 0.85,0.87,0.90,0.93,0.95 0.96,0.98,1.0,1.0), mean=0.898, stddev=0.0402], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.039], bias-{mean,stddev}=-0.02536,0.8557, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.17e+05, self-repaired-proportion=0.030223, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.05,0.09 0.14,0.22,0.51,0.93,1.2 1.4,1.7,1.9,3.3), mean=0.6, stddev=0.448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.04,0.05,0.10 0.16,0.25,0.48,0.73,0.83 0.88,0.92,0.94,0.99), mean=0.49, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.15), mean=0.00766, stddev=0.00671], oderiv-count=1.44403e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14753.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.05,0.09 0.14,0.22,0.51,0.93,1.2 1.4,1.7,1.9,3.3), mean=0.597, stddev=0.446], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.20,0.26,0.34 0.45,0.56,0.80,1.0,1.1 1.2,1.4,1.5,1.7), mean=0.792, stddev=0.27]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.889, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.26,0.26,0.29), mean=0.222, stddev=0.0164], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05627, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.81,0.82,0.83 0.85,0.86,0.90,0.93,0.95 0.97,0.99,1.0,1.0), mean=0.899, stddev=0.0408], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.0393], bias-{mean,stddev}=0.0164,0.9124, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.56e+05, self-repaired-proportion=0.040069, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.03,0.06,0.09 0.13,0.22,0.50,1.0,1.3 1.6,2.0,2.2,3.2), mean=0.636, stddev=0.498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.06,0.10 0.15,0.25,0.50,0.75,0.84 0.90,0.96,0.97,0.99), mean=0.5, stddev=0.252], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.006,0.008,0.01 0.01,0.02,0.02,0.12), mean=0.00707, stddev=0.006], oderiv-count=1.3959e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14241.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.06,0.08 0.13,0.22,0.49,0.99,1.3 1.6,2.0,2.2,3.1), mean=0.633, stddev=0.495], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.19,0.26,0.35 0.43,0.56,0.80,1.1,1.2 1.3,1.4,1.5,1.7), mean=0.805, stddev=0.283]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01963, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.889, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.19,0.20 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.26,0.30), mean=0.222, stddev=0.0165], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0562, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.80,0.82,0.83 0.85,0.86,0.90,0.93,0.95 0.97,0.99,1.0,1.0), mean=0.898, stddev=0.0407], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.0388], bias-{mean,stddev}=-0.02296,0.9278, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.81e+05, self-repaired-proportion=0.0405965, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.05,0.08 0.14,0.22,0.52,0.96,1.3 1.6,2.0,2.2,2.9), mean=0.632, stddev=0.488], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.05,0.09 0.14,0.25,0.49,0.74,0.83 0.89,0.95,0.97,0.99), mean=0.49, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.005,0.008,0.01 0.01,0.02,0.02,0.14), mean=0.0069, stddev=0.00973], oderiv-count=1.34349e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13729.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.03,0.05,0.08 0.13,0.22,0.52,0.95,1.3 1.6,2.0,2.2,2.8), mean=0.628, stddev=0.486], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.19,0.27,0.35 0.43,0.55,0.82,1.1,1.2 1.3,1.5,1.5,2.1), mean=0.818, stddev=0.302]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.886, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.20 0.20,0.21,0.22,0.23,0.24 0.25,0.26,0.26,0.30), mean=0.221, stddev=0.0168], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05624, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.81,0.82,0.83 0.85,0.87,0.90,0.93,0.95 0.97,0.98,0.99,1.0), mean=0.899, stddev=0.0405], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.8 1.9,1.9,1.9,2.0), mean=1.8, stddev=0.0403], bias-{mean,stddev}=-0.009777,0.9067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.66e+05, self-repaired-proportion=0.0274089, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.03,0.05,0.09 0.14,0.23,0.55,1.0,1.3 1.5,1.9,2.1,3.1), mean=0.648, stddev=0.472], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.05,0.10 0.16,0.26,0.50,0.73,0.82 0.88,0.93,0.96,0.99), mean=0.496, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.02,0.02,0.14), mean=0.00599, stddev=0.00709], oderiv-count=1.32966e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13217.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.04,0.05,0.09 0.14,0.23,0.55,0.99,1.3 1.5,1.9,2.1,3.1), mean=0.644, stddev=0.469], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.21,0.27,0.34 0.45,0.56,0.84,1.1,1.2 1.3,1.4,1.6,2.0), mean=0.837, stddev=0.303]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.883, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.26,0.29), mean=0.22, stddev=0.0168], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05621, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.82,0.84 0.85,0.86,0.90,0.93,0.95 0.96,0.99,1.0,1.0), mean=0.898, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.0397], bias-{mean,stddev}=0.06127,0.911, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.42e+05, self-repaired-proportion=0.0292446, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.03,0.06,0.09 0.15,0.24,0.56,1.1,1.4 1.6,2.0,2.3,2.9), mean=0.682, stddev=0.502], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.05,0.06,0.12 0.17,0.28,0.51,0.76,0.84 0.90,0.94,0.96,0.99), mean=0.512, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.008 0.01,0.01,0.02,0.12), mean=0.0054, stddev=0.00633], oderiv-count=1.30285e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12705.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.03,0.06,0.09 0.14,0.24,0.56,1.1,1.4 1.6,2.0,2.2,2.9), mean=0.678, stddev=0.5], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.18,0.28,0.36 0.46,0.57,0.83,1.1,1.3 1.4,1.5,1.6,2.3), mean=0.843, stddev=0.312]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01952, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.884, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.22,0.23,0.24 0.25,0.26,0.26,0.30), mean=0.22, stddev=0.0163], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.81,0.82,0.83 0.84,0.86,0.90,0.93,0.95 0.96,0.98,0.99,1.0), mean=0.897, stddev=0.0413], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.79, stddev=0.0377], bias-{mean,stddev}=-0.04815,0.9338, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.72e+05, self-repaired-proportion=0.0243972, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.04,0.06,0.09 0.13,0.23,0.52,1.0,1.3 1.6,1.9,2.0,2.9), mean=0.645, stddev=0.482], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.07,0.11 0.16,0.24,0.48,0.72,0.82 0.88,0.92,0.94,1.0), mean=0.485, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.008 0.009,0.01,0.01,0.11), mean=0.00517, stddev=0.00704], oderiv-count=1.18483e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12193.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.04,0.06,0.09 0.13,0.22,0.51,1.0,1.3 1.6,1.9,2.0,2.8), mean=0.641, stddev=0.479], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.22,0.28,0.35 0.44,0.56,0.82,1.1,1.2 1.4,1.5,1.6,2.2), mean=0.83, stddev=0.31]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01949, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.882, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.26,0.30), mean=0.22, stddev=0.0167], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05602, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.81,0.82,0.83 0.84,0.86,0.90,0.93,0.95 0.96,0.98,0.99,1.0), mean=0.896, stddev=0.0396], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.79, stddev=0.0375], bias-{mean,stddev}=-0.02533,0.9079, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.93e+05, self-repaired-proportion=0.0165158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.06,0.10 0.16,0.25,0.55,1.0,1.3 1.6,1.9,2.1,2.9), mean=0.659, stddev=0.481], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.06,0.07,0.11 0.17,0.27,0.49,0.71,0.82 0.89,0.93,0.95,0.99), mean=0.489, stddev=0.236], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.006 0.008,0.01,0.01,0.08), mean=0.00434, stddev=0.0047], oderiv-count=1.15494e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11681.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.05,0.06,0.10 0.16,0.25,0.55,1.0,1.3 1.6,1.9,2.1,2.9), mean=0.655, stddev=0.479], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.23,0.31,0.38 0.47,0.57,0.84,1.1,1.2 1.3,1.5,1.6,1.8), mean=0.842, stddev=0.296]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01932, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87), mean=0.874, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.25,0.26,0.29), mean=0.218, stddev=0.0165], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05607, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.81,0.81,0.83 0.84,0.86,0.90,0.93,0.95 0.96,0.98,0.99,1.0), mean=0.896, stddev=0.0414], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.79, stddev=0.0397], bias-{mean,stddev}=-0.01309,0.9007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.49e+05, self-repaired-proportion=0.016613, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.06,0.06,0.11 0.17,0.26,0.55,1.1,1.3 1.6,1.9,2.1,2.6), mean=0.675, stddev=0.472], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.06,0.09,0.13 0.19,0.28,0.48,0.72,0.81 0.86,0.91,0.95,0.99), mean=0.491, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.008,0.01,0.08), mean=0.00381, stddev=0.00421], oderiv-count=1.1241e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11169.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.06,0.06,0.11 0.17,0.26,0.55,1.0,1.3 1.6,1.9,2.1,2.6), mean=0.671, stddev=0.47], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.27,0.31,0.39 0.47,0.59,0.85,1.1,1.3 1.4,1.5,1.6,2.0), mean=0.86, stddev=0.306]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02692, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86), mean=0.861, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.41,0.43,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.43, stddev=0.0264], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05584, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.80,0.81,0.83 0.84,0.86,0.89,0.93,0.94 0.95,0.97,0.98,1.0), mean=0.893, stddev=0.0395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.79, stddev=0.0372], bias-{mean,stddev}=-0.007193,0.9182, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.22e+05, self-repaired-proportion=0.0341905, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.005,0.04,0.09 0.14,0.23,0.53,0.99,1.3 1.6,2.0,2.3,2.8), mean=0.643, stddev=0.491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.06,0.12 0.17,0.27,0.49,0.73,0.83 0.90,0.94,0.96,0.99), mean=0.497, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.002 0.002,0.002,0.003,0.004,0.006 0.007,0.01,0.02,0.07), mean=0.00399, stddev=0.00585], oderiv-count=1.11008e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11169.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.004,0.04,0.08 0.13,0.23,0.52,0.98,1.3 1.6,2.0,2.3,2.8), mean=0.638, stddev=0.489], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.19,0.31 0.40,0.52,0.77,1.0,1.1 1.3,1.4,1.5,1.9), mean=0.772, stddev=0.295]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02745, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.878, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.37,0.39 0.40,0.41,0.44,0.46,0.48 0.48,0.50,0.50,0.56), mean=0.438, stddev=0.0298], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11169.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9e-08,-8e-08,-8e-08,-6e-08 -5e-08,-3e-08,-2e-09,3e-08,5e-08 6e-08,7e-08,1e-07,1e-07), mean=-4.72e-10, stddev=3.83e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.73,0.74,0.77 0.80,0.82,0.88,0.96,1.0 1.1,1.1,1.1,1.3), mean=0.896, stddev=0.0913]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=1.77743e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.007319, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.001,0.003,0.008 0.01,0.02,0.08,0.16,0.19 0.22,0.25,0.26,0.33), mean=0.0936, stddev=0.0703], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.31,0.33 0.35,0.36,0.39,0.42,0.43 0.44,0.45,0.46,0.48), mean=0.387, stddev=0.0349], bias-{mean,stddev}=8.972e-06,0.02333, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05583, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.81,0.83 0.84,0.86,0.89,0.93,0.94 0.96,0.98,0.99,1.0), mean=0.892, stddev=0.0405], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.79, stddev=0.0392], bias-{mean,stddev}=-0.002244,0.8928, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.3e+05, self-repaired-proportion=0.0260272, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.03,0.05,0.10 0.14,0.25,0.52,0.97,1.3 1.6,1.9,2.1,3.2), mean=0.643, stddev=0.471], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.04,0.07,0.12 0.18,0.27,0.49,0.71,0.81 0.89,0.93,0.96,0.99), mean=0.49, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0005,0.0006 0.0006,0.0007,0.001,0.001,0.002 0.002,0.003,0.004,0.02), mean=0.00127, stddev=0.00178], oderiv-count=1.09389e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11169.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-13,0.03,0.05,0.09 0.14,0.25,0.51,0.97,1.3 1.6,1.9,2.1,3.2), mean=0.64, stddev=0.468], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,0.17,0.23,0.34 0.44,0.55,0.81,1.0,1.2 1.3,1.4,1.4,1.6), mean=0.8, stddev=0.283]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.77743e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02699, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86), mean=0.864, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.39,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.431, stddev=0.0294], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11169.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-1e-07,-8e-08,-7e-08 -6e-08,-4e-08,-4e-09,3e-08,5e-08 6e-08,7e-08,9e-08,1e-07), mean=-2.71e-09, stddev=3.91e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.79,0.79,0.81 0.83,0.86,0.92,0.98,1.0 1.1,1.2,1.2,1.5), mean=0.931, stddev=0.093]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=8.88714e-05, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.01652, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.06,0.33,0.53 0.62,0.70,0.72,0.91), mean=0.169, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.61,0.66 0.72,0.79,0.89,0.97,1.0 1.0,1.0,1.1,1.1), mean=0.871, stddev=0.107], bias-{mean,stddev}=1.366e-08,0.0588, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-06,4e-05,9e-05 0.0001,0.0002,0.0005,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000854, stddev=0.00117], oderiv-count=1.09005e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/8.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/9.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.468278 tdnnf2.linear:0.498834 tdnnf2.affine:0.459994 tdnnf3.linear:0.371272 tdnnf3.affine:0.428201 tdnnf4.linear:0.320744 tdnnf4.affine:0.429948 tdnnf5.linear:0.23265 tdnnf5.affine:0.408093 tdnnf6.linear:0.287307 tdnnf6.affine:0.404153 tdnnf7.linear:0.278595 tdnnf7.affine:0.41469 tdnnf8.linear:0.264843 tdnnf8.affine:0.416536 tdnnf9.linear:0.254644 tdnnf9.affine:0.411796 tdnnf10.linear:0.250473 tdnnf10.affine:0.412726 tdnnf11.linear:0.240207 tdnnf11.affine:0.417248 tdnnf12.linear:0.240309 tdnnf12.affine:0.412336 tdnnf13.linear:0.237856 tdnnf13.affine:0.41374 prefinal-l:0.289793 prefinal-chain.affine:0.412889 prefinal-chain.linear:0.198304 output.affine:0.475604 prefinal-xent.affine:0.426506 prefinal-xent.linear:0.273517 output-xent.affine:1.37272 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:40.3715 tdnnf2.linear:10.1167 tdnnf2.affine:40.2623 tdnnf3.linear:10.1145 tdnnf3.affine:40.0498 tdnnf4.linear:10.1261 tdnnf4.affine:41.6952 tdnnf5.linear:10.0631 tdnnf5.affine:40.7785 tdnnf6.linear:10.0674 tdnnf6.affine:39.7287 tdnnf7.linear:10.0554 tdnnf7.affine:41.0196 tdnnf8.linear:10.0529 tdnnf8.affine:41.3539 tdnnf9.linear:10.019 tdnnf9.affine:40.8794 tdnnf10.linear:9.98634 tdnnf10.affine:41.0116 tdnnf11.linear:9.99587 tdnnf11.affine:41.4771 tdnnf12.linear:9.97906 tdnnf12.affine:40.835 tdnnf13.linear:9.89146 tdnnf13.affine:40.6842 prefinal-l:13.7824 prefinal-chain.affine:40.9993 prefinal-chain.linear:14.0524 output.affine:6.34534 prefinal-xent.affine:40.4156 prefinal-xent.linear:13.8165 output-xent.affine:14.3896 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0114844 tdnnf2.linear:0.0488956 tdnnf2.affine:0.0113096 tdnnf3.linear:0.0363621 tdnnf3.affine:0.0105862 tdnnf4.linear:0.0313639 tdnnf4.affine:0.0102114 tdnnf5.linear:0.0228763 tdnnf5.affine:0.00991051 tdnnf6.linear:0.0282467 tdnnf6.affine:0.0100743 tdnnf7.linear:0.0274264 tdnnf7.affine:0.0100117 tdnnf8.linear:0.0260799 tdnnf8.affine:0.009975 tdnnf9.linear:0.0251582 tdnnf9.affine:0.00997588 tdnnf10.linear:0.0248231 tdnnf10.affine:0.0099661 tdnnf11.linear:0.0237831 tdnnf11.affine:0.00996213 tdnnf12.linear:0.0238294 tdnnf12.affine:0.00999954 tdnnf13.linear:0.0237938 tdnnf13.affine:0.0100704 prefinal-l:0.0207735 prefinal-chain.affine:0.00997319 prefinal-chain.linear:0.0139783 output.affine:0.0786751 prefinal-xent.affine:0.0104475 prefinal-xent.linear:0.0195089 output-xent.affine:0.103258 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Mon Jul 18 19:23:15 EDT 2022, elapsed time 0 seconds
