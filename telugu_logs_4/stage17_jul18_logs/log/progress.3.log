# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/2.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
# Started at Mon Jul 18 17:30:01 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.0009892,0.01287
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.06467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.86,0.87,0.89 0.90,0.92,0.96,0.99,1.0 1.0,1.1,1.1,1.1), mean=0.958, stddev=0.0453], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.0,2.0,2.0 2.0,2.0,2.1,2.1,2.1 2.1,2.2,2.2,2.2), mean=2.07, stddev=0.0468], bias-{mean,stddev}=-0.01983,0.9474, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.17e+06, self-repaired-proportion=0.846152, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.81,1.2 1.6,2.0,2.1,3.3), mean=0.379, stddev=0.555], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.40,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.487, stddev=0.471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.05,0.08,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.115, stddev=0.0672], oderiv-count=4.71622e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47897.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.81,1.2 1.6,1.9,2.1,3.3), mean=0.376, stddev=0.551], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.12,0.14 0.16,0.18,0.19,0.28), mean=0.0608, stddev=0.0604]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.953, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.27,0.28,0.33), mean=0.238, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.06013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.87,0.87,0.89 0.91,0.92,0.96,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.961, stddev=0.0431], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.92, stddev=0.0407], bias-{mean,stddev}=0.006863,0.9416, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.1e+06, self-repaired-proportion=0.26894, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,3e-05,6e-05,0.0004 0.005,0.03,0.29,0.84,1.2 1.5,1.9,2.3,3.7), mean=0.472, stddev=0.533], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.0002,0.0004,0.003 0.02,0.10,0.51,0.88,0.97 0.99,1.0,1.0,1.0), mean=0.499, stddev=0.347], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.004,0.005,0.008,0.02,0.05 0.09,0.10,0.10,0.11), mean=0.0182, stddev=0.0243], oderiv-count=4.45485e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47385.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-05,4e-05,0.0003 0.005,0.03,0.29,0.83,1.2 1.5,1.9,2.3,3.7), mean=0.469, stddev=0.53], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.003,0.01 0.04,0.14,0.39,0.57,0.67 0.78,0.88,0.99,1.3), mean=0.378, stddev=0.238]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.956, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.28,0.28,0.33), mean=0.238, stddev=0.0171], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.06004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.87,0.88,0.89 0.90,0.92,0.96,1.0,1.0 1.0,1.1,1.1,1.1), mean=0.96, stddev=0.0434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.1), mean=1.92, stddev=0.0443], bias-{mean,stddev}=-0.006686,0.9301, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.17e+06, self-repaired-proportion=0.0893068, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.003,0.009,0.03 0.06,0.13,0.43,0.92,1.3 1.5,1.9,2.1,3.4), mean=0.56, stddev=0.498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.007,0.02,0.06 0.11,0.19,0.51,0.78,0.88 0.94,0.98,0.99,1.0), mean=0.497, stddev=0.283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.009 0.01,0.02,0.04,0.07), mean=0.00559, stddev=0.00706], oderiv-count=4.32518e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46873.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.002,0.01,0.03 0.06,0.13,0.43,0.92,1.3 1.5,1.9,2.0,3.4), mean=0.559, stddev=0.494], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.03,0.09,0.18 0.25,0.37,0.63,0.85,0.97 1.1,1.1,1.3,1.6), mean=0.619, stddev=0.277]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0212, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.959, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.28,0.29,0.37), mean=0.239, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.87,0.89 0.90,0.92,0.96,0.99,1.0 1.0,1.0,1.1,1.1), mean=0.958, stddev=0.0433], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.92, stddev=0.0422], bias-{mean,stddev}=0.01222,1.007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.0605728, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.01,0.02,0.05 0.10,0.18,0.51,1.0,1.4 1.8,2.0,2.3,3.8), mean=0.646, stddev=0.547], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.03,0.07 0.13,0.23,0.50,0.76,0.87 0.93,0.96,0.97,1.0), mean=0.501, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.005,0.007,0.01 0.01,0.02,0.03,0.11), mean=0.00621, stddev=0.00765], oderiv-count=1.49043e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15624.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.05 0.10,0.18,0.51,1.0,1.4 1.8,2.0,2.3,3.7), mean=0.644, stddev=0.543], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.17,0.26 0.36,0.49,0.77,1.0,1.1 1.2,1.4,1.5,2.2), mean=0.758, stddev=0.304]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.958, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.38,0.39,0.42), mean=0.338, stddev=0.0236], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.0848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.81,0.83,0.87 0.88,0.91,0.95,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.957, stddev=0.0622], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.6,2.6 2.6,2.7,2.7,2.8,2.8 2.8,2.8,2.8,2.9), mean=2.71, stddev=0.0596], bias-{mean,stddev}=-0.001062,0.9636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.87e+05, self-repaired-proportion=0.0457087, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.04,0.07 0.11,0.20,0.50,1.0,1.3 1.7,2.1,2.3,3.2), mean=0.645, stddev=0.529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.05,0.10 0.14,0.23,0.48,0.76,0.85 0.90,0.96,0.97,1.0), mean=0.494, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.008 0.01,0.01,0.02,0.09), mean=0.00506, stddev=0.00566], oderiv-count=1.54957e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15624.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.02,0.04,0.07 0.11,0.20,0.50,1.0,1.3 1.7,2.1,2.3,3.2), mean=0.644, stddev=0.525], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.21,0.31 0.40,0.53,0.79,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.802, stddev=0.312]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.957, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.28,0.28,0.32), mean=0.239, stddev=0.0172], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05999, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.85,0.87,0.89 0.90,0.93,0.96,0.99,1.0 1.0,1.0,1.1,1.1), mean=0.959, stddev=0.0427], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.92, stddev=0.0415], bias-{mean,stddev}=-0.02745,0.9127, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.49e+05, self-repaired-proportion=0.0339829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.04,0.08 0.14,0.23,0.53,0.99,1.3 1.6,1.9,2.0,3.5), mean=0.635, stddev=0.482], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.05,0.10 0.16,0.25,0.48,0.73,0.83 0.89,0.92,0.95,0.98), mean=0.491, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.006 0.008,0.01,0.02,0.04), mean=0.00416, stddev=0.00286], oderiv-count=1.50982e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15112.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.04,0.08 0.14,0.23,0.54,0.98,1.3 1.6,1.9,2.0,3.5), mean=0.636, stddev=0.478], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.20,0.25,0.35 0.46,0.58,0.84,1.1,1.2 1.3,1.5,1.6,1.9), mean=0.837, stddev=0.296]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.956, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.28,0.28,0.31), mean=0.238, stddev=0.0177], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06007, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.86,0.87,0.89 0.90,0.92,0.96,1.0,1.0 1.0,1.1,1.1,1.1), mean=0.96, stddev=0.0434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.1), mean=1.92, stddev=0.0419], bias-{mean,stddev}=0.01712,0.9732, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.27e+05, self-repaired-proportion=0.0360521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.05,0.08 0.12,0.22,0.52,1.1,1.4 1.7,2.1,2.4,3.4), mean=0.67, stddev=0.536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.04,0.06,0.10 0.14,0.24,0.49,0.76,0.85 0.90,0.95,0.97,0.99), mean=0.5, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.008,0.01,0.01,0.04), mean=0.00387, stddev=0.00265], oderiv-count=1.4295e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14600.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.03,0.05,0.08 0.13,0.22,0.53,1.1,1.4 1.7,2.1,2.4,3.4), mean=0.671, stddev=0.532], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.20,0.24,0.34 0.45,0.58,0.84,1.1,1.2 1.4,1.5,1.6,1.8), mean=0.851, stddev=0.311]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.956, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.27,0.28,0.32), mean=0.238, stddev=0.0177], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06001, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.87,0.89 0.91,0.92,0.96,1.0,1.0 1.0,1.1,1.1,1.1), mean=0.959, stddev=0.0433], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.1), mean=1.92, stddev=0.0414], bias-{mean,stddev}=-0.02485,0.9896, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.73e+05, self-repaired-proportion=0.036785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.03,0.05,0.08 0.13,0.22,0.55,1.0,1.4 1.7,2.2,2.4,3.0), mean=0.67, stddev=0.526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.03,0.05,0.08 0.14,0.24,0.49,0.75,0.83 0.90,0.94,0.97,0.99), mean=0.491, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.003,0.004,0.006 0.007,0.01,0.01,0.06), mean=0.00372, stddev=0.00402], oderiv-count=1.37382e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14088.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.03,0.05,0.09 0.13,0.23,0.55,1.0,1.4 1.7,2.1,2.4,3.0), mean=0.672, stddev=0.522], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.19,0.26,0.35 0.45,0.57,0.88,1.1,1.3 1.4,1.6,1.7,2.2), mean=0.871, stddev=0.331]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.953, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.27,0.28,0.32), mean=0.238, stddev=0.0181], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.86,0.87,0.89 0.90,0.93,0.96,0.99,1.0 1.0,1.0,1.1,1.1), mean=0.96, stddev=0.043], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.1), mean=1.92, stddev=0.0431], bias-{mean,stddev}=-0.01088,0.9671, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.34e+05, self-repaired-proportion=0.0301585, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.02,0.05,0.09 0.14,0.23,0.57,1.1,1.4 1.6,2.0,2.2,3.4), mean=0.684, stddev=0.508], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.06,0.09 0.14,0.25,0.50,0.74,0.83 0.88,0.93,0.96,0.99), mean=0.497, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.004,0.005 0.007,0.01,0.01,0.07), mean=0.00334, stddev=0.00328], oderiv-count=1.34464e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13576.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.03,0.05,0.09 0.15,0.24,0.58,1.1,1.4 1.6,2.0,2.2,3.3), mean=0.686, stddev=0.504], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.19,0.25,0.35 0.47,0.59,0.89,1.2,1.3 1.5,1.6,1.7,2.2), mean=0.894, stddev=0.336]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.951, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.26,0.27,0.28,0.31), mean=0.237, stddev=0.0181], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.87,0.88,0.89 0.91,0.92,0.96,0.99,1.0 1.0,1.1,1.1,1.1), mean=0.96, stddev=0.0423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.92, stddev=0.0424], bias-{mean,stddev}=0.06477,0.9716, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.71e+05, self-repaired-proportion=0.0340806, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.02,0.05,0.10 0.15,0.25,0.60,1.1,1.5 1.8,2.1,2.4,3.1), mean=0.724, stddev=0.541], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.07,0.11 0.17,0.27,0.52,0.77,0.84 0.90,0.95,0.96,0.99), mean=0.514, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.002,0.002,0.002,0.004,0.005 0.006,0.009,0.01,0.06), mean=0.00304, stddev=0.00288], oderiv-count=1.25018e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13064.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.06,0.10 0.16,0.26,0.61,1.1,1.5 1.7,2.1,2.4,3.1), mean=0.726, stddev=0.536], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.16,0.25,0.37 0.47,0.60,0.89,1.2,1.4 1.5,1.7,1.8,2.6), mean=0.903, stddev=0.348]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.953, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.26,0.28,0.28,0.32), mean=0.238, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.86,0.88,0.89 0.90,0.92,0.96,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.958, stddev=0.0438], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.0), mean=1.92, stddev=0.0402], bias-{mean,stddev}=-0.05199,0.9959, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.67e+05, self-repaired-proportion=0.0275255, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.02,0.04,0.08 0.12,0.22,0.53,1.1,1.4 1.7,2.0,2.2,3.1), mean=0.675, stddev=0.519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.03,0.06,0.10 0.15,0.23,0.48,0.73,0.83 0.89,0.92,0.95,0.99), mean=0.486, stddev=0.251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.001 0.002,0.002,0.002,0.004,0.005 0.006,0.008,0.01,0.05), mean=0.00296, stddev=0.00279], oderiv-count=1.18509e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12552.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.02,0.05,0.09 0.13,0.22,0.54,1.1,1.4 1.7,2.0,2.1,3.0), mean=0.679, stddev=0.515], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.17,0.25,0.33 0.42,0.59,0.88,1.2,1.3 1.5,1.6,1.8,2.7), mean=0.881, stddev=0.349]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.953, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.28,0.28,0.32), mean=0.238, stddev=0.018], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05988, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.86,0.87,0.89 0.90,0.92,0.96,0.99,1.0 1.0,1.0,1.1,1.1), mean=0.957, stddev=0.042], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.0), mean=1.92, stddev=0.0401], bias-{mean,stddev}=-0.02779,0.9683, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.92e+05, self-repaired-proportion=0.0234483, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.05,0.10 0.15,0.25,0.57,1.1,1.4 1.7,2.1,2.3,3.1), mean=0.691, stddev=0.519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.04,0.07,0.11 0.16,0.26,0.49,0.73,0.82 0.89,0.93,0.95,0.99), mean=0.49, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.001 0.001,0.002,0.002,0.003,0.004 0.005,0.007,0.009,0.04), mean=0.00257, stddev=0.00222], oderiv-count=1.17638e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12040.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.04,0.05,0.10 0.16,0.26,0.58,1.1,1.4 1.7,2.0,2.3,3.1), mean=0.697, stddev=0.514], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.20,0.26,0.38 0.47,0.60,0.89,1.2,1.3 1.4,1.6,1.7,2.0), mean=0.899, stddev=0.333]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0209, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.946, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.26,0.27,0.28,0.32), mean=0.236, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05996, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.86,0.87,0.89 0.90,0.92,0.96,0.99,1.0 1.0,1.0,1.1,1.1), mean=0.958, stddev=0.0439], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.9,1.9,1.9,2.0,2.0 2.0,2.0,2.0,2.0), mean=1.92, stddev=0.0422], bias-{mean,stddev}=-0.01499,0.9608, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.02e+05, self-repaired-proportion=0.0233294, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.05,0.09 0.14,0.25,0.55,1.1,1.4 1.7,2.0,2.2,2.8), mean=0.691, stddev=0.512], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.05,0.07,0.11 0.16,0.25,0.49,0.74,0.83 0.88,0.93,0.95,0.98), mean=0.492, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0009,0.0009,0.001 0.001,0.001,0.002,0.003,0.004 0.005,0.006,0.009,0.04), mean=0.00234, stddev=0.00205], oderiv-count=1.14195e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.05,0.10 0.15,0.26,0.57,1.1,1.4 1.7,2.0,2.2,2.8), mean=0.7, stddev=0.507], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.21,0.26,0.37 0.46,0.59,0.88,1.2,1.3 1.5,1.7,1.7,2.3), mean=0.901, stddev=0.347]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02947, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.943, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.45,0.47,0.49,0.51 0.52,0.53,0.54,0.57), mean=0.471, stddev=0.0285], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05966, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.86,0.87,0.89 0.90,0.92,0.95,0.99,1.0 1.0,1.0,1.0,1.1), mean=0.954, stddev=0.042], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.0), mean=1.91, stddev=0.0395], bias-{mean,stddev}=-0.007849,0.9794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.01e+05, self-repaired-proportion=0.0410119, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.008,0.03,0.08 0.14,0.24,0.56,1.1,1.4 1.7,2.1,2.4,3.1), mean=0.685, stddev=0.526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.02,0.06,0.10 0.16,0.26,0.48,0.74,0.84 0.90,0.95,0.96,0.99), mean=0.496, stddev=0.248], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0007,0.0008,0.0009 0.001,0.001,0.002,0.003,0.003 0.005,0.007,0.01,0.05), mean=0.00237, stddev=0.00346], oderiv-count=1.09222e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.006,0.04,0.08 0.15,0.25,0.56,1.1,1.4 1.7,2.1,2.4,3.0), mean=0.687, stddev=0.521], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.06,0.18,0.31 0.42,0.58,0.85,1.1,1.2 1.4,1.6,1.6,2.3), mean=0.851, stddev=0.326]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02939, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94,0.94 0.94,0.94,0.94,0.94), mean=0.94, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.42 0.43,0.44,0.47,0.50,0.51 0.52,0.53,0.54,0.61), mean=0.469, stddev=0.0314], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-1e-07,-1e-07,-8e-08 -5e-08,-3e-08,6e-09,4e-08,6e-08 8e-08,9e-08,1e-07,1e-07), mean=3.65e-09, stddev=4.5e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.81,0.84 0.86,0.89,0.96,1.0,1.1 1.2,1.2,1.3,1.4), mean=0.975, stddev=0.101]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=2.29564e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.003641, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0006,0.001,0.003 0.004,0.007,0.02,0.07,0.11 0.14,0.15,0.16,0.21), mean=0.0397, stddev=0.0426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.18,0.19,0.21,0.22 0.22,0.23,0.24,0.25), mean=0.192, stddev=0.021], bias-{mean,stddev}=3.673e-06,0.01267, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.87,0.89 0.90,0.92,0.96,0.99,1.0 1.0,1.0,1.1,1.1), mean=0.958, stddev=0.0426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.1), mean=1.92, stddev=0.0419], bias-{mean,stddev}=-0.003243,0.9527, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.04e+05, self-repaired-proportion=0.0268461, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.02,0.03,0.08 0.13,0.25,0.55,1.0,1.4 1.7,2.1,2.3,3.4), mean=0.675, stddev=0.512], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.04,0.06,0.11 0.16,0.26,0.49,0.73,0.83 0.90,0.94,0.96,0.98), mean=0.497, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0002 0.0002,0.0002,0.0003,0.0005,0.0006 0.0008,0.001,0.002,0.009), mean=0.000381, stddev=0.000414], oderiv-count=1.12448e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.04,0.08 0.13,0.26,0.56,1.1,1.4 1.7,2.1,2.3,3.4), mean=0.679, stddev=0.507], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.15,0.20,0.31 0.41,0.57,0.87,1.1,1.3 1.4,1.5,1.6,2.0), mean=0.85, stddev=0.322]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.29564e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02991, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.957, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.41,0.42 0.44,0.45,0.48,0.51,0.52 0.53,0.54,0.55,0.57), mean=0.477, stddev=0.0314], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11528.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-1e-07,-9e-08,-7e-08 -6e-08,-4e-08,-4e-09,3e-08,5e-08 6e-08,7e-08,9e-08,1e-07), mean=-3.57e-09, stddev=4.19e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.82,0.84 0.86,0.89,0.97,1.1,1.1 1.2,1.3,1.3,1.7), mean=0.984, stddev=0.117]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000114782, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.004674, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.006 0.007,0.007,0.01,0.06,0.13 0.18,0.25,0.28,0.41), mean=0.0412, stddev=0.0624], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.20 0.21,0.22,0.25,0.27,0.28 0.29,0.30,0.31,0.32), mean=0.247, stddev=0.0261], bias-{mean,stddev}=3.438e-09,0.02448, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-06,5e-05,0.0001 0.0001,0.0002,0.0004,0.0009,0.002 0.002,0.003,0.004,0.04), mean=0.000672, stddev=0.00104], oderiv-count=1.10221e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/2.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.660346 tdnnf2.linear:0.760917 tdnnf2.affine:0.637915 tdnnf3.linear:0.550561 tdnnf3.affine:0.59174 tdnnf4.linear:0.463396 tdnnf4.affine:0.592825 tdnnf5.linear:0.329948 tdnnf5.affine:0.566149 tdnnf6.linear:0.413246 tdnnf6.affine:0.561996 tdnnf7.linear:0.411399 tdnnf7.affine:0.577698 tdnnf8.linear:0.410556 tdnnf8.affine:0.58346 tdnnf9.linear:0.41688 tdnnf9.affine:0.580317 tdnnf10.linear:0.4263 tdnnf10.affine:0.585646 tdnnf11.linear:0.431426 tdnnf11.affine:0.595437 tdnnf12.linear:0.454634 tdnnf12.affine:0.594668 tdnnf13.linear:0.480141 tdnnf13.affine:0.603231 prefinal-l:0.584849 prefinal-chain.affine:0.625167 prefinal-chain.linear:0.475799 output.affine:1.46924 prefinal-xent.affine:0.587403 prefinal-xent.linear:0.358135 output-xent.affine:2.429 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:43.1466 tdnnf2.linear:10.7818 tdnnf2.affine:43.0798 tdnnf3.linear:10.8204 tdnnf3.affine:42.7887 tdnnf4.linear:10.8522 tdnnf4.affine:44.4993 tdnnf5.linear:10.8358 tdnnf5.affine:43.514 tdnnf6.linear:10.826 tdnnf6.affine:42.3936 tdnnf7.linear:10.8107 tdnnf7.affine:43.7711 tdnnf8.linear:10.8146 tdnnf8.affine:44.1299 tdnnf9.linear:10.7814 tdnnf9.affine:43.6263 tdnnf10.linear:10.7647 tdnnf10.affine:43.7708 tdnnf11.linear:10.7787 tdnnf11.affine:44.2741 tdnnf12.linear:10.7809 tdnnf12.affine:43.5974 tdnnf13.linear:10.7017 tdnnf13.affine:43.4499 prefinal-l:15.0904 prefinal-chain.affine:43.764 prefinal-chain.linear:15.0476 output.affine:3.16817 prefinal-xent.affine:43.2526 prefinal-xent.linear:15.3114 output-xent.affine:4.18162 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0151071 tdnnf2.linear:0.0694208 tdnnf2.affine:0.0146133 tdnnf3.linear:0.0501144 tdnnf3.affine:0.0136522 tdnnf4.linear:0.0420571 tdnnf4.affine:0.0131543 tdnnf5.linear:0.0299753 tdnnf5.affine:0.0128472 tdnnf6.linear:0.03757 tdnnf6.affine:0.0130896 tdnnf7.linear:0.0374478 tdnnf7.affine:0.0130319 tdnnf8.linear:0.037344 tdnnf8.affine:0.0130546 tdnnf9.linear:0.0380248 tdnnf9.affine:0.0131337 tdnnf10.linear:0.0389213 tdnnf10.affine:0.0132099 tdnnf11.linear:0.0393318 tdnnf11.affine:0.0132778 tdnnf12.linear:0.0414043 tdnnf12.affine:0.0134652 tdnnf13.linear:0.0440144 tdnnf13.affine:0.0137042 prefinal-l:0.0378977 prefinal-chain.affine:0.0140977 prefinal-chain.linear:0.0310108 output.affine:0.705695 prefinal-xent.affine:0.0134036 prefinal-xent.linear:0.022937 output-xent.affine:1.24023 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Mon Jul 18 17:30:02 EDT 2022, elapsed time 1 seconds
