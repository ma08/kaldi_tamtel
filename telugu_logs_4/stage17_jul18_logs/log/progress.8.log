# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/8.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/7.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/8.mdl 
# Started at Mon Jul 18 17:39:43 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/8.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.0009892,0.01287
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.06107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.81,0.82,0.84 0.85,0.87,0.90,0.94,0.96 0.98,1.0,1.0,1.1), mean=0.905, stddev=0.0434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.0,2.1,2.1), mean=1.95, stddev=0.0455], bias-{mean,stddev}=-0.01856,0.8961, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.38e+06, self-repaired-proportion=0.847054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.76,1.2 1.5,1.8,2.0,3.2), mean=0.358, stddev=0.524], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.43,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.488, stddev=0.471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.08,0.13,0.28,0.29 0.30,0.31,0.32,0.36), mean=0.175, stddev=0.098], oderiv-count=4.6983e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46912.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.76,1.1 1.5,1.8,2.0,3.1), mean=0.356, stddev=0.521], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.11,0.13 0.15,0.17,0.19,0.27), mean=0.0586, stddev=0.058]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.902, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.26,0.26,0.32), mean=0.225, stddev=0.0167], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05688, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.82,0.83,0.84 0.86,0.87,0.91,0.94,0.96 0.98,0.99,1.0,1.0), mean=0.909, stddev=0.041], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.82, stddev=0.0387], bias-{mean,stddev}=0.007098,0.8872, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.15e+06, self-repaired-proportion=0.272777, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,9e-06,2e-05,9e-05 0.004,0.04,0.27,0.80,1.1 1.4,1.8,2.2,3.5), mean=0.442, stddev=0.502], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,6e-05,0.0002,0.0008 0.02,0.10,0.51,0.89,0.97 0.99,1.0,1.0,1.0), mean=0.5, stddev=0.349], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.007 0.008,0.009,0.01,0.03,0.09 0.15,0.16,0.16,0.17), mean=0.0304, stddev=0.0404], oderiv-count=4.54867e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46400.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,6e-06,2e-05,9e-05 0.004,0.04,0.27,0.79,1.1 1.4,1.8,2.2,3.5), mean=0.44, stddev=0.499], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.001,0.002,0.005 0.04,0.14,0.36,0.53,0.62 0.72,0.81,0.89,1.2), mean=0.352, stddev=0.217]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.902, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.21,0.22,0.24,0.24 0.25,0.26,0.27,0.31), mean=0.225, stddev=0.0163], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.83,0.84 0.86,0.87,0.91,0.94,0.96 0.98,1.0,1.0,1.0), mean=0.908, stddev=0.0413], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,2.0), mean=1.82, stddev=0.042], bias-{mean,stddev}=-0.006008,0.8786, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.28e+06, self-repaired-proportion=0.081287, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.0003,0.009,0.04 0.07,0.12,0.40,0.87,1.2 1.5,1.7,1.9,3.2), mean=0.532, stddev=0.467], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.001,0.02,0.06 0.11,0.20,0.50,0.78,0.88 0.94,0.97,0.99,1.0), mean=0.497, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.004,0.005,0.006,0.01,0.01 0.02,0.03,0.10,0.13), mean=0.00964, stddev=0.0136], oderiv-count=4.45478e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45888.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.0003,0.008,0.04 0.07,0.12,0.40,0.87,1.2 1.4,1.7,1.9,3.2), mean=0.529, stddev=0.465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.01,0.08,0.20 0.26,0.36,0.59,0.81,0.92 0.99,1.1,1.2,1.5), mean=0.594, stddev=0.255]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01997, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.904, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.21,0.22,0.24,0.25 0.25,0.26,0.27,0.34), mean=0.225, stddev=0.0165], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.81,0.82,0.84 0.85,0.87,0.91,0.94,0.96 0.97,0.99,1.0,1.1), mean=0.906, stddev=0.0411], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.81, stddev=0.0399], bias-{mean,stddev}=0.01202,0.9532, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.93e+05, self-repaired-proportion=0.0614816, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.02,0.03,0.06 0.10,0.18,0.48,0.97,1.3 1.7,1.9,2.2,3.5), mean=0.613, stddev=0.514], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.04,0.07 0.12,0.23,0.50,0.77,0.87 0.93,0.96,0.98,1.0), mean=0.502, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.006,0.008,0.01,0.02 0.02,0.03,0.04,0.20), mean=0.0112, stddev=0.0158], oderiv-count=1.4807e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15296.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.02,0.03,0.06 0.10,0.17,0.48,0.96,1.3 1.7,1.9,2.2,3.5), mean=0.609, stddev=0.512], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.12,0.19,0.28 0.36,0.47,0.72,0.95,1.1 1.2,1.3,1.4,1.9), mean=0.722, stddev=0.278]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02809, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.899, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.30,0.32,0.34,0.34 0.35,0.36,0.37,0.39), mean=0.317, stddev=0.0223], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.08022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.77,0.78,0.82 0.83,0.86,0.90,0.95,0.98 1.0,1.0,1.0,1.1), mean=0.906, stddev=0.059], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.4,2.5,2.5,2.5 2.5,2.5,2.6,2.6,2.6 2.7,2.7,2.7,2.7), mean=2.57, stddev=0.0564], bias-{mean,stddev}=-0.0006833,0.9122, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.93e+05, self-repaired-proportion=0.0498374, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.04,0.08 0.11,0.19,0.47,0.98,1.3 1.6,2.0,2.2,3.0), mean=0.609, stddev=0.497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.02,0.05,0.09 0.14,0.24,0.48,0.76,0.85 0.91,0.96,0.98,1.0), mean=0.494, stddev=0.259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.007,0.01,0.01 0.02,0.02,0.04,0.20), mean=0.00926, stddev=0.0123], oderiv-count=1.54758e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15296.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.01,0.04,0.07 0.11,0.19,0.46,0.97,1.2 1.6,2.0,2.2,3.0), mean=0.605, stddev=0.495], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.10,0.21,0.31 0.40,0.51,0.75,1.0,1.2 1.2,1.4,1.4,1.7), mean=0.759, stddev=0.293]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01987, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.899, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.22,0.24,0.24 0.25,0.26,0.26,0.30), mean=0.224, stddev=0.0161], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05675, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.80,0.82,0.84 0.86,0.88,0.91,0.94,0.96 0.97,0.99,1.0,1.0), mean=0.907, stddev=0.0405], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.82, stddev=0.0393], bias-{mean,stddev}=-0.02567,0.8641, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.0290593, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.05,0.08 0.14,0.23,0.52,0.94,1.2 1.5,1.7,1.9,3.3), mean=0.608, stddev=0.453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.05,0.10 0.16,0.25,0.48,0.73,0.83 0.88,0.92,0.94,0.99), mean=0.491, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.14), mean=0.00734, stddev=0.00677], oderiv-count=1.42982e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14784.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.05,0.08 0.14,0.23,0.52,0.94,1.2 1.5,1.7,1.9,3.3), mean=0.604, stddev=0.45], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.20,0.26,0.37 0.45,0.56,0.81,1.0,1.1 1.3,1.4,1.5,1.8), mean=0.805, stddev=0.276]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01984, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.898, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.24 0.25,0.26,0.26,0.29), mean=0.224, stddev=0.0166], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05682, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.82,0.82,0.84 0.85,0.87,0.91,0.94,0.96 0.98,0.99,1.0,1.0), mean=0.908, stddev=0.0412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.82, stddev=0.0397], bias-{mean,stddev}=0.01653,0.9213, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.33e+05, self-repaired-proportion=0.0379982, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.04,0.05,0.09 0.13,0.22,0.50,1.0,1.3 1.6,2.0,2.2,3.2), mean=0.645, stddev=0.503], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.06,0.10 0.15,0.25,0.50,0.75,0.84 0.90,0.95,0.97,0.99), mean=0.5, stddev=0.252], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.006,0.008,0.01 0.01,0.02,0.02,0.12), mean=0.00676, stddev=0.00603], oderiv-count=1.43712e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14272.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.05,0.09 0.13,0.22,0.50,1.0,1.3 1.6,2.0,2.2,3.2), mean=0.641, stddev=0.5], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.21,0.25,0.36 0.44,0.57,0.81,1.1,1.2 1.3,1.4,1.5,1.7), mean=0.822, stddev=0.291]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01983, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.897, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.20 0.21,0.21,0.22,0.24,0.24 0.25,0.26,0.26,0.30), mean=0.224, stddev=0.0166], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05675, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.81,0.83,0.84 0.86,0.87,0.90,0.94,0.96 0.98,1.0,1.0,1.1), mean=0.907, stddev=0.0411], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.8 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.82, stddev=0.0392], bias-{mean,stddev}=-0.02323,0.9369, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.87e+05, self-repaired-proportion=0.0377109, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.05,0.08 0.14,0.22,0.52,0.98,1.3 1.6,2.0,2.3,2.9), mean=0.641, stddev=0.494], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.05,0.09 0.15,0.26,0.49,0.73,0.83 0.89,0.95,0.97,0.99), mean=0.49, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.004,0.005,0.008,0.009 0.01,0.02,0.02,0.12), mean=0.00663, stddev=0.00956], oderiv-count=1.35392e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13760.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.05,0.08 0.14,0.22,0.52,0.97,1.3 1.6,2.0,2.3,2.9), mean=0.637, stddev=0.491], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.19,0.27,0.36 0.44,0.56,0.84,1.1,1.2 1.4,1.5,1.6,2.1), mean=0.835, stddev=0.311]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01977, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.894, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.24 0.25,0.26,0.27,0.30), mean=0.223, stddev=0.0169], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05679, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.81,0.82,0.84 0.86,0.87,0.91,0.94,0.96 0.98,0.99,1.0,1.0), mean=0.908, stddev=0.0409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.82, stddev=0.0407], bias-{mean,stddev}=-0.009905,0.9156, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.23e+05, self-repaired-proportion=0.0268721, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.05,0.09 0.14,0.24,0.55,1.0,1.3 1.5,1.9,2.1,3.2), mean=0.655, stddev=0.477], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.04,0.06,0.10 0.16,0.26,0.50,0.74,0.82 0.88,0.93,0.95,0.99), mean=0.496, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.005,0.007,0.009 0.01,0.01,0.02,0.13), mean=0.00572, stddev=0.00661], oderiv-count=1.2681e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13248.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.05,0.09 0.14,0.24,0.55,1.0,1.3 1.5,1.9,2.1,3.2), mean=0.65, stddev=0.474], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.19,0.27,0.35 0.45,0.57,0.84,1.1,1.2 1.4,1.5,1.6,2.1), mean=0.846, stddev=0.309]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01971, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.892, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.20 0.20,0.21,0.22,0.24,0.24 0.25,0.26,0.26,0.29), mean=0.222, stddev=0.017], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05676, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.83,0.84 0.86,0.87,0.91,0.94,0.96 0.97,1.0,1.0,1.0), mean=0.907, stddev=0.0401], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.82, stddev=0.0401], bias-{mean,stddev}=0.06181,0.9199, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.95e+05, self-repaired-proportion=0.0270097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.06,0.10 0.15,0.25,0.57,1.1,1.4 1.7,2.0,2.3,2.9), mean=0.692, stddev=0.507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.05,0.06,0.12 0.17,0.28,0.51,0.76,0.84 0.89,0.94,0.96,0.99), mean=0.512, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.008 0.009,0.01,0.01,0.12), mean=0.00505, stddev=0.00533], oderiv-count=1.23219e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12736.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.03,0.06,0.10 0.15,0.25,0.57,1.1,1.4 1.6,2.0,2.3,2.9), mean=0.688, stddev=0.505], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.23,0.28,0.37 0.46,0.58,0.85,1.1,1.3 1.4,1.5,1.7,2.4), mean=0.859, stddev=0.318]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01973, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.893, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.22,0.23,0.24 0.25,0.26,0.27,0.30), mean=0.223, stddev=0.0164], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05667, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.83,0.84 0.85,0.87,0.91,0.94,0.96 0.97,0.99,1.0,1.1), mean=0.906, stddev=0.0416], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.81, stddev=0.0382], bias-{mean,stddev}=-0.04867,0.9429, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.76e+05, self-repaired-proportion=0.0230242, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.03,0.06,0.10 0.13,0.23,0.52,1.0,1.4 1.6,1.9,2.0,2.9), mean=0.655, stddev=0.487], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.07,0.11 0.16,0.24,0.48,0.72,0.82 0.87,0.92,0.94,0.99), mean=0.484, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.003,0.004,0.006,0.007 0.009,0.01,0.01,0.10), mean=0.00491, stddev=0.00661], oderiv-count=1.23168e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12224.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.03,0.06,0.10 0.13,0.23,0.52,1.0,1.3 1.6,1.9,2.0,2.9), mean=0.651, stddev=0.485], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.24,0.28,0.36 0.44,0.56,0.84,1.1,1.2 1.4,1.5,1.6,2.3), mean=0.846, stddev=0.317]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0197, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.891, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.24 0.25,0.26,0.27,0.30), mean=0.222, stddev=0.0168], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05658, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.82,0.84 0.85,0.87,0.90,0.94,0.96 0.97,0.99,1.0,1.0), mean=0.904, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.81, stddev=0.0379], bias-{mean,stddev}=-0.02566,0.9167, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.57e+05, self-repaired-proportion=0.0157717, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.06,0.11 0.16,0.25,0.56,1.0,1.4 1.6,1.9,2.1,2.9), mean=0.67, stddev=0.486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.05,0.08,0.11 0.17,0.27,0.49,0.71,0.82 0.89,0.93,0.94,0.99), mean=0.489, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.006 0.007,0.009,0.01,0.08), mean=0.00418, stddev=0.00491], oderiv-count=1.19763e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11712.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.06,0.11 0.16,0.25,0.55,1.0,1.4 1.6,1.9,2.1,2.9), mean=0.665, stddev=0.484], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.24,0.30,0.38 0.47,0.58,0.85,1.1,1.2 1.3,1.5,1.6,1.8), mean=0.856, stddev=0.3]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01952, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.884, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.19,0.20 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.26,0.30), mean=0.22, stddev=0.0167], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05663, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.82,0.84 0.85,0.87,0.91,0.94,0.96 0.97,0.99,1.0,1.1), mean=0.905, stddev=0.0417], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.81, stddev=0.04], bias-{mean,stddev}=-0.0133,0.9095, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.91e+05, self-repaired-proportion=0.0165829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.05,0.07,0.10 0.17,0.27,0.56,1.1,1.4 1.6,1.9,2.1,2.6), mean=0.683, stddev=0.477], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.06,0.09,0.13 0.19,0.27,0.47,0.71,0.80 0.86,0.91,0.94,0.98), mean=0.491, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.007,0.008,0.01,0.07), mean=0.00363, stddev=0.00344], oderiv-count=1.11411e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11200.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.05,0.07,0.10 0.17,0.27,0.55,1.1,1.4 1.6,1.9,2.1,2.6), mean=0.679, stddev=0.475], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.27,0.30,0.39 0.47,0.60,0.86,1.1,1.3 1.4,1.5,1.6,2.0), mean=0.87, stddev=0.311]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02724, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87), mean=0.872, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.435, stddev=0.0267], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05639, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.82,0.84 0.85,0.87,0.90,0.94,0.95 0.96,0.98,0.99,1.0), mean=0.901, stddev=0.0398], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.8 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.0375], bias-{mean,stddev}=-0.007263,0.9272, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.94e+05, self-repaired-proportion=0.0341555, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.007,0.03,0.08 0.14,0.23,0.54,1.0,1.3 1.6,2.0,2.3,2.9), mean=0.652, stddev=0.495], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.06,0.12 0.17,0.27,0.49,0.73,0.83 0.89,0.94,0.96,0.99), mean=0.497, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.002 0.002,0.002,0.003,0.004,0.005 0.007,0.01,0.02,0.07), mean=0.00386, stddev=0.00572], oderiv-count=1.14618e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11200.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.006,0.03,0.08 0.14,0.23,0.53,1.0,1.3 1.6,2.0,2.3,2.9), mean=0.648, stddev=0.493], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.05,0.20,0.30 0.41,0.54,0.78,1.0,1.2 1.3,1.4,1.5,1.9), mean=0.785, stddev=0.298]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02771, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89,0.89 0.89,0.89,0.89,0.89), mean=0.887, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.50,0.51,0.57), mean=0.442, stddev=0.03], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11200.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-1e-07,-8e-08,-6e-08 -5e-08,-3e-08,2e-09,3e-08,5e-08 7e-08,8e-08,9e-08,1e-07), mean=1.49e-09, stddev=3.99e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.73,0.76,0.77 0.81,0.83,0.89,0.98,1.0 1.1,1.1,1.2,1.3), mean=0.906, stddev=0.0949]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=1.85486e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.006972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.001,0.003,0.007 0.01,0.02,0.07,0.15,0.19 0.21,0.24,0.25,0.32), mean=0.088, stddev=0.0686], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.31 0.33,0.34,0.37,0.40,0.41 0.42,0.43,0.44,0.45), mean=0.369, stddev=0.0334], bias-{mean,stddev}=8.05e-06,0.02225, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05642, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.81,0.82,0.84 0.85,0.87,0.90,0.94,0.95 0.97,0.99,1.0,1.0), mean=0.902, stddev=0.0408], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.8, stddev=0.0394], bias-{mean,stddev}=-0.002388,0.9016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.21e+05, self-repaired-proportion=0.0295276, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.03,0.05,0.10 0.15,0.25,0.53,0.99,1.3 1.6,1.9,2.1,3.2), mean=0.652, stddev=0.475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.04,0.07,0.11 0.18,0.27,0.49,0.71,0.81 0.89,0.94,0.96,0.99), mean=0.491, stddev=0.233], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0005,0.0005 0.0006,0.0007,0.0009,0.001,0.002 0.002,0.003,0.005,0.02), mean=0.00118, stddev=0.00153], oderiv-count=1.08077e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11200.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.03,0.05,0.10 0.15,0.24,0.52,0.99,1.3 1.6,1.9,2.1,3.2), mean=0.648, stddev=0.472], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.16,0.24,0.33 0.44,0.55,0.81,1.0,1.2 1.3,1.4,1.4,1.7), mean=0.808, stddev=0.288]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=1.85486e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.02738, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.876, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.48 0.49,0.50,0.50,0.52), mean=0.437, stddev=0.0296], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11200.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-9e-08,-8e-08,-7e-08 -5e-08,-3e-08,-1e-09,3e-08,6e-08 7e-08,8e-08,1e-07,1e-07), mean=8.99e-10, stddev=4.21e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.80,0.82 0.84,0.87,0.92,1.0,1.1 1.1,1.2,1.2,1.5), mean=0.944, stddev=0.1]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=9.27428e-05, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.01525, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.05,0.29,0.50 0.59,0.66,0.69,0.86), mean=0.152, stddev=0.19], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.58,0.62 0.67,0.73,0.81,0.89,0.92 0.95,0.97,0.98,1.0), mean=0.804, stddev=0.0956], bias-{mean,stddev}=8.338e-09,0.05617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-06,4e-05,9e-05 0.0001,0.0002,0.0005,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000845, stddev=0.00117], oderiv-count=1.09792e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/7.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/8.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.49179 tdnnf2.linear:0.521672 tdnnf2.affine:0.482698 tdnnf3.linear:0.387816 tdnnf3.affine:0.44936 tdnnf4.linear:0.336625 tdnnf4.affine:0.451868 tdnnf5.linear:0.244828 tdnnf5.affine:0.428601 tdnnf6.linear:0.303389 tdnnf6.affine:0.424678 tdnnf7.linear:0.291755 tdnnf7.affine:0.435753 tdnnf8.linear:0.280884 tdnnf8.affine:0.438128 tdnnf9.linear:0.270922 tdnnf9.affine:0.433229 tdnnf10.linear:0.267489 tdnnf10.affine:0.434157 tdnnf11.linear:0.258993 tdnnf11.affine:0.439312 tdnnf12.linear:0.258336 tdnnf12.affine:0.43475 tdnnf13.linear:0.260306 tdnnf13.affine:0.436564 prefinal-l:0.318426 prefinal-chain.affine:0.435248 prefinal-chain.linear:0.216893 output.affine:0.553433 prefinal-xent.affine:0.452507 prefinal-xent.linear:0.296092 output-xent.affine:1.56855 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:40.7759 tdnnf2.linear:10.2017 tdnnf2.affine:40.6733 tdnnf3.linear:10.2088 tdnnf3.affine:40.4503 tdnnf4.linear:10.2241 tdnnf4.affine:42.104 tdnnf5.linear:10.169 tdnnf5.affine:41.1777 tdnnf6.linear:10.1712 tdnnf6.affine:40.1172 tdnnf7.linear:10.1583 tdnnf7.affine:41.4215 tdnnf8.linear:10.1528 tdnnf8.affine:41.759 tdnnf9.linear:10.1199 tdnnf9.affine:41.2797 tdnnf10.linear:10.0906 tdnnf10.affine:41.413 tdnnf11.linear:10.0993 tdnnf11.affine:41.8884 tdnnf12.linear:10.0845 tdnnf12.affine:41.2357 tdnnf13.linear:9.99586 tdnnf13.affine:41.0851 prefinal-l:13.9478 prefinal-chain.affine:41.3998 prefinal-chain.linear:14.1851 output.affine:6.0452 prefinal-xent.affine:40.825 prefinal-xent.linear:14.0206 output-xent.affine:13.3016 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0119365 tdnnf2.linear:0.050673 tdnnf2.affine:0.011743 tdnnf3.linear:0.0376094 tdnnf3.affine:0.010995 tdnnf4.linear:0.0325807 tdnnf4.affine:0.0106237 tdnnf5.linear:0.0238103 tdnnf5.affine:0.0103036 tdnnf6.linear:0.0295048 tdnnf6.affine:0.0104793 tdnnf7.linear:0.0284133 tdnnf7.affine:0.010414 tdnnf8.linear:0.0273679 tdnnf8.affine:0.0103861 tdnnf9.linear:0.0264838 tdnnf9.affine:0.0103892 tdnnf10.linear:0.0262194 tdnnf10.affine:0.0103779 tdnnf11.linear:0.0253641 tdnnf11.affine:0.0103818 tdnnf12.linear:0.0253326 tdnnf12.affine:0.0104364 tdnnf13.linear:0.0257507 tdnnf13.affine:0.010518 prefinal-l:0.0225377 prefinal-chain.affine:0.0104075 prefinal-chain.linear:0.0151389 output.affine:0.0972536 prefinal-xent.affine:0.0109684 prefinal-xent.linear:0.0207951 output-xent.affine:0.130419 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Mon Jul 18 17:39:43 EDT 2022, elapsed time 0 seconds
