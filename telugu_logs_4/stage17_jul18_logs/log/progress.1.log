# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/0.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
# Started at Mon Jul 18 18:59:08 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005757, bias-{mean,stddev}=-0.001083,0.01285
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.06646, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.89,0.90,0.91 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.985, stddev=0.0463], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.0,2.0,2.0,2.0 2.1,2.1,2.1,2.2,2.2 2.2,2.2,2.2,2.3), mean=2.13, stddev=0.0472], bias-{mean,stddev}=-0.02036,0.9723, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.07e+06, self-repaired-proportion=0.84689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.83,1.3 1.6,2.0,2.2,3.4), mean=0.389, stddev=0.569], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.41,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.488, stddev=0.471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.01 0.01,0.02,0.03,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0398, stddev=0.0231], oderiv-count=4.73027e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=23228.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.82,1.2 1.6,2.0,2.2,3.4), mean=0.386, stddev=0.566], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,0.12,0.14 0.17,0.19,0.20,0.28), mean=0.0619, stddev=0.062]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02182, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.987, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.28,0.28,0.29,0.34), mean=0.246, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.06177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.89,0.90,0.92 0.93,0.95,0.99,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.987, stddev=0.044], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.98, stddev=0.0417], bias-{mean,stddev}=0.006773,0.9676, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.09e+06, self-repaired-proportion=0.265684, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,0.0001,0.0002,0.001 0.007,0.03,0.30,0.85,1.2 1.6,2.0,2.4,3.8), mean=0.483, stddev=0.549], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.0006,0.001,0.006 0.03,0.10,0.51,0.89,0.97 0.99,1.0,1.0,1.0), mean=0.5, stddev=0.347], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0009,0.001,0.001 0.001,0.002,0.002,0.007,0.02 0.02,0.03,0.03,0.03), mean=0.00551, stddev=0.007], oderiv-count=4.6776e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=22972.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-16,6e-05,0.0001,0.001 0.006,0.03,0.30,0.85,1.2 1.6,2.0,2.4,3.8), mean=0.48, stddev=0.545], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,0.004,0.006,0.02 0.05,0.13,0.40,0.59,0.69 0.78,0.89,0.99,1.3), mean=0.383, stddev=0.244]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02182, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.988, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.27,0.29,0.29,0.34), mean=0.246, stddev=0.0176], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.06164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.91 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.985, stddev=0.0444], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.97, stddev=0.0455], bias-{mean,stddev}=-0.007148,0.955, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.07e+06, self-repaired-proportion=0.0911544, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.004,0.008,0.03 0.05,0.12,0.42,0.93,1.3 1.6,1.9,2.1,3.5), mean=0.562, stddev=0.512], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.009,0.02,0.06 0.10,0.19,0.51,0.79,0.89 0.95,0.97,0.99,1.0), mean=0.499, stddev=0.286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0006,0.0006 0.0007,0.0008,0.001,0.002,0.003 0.004,0.007,0.01,0.02), mean=0.00162, stddev=0.00181], oderiv-count=4.66896e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=22716.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.004,0.009,0.03 0.06,0.12,0.42,0.93,1.3 1.6,1.9,2.1,3.5), mean=0.559, stddev=0.509], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.06,0.09,0.15 0.22,0.34,0.62,0.84,0.94 1.0,1.1,1.3,1.6), mean=0.602, stddev=0.277]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.99, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.28,0.29,0.29,0.38), mean=0.247, stddev=0.0181], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.06153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.88,0.89,0.91 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.2), mean=0.983, stddev=0.0443], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.0,2.1,2.1), mean=1.97, stddev=0.0433], bias-{mean,stddev}=0.01228,1.033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.0753158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.01,0.02,0.04 0.08,0.17,0.49,1.0,1.4 1.8,2.1,2.4,3.9), mean=0.639, stddev=0.561], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.03,0.06 0.12,0.22,0.50,0.77,0.88 0.94,0.96,0.97,1.0), mean=0.503, stddev=0.273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0007,0.0008 0.0008,0.0009,0.001,0.002,0.003 0.004,0.006,0.009,0.03), mean=0.00175, stddev=0.00179], oderiv-count=1.51664e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7572.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.02,0.04 0.08,0.16,0.49,1.0,1.4 1.8,2.1,2.4,3.8), mean=0.64, stddev=0.558], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.15,0.22 0.32,0.45,0.74,0.98,1.1 1.2,1.3,1.4,2.1), mean=0.727, stddev=0.301]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.03092, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.99, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.31 0.32,0.33,0.35,0.37,0.38 0.39,0.40,0.41,0.43), mean=0.349, stddev=0.0243], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.08706, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.84,0.85,0.89 0.91,0.93,0.98,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.983, stddev=0.0637], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.7,2.7,2.7,2.7 2.7,2.7,2.8,2.8,2.9 2.9,2.9,2.9,2.9), mean=2.79, stddev=0.0611], bias-{mean,stddev}=-0.001314,0.9885, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.0483588, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.07 0.10,0.18,0.49,1.0,1.3 1.8,2.2,2.4,3.3), mean=0.638, stddev=0.541], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.10 0.14,0.23,0.48,0.77,0.86 0.91,0.96,0.98,1.0), mean=0.497, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0006 0.0007,0.0008,0.001,0.002,0.002 0.003,0.004,0.006,0.01), mean=0.00132, stddev=0.00107], oderiv-count=1.49757e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7572.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.04,0.06 0.10,0.19,0.49,1.0,1.4 1.8,2.2,2.4,3.3), mean=0.638, stddev=0.538], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.14,0.19,0.29 0.37,0.50,0.77,1.0,1.2 1.3,1.3,1.4,1.7), mean=0.768, stddev=0.296]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.989, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.28,0.28,0.29,0.33), mean=0.247, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06159, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.87,0.89,0.91 0.93,0.95,0.99,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.985, stddev=0.0437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.97, stddev=0.0426], bias-{mean,stddev}=-0.02842,0.9363, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.45e+05, self-repaired-proportion=0.0346105, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.03,0.08 0.12,0.21,0.50,0.99,1.3 1.6,1.9,2.1,3.6), mean=0.623, stddev=0.495], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.10 0.15,0.25,0.48,0.74,0.83 0.89,0.92,0.94,0.99), mean=0.492, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0005,0.0006 0.0006,0.0007,0.0009,0.001,0.002 0.002,0.004,0.004,0.008), mean=0.00113, stddev=0.000753], oderiv-count=1.44317e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7316.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.03,0.08 0.13,0.21,0.51,0.99,1.3 1.6,1.9,2.1,3.5), mean=0.625, stddev=0.492], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.20,0.32 0.43,0.54,0.81,1.0,1.2 1.3,1.4,1.5,1.7), mean=0.798, stddev=0.288]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.988, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.27,0.28,0.29,0.32), mean=0.246, stddev=0.0183], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.89,0.89,0.91 0.93,0.95,0.99,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.986, stddev=0.0445], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.97, stddev=0.0431], bias-{mean,stddev}=0.01731,0.9983, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.56e+05, self-repaired-proportion=0.0449341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.06 0.11,0.20,0.50,1.0,1.4 1.7,2.2,2.4,3.5), mean=0.657, stddev=0.55], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.09 0.13,0.23,0.50,0.77,0.86 0.91,0.96,0.97,0.99), mean=0.502, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0005,0.0005 0.0006,0.0006,0.0008,0.001,0.002 0.002,0.003,0.003,0.006), mean=0.00101, stddev=0.000637], oderiv-count=1.42858e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7060.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.03,0.05,0.06 0.11,0.20,0.50,1.0,1.4 1.7,2.2,2.4,3.5), mean=0.657, stddev=0.547], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.23,0.30 0.39,0.54,0.81,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.804, stddev=0.299]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02186, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.989, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.27,0.28,0.29,0.33), mean=0.247, stddev=0.0183], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.88,0.90,0.92 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.985, stddev=0.0444], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.97, stddev=0.0426], bias-{mean,stddev}=-0.02577,1.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.3e+05, self-repaired-proportion=0.0472675, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.06 0.11,0.20,0.51,1.0,1.4 1.7,2.2,2.4,3.1), mean=0.652, stddev=0.539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.03,0.04,0.07 0.13,0.23,0.49,0.76,0.85 0.90,0.95,0.97,0.99), mean=0.494, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0004,0.0005 0.0005,0.0006,0.0007,0.001,0.001 0.002,0.003,0.004,0.01), mean=0.000941, stddev=0.000804], oderiv-count=1.39539e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6804.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.03,0.07 0.12,0.20,0.52,1.0,1.4 1.7,2.2,2.4,3.1), mean=0.654, stddev=0.536], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.16,0.21,0.32 0.41,0.54,0.84,1.1,1.2 1.3,1.5,1.6,2.0), mean=0.825, stddev=0.316]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.987, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.22 0.22,0.23,0.25,0.26,0.27 0.28,0.28,0.29,0.33), mean=0.246, stddev=0.0188], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.89,0.89,0.91 0.93,0.95,0.99,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.986, stddev=0.0441], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.2), mean=1.97, stddev=0.0442], bias-{mean,stddev}=-0.01148,0.992, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.94e+05, self-repaired-proportion=0.0426758, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.04,0.06 0.11,0.22,0.53,1.0,1.4 1.6,2.1,2.3,3.4), mean=0.656, stddev=0.522], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.04,0.05,0.08 0.13,0.24,0.50,0.76,0.85 0.90,0.95,0.96,0.99), mean=0.498, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0003,0.0004,0.0004 0.0004,0.0005,0.0006,0.001,0.001 0.002,0.003,0.003,0.008), mean=0.000835, stddev=0.000663], oderiv-count=1.29574e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6548.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.04,0.07 0.12,0.22,0.54,1.0,1.4 1.6,2.1,2.3,3.4), mean=0.661, stddev=0.519], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.17,0.20,0.31 0.42,0.55,0.85,1.1,1.2 1.4,1.6,1.7,2.2), mean=0.848, stddev=0.327]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0218, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.987, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.22 0.22,0.23,0.25,0.26,0.27 0.27,0.28,0.29,0.32), mean=0.246, stddev=0.0187], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.90,0.92 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.986, stddev=0.0434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.97, stddev=0.0436], bias-{mean,stddev}=0.06607,0.9967, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.1e+05, self-repaired-proportion=0.0418384, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.04,0.08 0.13,0.21,0.55,1.1,1.5 1.7,2.2,2.5,3.2), mean=0.696, stddev=0.556], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.06,0.10 0.15,0.24,0.53,0.80,0.87 0.92,0.96,0.97,1.0), mean=0.517, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0003,0.0003 0.0004,0.0004,0.0006,0.0009,0.001 0.002,0.002,0.003,0.01), mean=0.000756, stddev=0.000635], oderiv-count=1.2745e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6292.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.04,0.09 0.13,0.22,0.56,1.1,1.5 1.7,2.2,2.4,3.2), mean=0.701, stddev=0.553], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.17,0.22,0.33 0.43,0.57,0.86,1.1,1.3 1.5,1.6,1.8,2.7), mean=0.866, stddev=0.349]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.988, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.28,0.29,0.30,0.34), mean=0.246, stddev=0.0181], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.91 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.984, stddev=0.0448], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.97, stddev=0.0413], bias-{mean,stddev}=-0.05374,1.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.17e+05, self-repaired-proportion=0.0423265, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.05 0.09,0.18,0.49,1.1,1.4 1.7,2.0,2.2,3.1), mean=0.64, stddev=0.536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.04,0.07 0.12,0.20,0.49,0.77,0.86 0.91,0.94,0.96,0.99), mean=0.487, stddev=0.273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0003,0.0003 0.0004,0.0004,0.0005,0.0009,0.001 0.002,0.002,0.003,0.01), mean=0.000727, stddev=0.000609], oderiv-count=1.23395e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6036.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.03,0.06 0.10,0.18,0.50,1.1,1.4 1.7,2.0,2.2,3.1), mean=0.644, stddev=0.533], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.19,0.26 0.37,0.53,0.83,1.1,1.3 1.4,1.7,1.8,2.9), mean=0.831, stddev=0.362]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.99, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.22 0.23,0.23,0.25,0.26,0.27 0.28,0.29,0.30,0.33), mean=0.247, stddev=0.0187], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.91 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.984, stddev=0.043], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.0,2.1,2.1), mean=1.97, stddev=0.0412], bias-{mean,stddev}=-0.029,0.9933, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.85e+05, self-repaired-proportion=0.0386611, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.03,0.04,0.07 0.12,0.21,0.50,1.0,1.4 1.7,2.1,2.3,3.2), mean=0.65, stddev=0.535], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.09 0.13,0.22,0.49,0.76,0.86 0.91,0.95,0.97,0.99), mean=0.492, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0002,0.0003 0.0003,0.0003,0.0005,0.0007,0.001 0.001,0.002,0.002,0.006), mean=0.000585, stddev=0.000413], oderiv-count=1.17805e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5780.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.04,0.07 0.12,0.21,0.51,1.0,1.4 1.7,2.1,2.3,3.2), mean=0.656, stddev=0.532], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.18,0.21,0.33 0.42,0.55,0.85,1.1,1.3 1.5,1.7,1.8,2.2), mean=0.863, stddev=0.354]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02176, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,0.98,0.98 0.98,0.98,0.98,0.98,0.98 0.98,0.98,0.98,0.98), mean=0.985, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.22 0.22,0.23,0.25,0.26,0.27 0.28,0.28,0.29,0.33), mean=0.246, stddev=0.0185], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.06164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.88,0.90,0.91 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.985, stddev=0.0448], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.97, stddev=0.0434], bias-{mean,stddev}=-0.01593,0.9857, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.59e+05, self-repaired-proportion=0.0421376, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.04,0.06 0.10,0.19,0.49,1.1,1.4 1.7,2.1,2.3,2.9), mean=0.642, stddev=0.53], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.05,0.09 0.13,0.21,0.49,0.77,0.87 0.91,0.95,0.97,0.99), mean=0.493, stddev=0.27], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0002,0.0002,0.0002 0.0002,0.0003,0.0004,0.0007,0.0009 0.001,0.002,0.002,0.007), mean=0.000547, stddev=0.000472], oderiv-count=1.12746e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5524.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.04,0.06 0.10,0.19,0.50,1.1,1.4 1.7,2.1,2.3,2.9), mean=0.646, stddev=0.527], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.15,0.21,0.29 0.38,0.52,0.83,1.1,1.3 1.5,1.8,2.0,2.5), mean=0.848, stddev=0.38]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.03089, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.988, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.45 0.46,0.47,0.49,0.52,0.53 0.54,0.55,0.56,0.59), mean=0.493, stddev=0.0298], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.06144, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.91 0.93,0.94,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.982, stddev=0.0428], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.0,2.1,2.1), mean=1.97, stddev=0.0405], bias-{mean,stddev}=-0.008445,1.005, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.73e+05, self-repaired-proportion=0.0561851, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.06 0.10,0.20,0.49,1.0,1.4 1.7,2.2,2.5,3.1), mean=0.651, stddev=0.548], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.04,0.08 0.13,0.22,0.48,0.78,0.87 0.92,0.97,0.97,0.99), mean=0.497, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0002 0.0002,0.0003,0.0004,0.0006,0.0008 0.001,0.002,0.003,0.005), mean=0.000495, stddev=0.000468], oderiv-count=1.11923e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5524.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.03,0.07 0.11,0.20,0.50,1.0,1.4 1.7,2.2,2.5,3.1), mean=0.656, stddev=0.544], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.16,0.27 0.39,0.54,0.83,1.1,1.3 1.5,1.7,2.0,2.9), mean=0.848, stddev=0.37]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.03081, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.986, stddev=-nan], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.47,0.49,0.52,0.53 0.54,0.56,0.56,0.64), mean=0.492, stddev=0.0327], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=5524.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,-4e-09,2e-08,2e-08 3e-08,4e-08,5e-08,6e-08), mean=-2.84e-09, stddev=2.04e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.80,0.81,0.83 0.85,0.88,0.95,1.1,1.1 1.2,1.3,1.4,1.5), mean=0.981, stddev=0.124]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=2.5e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0009374, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0001,0.0005,0.0009 0.001,0.002,0.005,0.02,0.02 0.03,0.05,0.06,0.09), mean=0.00963, stddev=0.0115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.08), mean=0.0489, stddev=0.00928], bias-{mean,stddev}=1.264e-06,0.00835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.06158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.90,0.91 0.93,0.95,0.98,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.984, stddev=0.0436], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 1.9,1.9,2.0,2.0,2.0 2.0,2.1,2.1,2.1), mean=1.97, stddev=0.0433], bias-{mean,stddev}=-0.003445,0.9772, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.85e+05, self-repaired-proportion=0.0410725, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.06 0.11,0.21,0.50,1.0,1.4 1.7,2.1,2.4,3.5), mean=0.646, stddev=0.529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.05,0.08 0.13,0.23,0.50,0.77,0.87 0.92,0.95,0.97,0.99), mean=0.499, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,7e-06,9e-06,1e-05 1e-05,2e-05,2e-05,4e-05,5e-05 7e-05,0.0001,0.0001,0.0005), mean=2.93e-05, stddev=2.89e-05], oderiv-count=1.14736e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5524.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.07 0.11,0.21,0.50,1.0,1.4 1.7,2.1,2.4,3.5), mean=0.65, stddev=0.526], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.13,0.17,0.28 0.39,0.53,0.85,1.1,1.3 1.4,1.7,1.8,2.5), mean=0.847, stddev=0.36]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=2.5e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.031, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.992, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.44 0.45,0.47,0.50,0.52,0.54 0.55,0.56,0.57,0.59), mean=0.495, stddev=0.0325], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=5524.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,-8e-10,2e-08,2e-08 3e-08,4e-08,4e-08,6e-08), mean=-2.23e-09, stddev=2.15e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.82,0.84 0.86,0.88,0.95,1.0,1.1 1.2,1.3,1.5,1.7), mean=0.978, stddev=0.131]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000125, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.0005339, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.003,0.008,0.01 0.02,0.03,0.03,0.07), mean=0.00542, stddev=0.0066], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.028, stddev=0.00484], bias-{mean,stddev}=1.744e-10,0.005429, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,5e-05,9e-05 0.0001,0.0002,0.0003,0.0007,0.001 0.001,0.002,0.002,0.02), mean=0.000502, stddev=0.000584], oderiv-count=1.13005e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/0.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.640985 tdnnf2.linear:1.38427 tdnnf2.affine:0.642713 tdnnf3.linear:1.38215 tdnnf3.affine:0.622548 tdnnf4.linear:1.38489 tdnnf4.affine:0.727289 tdnnf5.linear:2.024 tdnnf5.affine:0.619113 tdnnf6.linear:1.38237 tdnnf6.affine:0.603978 tdnnf7.linear:1.35971 tdnnf7.affine:0.623259 tdnnf8.linear:1.34106 tdnnf8.affine:0.629289 tdnnf9.linear:1.36757 tdnnf9.affine:0.622442 tdnnf10.linear:1.39075 tdnnf10.affine:0.624891 tdnnf11.linear:1.36173 tdnnf11.affine:0.631563 tdnnf12.linear:1.37349 tdnnf12.affine:0.624044 tdnnf13.linear:1.39068 tdnnf13.affine:0.622376 prefinal-l:3.98243 prefinal-chain.affine:0.642554 prefinal-chain.linear:4.06056 output.affine:0.912206 prefinal-xent.affine:0.609095 prefinal-xent.linear:4.13882 output-xent.affine:0.537849 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:44.3111 tdnnf2.linear:11.1719 tdnnf2.affine:44.2601 tdnnf3.linear:11.1736 tdnnf3.affine:43.932 tdnnf4.linear:11.2045 tdnnf4.affine:45.67 tdnnf5.linear:11.1954 tdnnf5.affine:44.6549 tdnnf6.linear:11.1896 tdnnf6.affine:43.5079 tdnnf7.linear:11.1783 tdnnf7.affine:44.9211 tdnnf8.linear:11.1917 tdnnf8.affine:45.2923 tdnnf9.linear:11.1653 tdnnf9.affine:44.7792 tdnnf10.linear:11.1624 tdnnf10.affine:44.9315 tdnnf11.linear:11.1794 tdnnf11.affine:45.4477 tdnnf12.linear:11.2038 tdnnf12.affine:44.7643 tdnnf13.linear:11.1423 tdnnf13.affine:44.6203 prefinal-l:15.8157 prefinal-chain.affine:44.9815 prefinal-chain.linear:15.7769 output.affine:0.912206 prefinal-xent.affine:44.4086 prefinal-xent.linear:15.8737 output-xent.affine:0.537849 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0142656 tdnnf2.linear:0.122377 tdnnf2.affine:0.0143175 tdnnf3.linear:0.122269 tdnnf3.affine:0.0139752 tdnnf4.linear:0.122196 tdnnf4.affine:0.015708 tdnnf5.linear:0.178866 tdnnf5.affine:0.0136757 tdnnf6.linear:0.122137 tdnnf6.affine:0.0136932 tdnnf7.linear:0.120242 tdnnf7.affine:0.0136857 tdnnf8.linear:0.118397 tdnnf8.affine:0.0137046 tdnnf9.linear:0.12104 tdnnf9.affine:0.0137107 tdnnf10.linear:0.123112 tdnnf10.affine:0.0137179 tdnnf11.linear:0.120353 tdnnf11.affine:0.013707 tdnnf12.linear:0.121084 tdnnf12.affine:0.01375 tdnnf13.linear:0.123272 tdnnf13.affine:0.0137574 prefinal-l:0.248945 prefinal-chain.affine:0.0140856 prefinal-chain.linear:0.254044 output.affine:inf prefinal-xent.affine:0.0135301 prefinal-xent.linear:0.258712 output-xent.affine:inf ]
# Accounting: time=1 threads=1
# Ended (code 0) at Mon Jul 18 18:59:09 EDT 2022, elapsed time 1 seconds
