# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/55.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/54.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/55.mdl 
# Started at Thu Jul 21 15:17:23 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/55.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.03071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.14,0.17,0.22 0.26,0.31,0.39,0.51,0.63 0.74,0.92,1.1,1.2), mean=0.424, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.61 0.65,0.71,0.89,1.2,1.3 1.5,1.6,1.7,1.7), mean=0.948, stddev=0.261], bias-{mean,stddev}=-0.01096,0.03389, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.02e+06, self-repaired-proportion=0.0122254, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.002,0.003 0.003,0.005,0.02,0.03,0.04 0.05,0.05,0.05,0.07), mean=0.0199, stddev=0.0148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.10 0.13,0.18,0.39,0.64,0.82 0.88,0.91,0.93,0.95), mean=0.425, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.06 0.07,0.08,0.10,0.13,0.15 0.16,0.19,0.21,0.28), mean=0.108, stddev=0.0324], oderiv-count=4.80134e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46063.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.002 0.003,0.005,0.02,0.03,0.04 0.05,0.05,0.05,0.08), mean=0.02, stddev=0.0149], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.008,0.01 0.01,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.08), mean=0.0276, stddev=0.011]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01943, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.87,0.87 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.89), mean=0.88, stddev=0.00273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.18,0.21,0.25,0.27 0.30,0.32,0.34,0.39), mean=0.216, stddev=0.0436], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.17 0.18,0.20,0.24,0.30,0.34 0.38,0.41,0.42,0.46), mean=0.253, stddev=0.0617], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.46,0.46,0.47 0.48,0.49,0.52,0.55,0.57 0.58,0.59,0.60,0.67), mean=0.521, stddev=0.0338], bias-{mean,stddev}=-0.05029,0.0572, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.19e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.07,0.09 0.10,0.12,0.13,0.15,0.16 0.17,0.18,0.20,0.22), mean=0.134, stddev=0.0262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.22,0.28,0.34 0.37,0.40,0.45,0.49,0.52 0.54,0.57,0.60,0.63), mean=0.444, stddev=0.0635], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00938, stddev=0.00195], oderiv-count=4.62397e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45551.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.09 0.11,0.12,0.14,0.16,0.17 0.17,0.19,0.20,0.22), mean=0.137, stddev=0.026], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.18 0.20,0.21,0.23,0.26,0.28 0.29,0.31,0.33,0.37), mean=0.233, stddev=0.0338]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01519, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.68,0.68 0.69,0.69,0.69,0.69,0.69 0.69,0.69,0.69,0.69), mean=0.688, stddev=0.00223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.13 0.14,0.15,0.17,0.19,0.20 0.21,0.22,0.23,0.25), mean=0.17, stddev=0.0237], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.18,0.21,0.24,0.26 0.28,0.31,0.31,0.38), mean=0.211, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.47,0.49,0.50), mean=0.427, stddev=0.0267], bias-{mean,stddev}=-0.02892,0.02703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.92e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.17,0.20,0.21 0.22,0.24,0.25,0.41), mean=0.177, stddev=0.0259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.43,0.44,0.47,0.50,0.51 0.52,0.53,0.54,0.55), mean=0.467, stddev=0.0332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.005,0.006,0.006,0.007 0.007,0.008,0.008,0.01), mean=0.0057, stddev=0.000775], oderiv-count=4.46995e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45039.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.18,0.20,0.21 0.23,0.24,0.26,0.39), mean=0.181, stddev=0.0259], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.24 0.25,0.27,0.29,0.33,0.34 0.36,0.38,0.40,0.59), mean=0.298, stddev=0.0384]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01399, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.633, stddev=0.00235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.24), mean=0.157, stddev=0.019], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.15 0.16,0.17,0.19,0.22,0.23 0.24,0.26,0.27,0.32), mean=0.196, stddev=0.0288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.35 0.36,0.37,0.39,0.42,0.43 0.44,0.45,0.46,0.46), mean=0.395, stddev=0.0268], bias-{mean,stddev}=-0.02055,0.02002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.19,0.20 0.21,0.22,0.24,0.41), mean=0.175, stddev=0.0226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.44,0.46,0.48,0.49 0.51,0.52,0.53,0.57), mean=0.459, stddev=0.0287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00898, stddev=0.00106], oderiv-count=1.50262e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15013.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.15,0.16,0.18,0.19,0.20 0.21,0.23,0.25,0.40), mean=0.179, stddev=0.0224], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.27,0.28,0.30,0.33,0.34 0.35,0.37,0.41,0.63), mean=0.302, stddev=0.034]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.425, stddev=0.00195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.13 0.13,0.14,0.15,0.16,0.16 0.17,0.17,0.18,0.20), mean=0.15, stddev=0.012], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01293, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.11,0.13,0.15,0.16,0.17 0.18,0.20,0.20,0.23), mean=0.144, stddev=0.0239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.36,0.37 0.38,0.39,0.41,0.43,0.45 0.46,0.48,0.49,0.50), mean=0.413, stddev=0.0299], bias-{mean,stddev}=-0.02487,0.03734, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.05 0.07,0.08,0.09,0.11,0.12 0.12,0.13,0.13,0.17), mean=0.0918, stddev=0.0213], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.16,0.26 0.30,0.34,0.41,0.47,0.50 0.53,0.55,0.57,0.62), mean=0.4, stddev=0.0846], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0179, stddev=0.00343], oderiv-count=1.46102e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15013.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.07,0.08,0.09,0.11,0.12 0.12,0.13,0.13,0.17), mean=0.093, stddev=0.0212], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.11,0.13 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.22,0.27), mean=0.169, stddev=0.0238]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.64,0.64 0.64,0.64,0.64,0.64,0.64 0.65,0.65,0.65,0.65), mean=0.642, stddev=0.00196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.16, stddev=0.0179], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.15,0.16 0.17,0.19,0.21,0.23,0.24 0.25,0.26,0.27,0.30), mean=0.206, stddev=0.0267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.37 0.37,0.39,0.41,0.44,0.45 0.47,0.48,0.48,0.51), mean=0.414, stddev=0.031], bias-{mean,stddev}=-0.03744,0.02051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.17,0.18,0.19 0.20,0.21,0.22,0.26), mean=0.169, stddev=0.0179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.39 0.40,0.42,0.45,0.49,0.50 0.51,0.53,0.53,0.56), mean=0.454, stddev=0.0384], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.009,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00969, stddev=0.000902], oderiv-count=1.47472e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14501.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.14 0.15,0.16,0.17,0.19,0.20 0.20,0.21,0.23,0.27), mean=0.173, stddev=0.0184], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.25,0.26 0.27,0.28,0.29,0.32,0.33 0.34,0.36,0.37,0.51), mean=0.297, stddev=0.0268]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01375, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.63,0.63,0.63), mean=0.622, stddev=0.00165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.19,0.19,0.20,0.24), mean=0.154, stddev=0.0183], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.17,0.19,0.21,0.23,0.24 0.25,0.26,0.26,0.35), mean=0.206, stddev=0.0264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.36 0.37,0.38,0.41,0.44,0.45 0.47,0.47,0.49,0.52), mean=0.414, stddev=0.0311], bias-{mean,stddev}=-0.03958,0.01997, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.79e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.15,0.16,0.17,0.19,0.20 0.20,0.21,0.22,0.33), mean=0.173, stddev=0.0197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.36,0.38 0.40,0.41,0.45,0.48,0.50 0.51,0.53,0.54,0.56), mean=0.448, stddev=0.0409], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.008 0.008,0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00932, stddev=0.000962], oderiv-count=1.38576e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13989.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.34), mean=0.177, stddev=0.0205], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.27,0.28,0.30,0.32,0.34 0.35,0.37,0.39,0.57), mean=0.305, stddev=0.0294]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.624, stddev=0.0015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.155, stddev=0.0188], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01304, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.13,0.15 0.17,0.19,0.21,0.23,0.24 0.25,0.26,0.27,0.42), mean=0.207, stddev=0.0297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.36,0.37 0.37,0.39,0.41,0.44,0.46 0.46,0.49,0.49,0.51), mean=0.416, stddev=0.0315], bias-{mean,stddev}=-0.04057,0.02244, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.57e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.14 0.15,0.15,0.17,0.19,0.20 0.20,0.21,0.22,0.41), mean=0.17, stddev=0.0232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.32,0.34,0.37 0.39,0.41,0.44,0.48,0.50 0.51,0.53,0.53,0.56), mean=0.443, stddev=0.0455], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.009,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00931, stddev=0.00102], oderiv-count=1.35482e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13477.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.13,0.14 0.15,0.16,0.17,0.19,0.20 0.21,0.22,0.23,0.40), mean=0.173, stddev=0.0235], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.25,0.26 0.27,0.28,0.30,0.32,0.33 0.35,0.37,0.40,0.73), mean=0.302, stddev=0.0343]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01386, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.63,0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.627, stddev=0.00149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.21,0.30), mean=0.156, stddev=0.02], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01305, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.12,0.15 0.17,0.18,0.21,0.23,0.24 0.25,0.27,0.27,0.34), mean=0.206, stddev=0.0334], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.36 0.37,0.39,0.42,0.44,0.46 0.47,0.49,0.49,0.51), mean=0.416, stddev=0.032], bias-{mean,stddev}=-0.03848,0.02279, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.38e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.12 0.14,0.15,0.17,0.19,0.20 0.21,0.22,0.23,0.36), mean=0.171, stddev=0.0289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.24,0.31,0.34 0.37,0.40,0.44,0.48,0.50 0.51,0.54,0.55,0.57), mean=0.433, stddev=0.0557], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00896, stddev=0.00108], oderiv-count=1.22816e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12965.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.13 0.14,0.15,0.17,0.20,0.21 0.22,0.23,0.24,0.36), mean=0.173, stddev=0.0291], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.27,0.28,0.30,0.33,0.34 0.36,0.37,0.40,0.70), mean=0.306, stddev=0.0347]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63,0.64 0.64,0.64,0.64,0.64), mean=0.634, stddev=0.00126], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.20,0.21,0.22,0.29), mean=0.157, stddev=0.0214], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01293, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.13 0.16,0.18,0.21,0.23,0.24 0.25,0.26,0.28,0.34), mean=0.204, stddev=0.0369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.36 0.37,0.38,0.41,0.44,0.45 0.46,0.47,0.48,0.51), mean=0.413, stddev=0.0311], bias-{mean,stddev}=-0.03544,0.02308, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.09,0.10 0.12,0.14,0.17,0.19,0.20 0.21,0.23,0.25,0.31), mean=0.164, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.22,0.26,0.31 0.34,0.38,0.43,0.47,0.49 0.50,0.52,0.53,0.56), mean=0.419, stddev=0.0622], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00892, stddev=0.00111], oderiv-count=1.26678e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12453.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.09,0.11 0.13,0.14,0.17,0.19,0.20 0.22,0.23,0.25,0.33), mean=0.167, stddev=0.0329], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.25,0.26 0.27,0.28,0.31,0.33,0.35 0.36,0.38,0.41,0.70), mean=0.309, stddev=0.0341]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01438, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.65,0.65,0.65 0.65,0.65,0.65,0.65,0.65 0.65,0.65,0.65,0.65), mean=0.651, stddev=0.00149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.13,0.14,0.16,0.18,0.19 0.20,0.22,0.24,0.29), mean=0.161, stddev=0.0249], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.12 0.15,0.18,0.21,0.24,0.25 0.26,0.28,0.29,0.38), mean=0.209, stddev=0.0412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.38,0.40,0.42,0.45,0.47 0.48,0.50,0.51,0.52), mean=0.424, stddev=0.033], bias-{mean,stddev}=-0.02994,0.02092, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.71e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.10 0.12,0.14,0.17,0.20,0.21 0.23,0.25,0.26,0.41), mean=0.17, stddev=0.0381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.22,0.25,0.31 0.34,0.37,0.42,0.46,0.48 0.50,0.52,0.53,0.60), mean=0.414, stddev=0.0601], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.007,0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00862, stddev=0.00108], oderiv-count=1.18845e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11941.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.11 0.13,0.15,0.18,0.20,0.22 0.23,0.25,0.27,0.41), mean=0.173, stddev=0.038], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.26,0.28 0.29,0.30,0.33,0.35,0.37 0.39,0.41,0.43,0.71), mean=0.33, stddev=0.0383]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01475, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.67,0.67,0.67 0.67,0.67,0.67,0.67,0.67 0.67,0.67,0.67,0.67), mean=0.668, stddev=0.00111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.13,0.14,0.16,0.19,0.20 0.22,0.24,0.25,0.32), mean=0.164, stddev=0.0296], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01401, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.13,0.15 0.17,0.20,0.22,0.25,0.26 0.27,0.28,0.30,0.34), mean=0.221, stddev=0.0363], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.39 0.40,0.42,0.45,0.47,0.49 0.50,0.51,0.52,0.69), mean=0.447, stddev=0.0365], bias-{mean,stddev}=-0.02674,0.0181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.12 0.13,0.15,0.18,0.20,0.21 0.22,0.24,0.26,0.37), mean=0.175, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.26,0.29,0.32 0.35,0.37,0.41,0.45,0.47 0.49,0.51,0.52,0.58), mean=0.412, stddev=0.0524], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.0088, stddev=0.00102], oderiv-count=1.17763e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11429.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.12 0.13,0.15,0.18,0.20,0.22 0.23,0.25,0.27,0.37), mean=0.177, stddev=0.0341], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.28,0.30 0.31,0.32,0.35,0.38,0.39 0.41,0.44,0.46,0.60), mean=0.35, stddev=0.0358]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.62, stddev=0.00111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.15,0.17,0.19 0.21,0.23,0.24,0.32), mean=0.152, stddev=0.0305], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.14,0.16 0.17,0.19,0.21,0.25,0.27 0.28,0.30,0.31,0.36), mean=0.217, stddev=0.0385], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.441, stddev=0.0296], bias-{mean,stddev}=-0.02542,0.01928, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.49e+05, self-repaired-proportion=0.000536282, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.07,0.09 0.10,0.11,0.13,0.16,0.18 0.20,0.22,0.23,0.36), mean=0.132, stddev=0.0353], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.22,0.25,0.27 0.30,0.32,0.36,0.42,0.46 0.49,0.52,0.54,0.64), mean=0.37, stddev=0.0669], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.09), mean=0.0122, stddev=0.00303], oderiv-count=1.10464e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10917.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.05,0.08,0.09 0.10,0.11,0.13,0.16,0.18 0.20,0.22,0.23,0.37), mean=0.134, stddev=0.0363], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.23,0.24,0.26 0.28,0.29,0.33,0.36,0.38 0.40,0.42,0.43,0.57), mean=0.326, stddev=0.0432]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.444444, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, params-rms=0.0214, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.68,0.68 0.68,0.68,0.68,0.69,0.69 0.69,0.69,0.69,0.69), mean=0.685, stddev=0.0012], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.32,0.34,0.37,0.38 0.39,0.40,0.41,0.44), mean=0.341, stddev=0.029], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01533, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.20 0.21,0.22,0.24,0.27,0.28 0.29,0.31,0.33,0.39), mean=0.243, stddev=0.0303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.49,0.51,0.52 0.54,0.55,0.56,0.57), mean=0.49, stddev=0.0267], bias-{mean,stddev}=-0.04492,0.02598, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.17,0.23), mean=0.121, stddev=0.0233], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.22,0.23,0.27 0.30,0.34,0.39,0.44,0.46 0.47,0.49,0.51,0.55), mean=0.383, stddev=0.062], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.06), mean=0.0145, stddev=0.0023], oderiv-count=1.15891e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10917.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.24), mean=0.122, stddev=0.024], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.19,0.19,0.20 0.21,0.22,0.23,0.25,0.26 0.26,0.27,0.28,0.32), mean=0.234, stddev=0.0198]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, params-rms=0.01995, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.64,0.64 0.64,0.64,0.64,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.638, stddev=0.000598], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.27 0.28,0.29,0.32,0.34,0.36 0.37,0.39,0.41,0.49), mean=0.318, stddev=0.0331], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10917.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,-7e-10,2e-08,2e-08 3e-08,4e-08,4e-08,6e-08), mean=-7.53e-10, stddev=2.02e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.82,0.83,0.84 0.86,0.88,0.91,0.94,0.96 0.98,0.99,1.0,1.1), mean=0.908, stddev=0.0415]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000512182, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0244, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.09,0.21 0.27,0.32,0.38,0.44,0.49 0.54,0.59,0.61,0.98), mean=0.377, stddev=0.101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.3,1.3,1.4 1.4,1.4,1.4,1.4), mean=1.3, stddev=0.0534], bias-{mean,stddev}=0.0003838,0.06684, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.04,0.08 0.11,0.14,0.16,0.18,0.19 0.19,0.20,0.21,0.24), mean=0.155, stddev=0.0352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.31,0.33,0.35 0.37,0.37,0.40,0.43), mean=0.318, stddev=0.025], bias-{mean,stddev}=-0.07851,0.06646, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.56e+05, self-repaired-proportion=0.00927125, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.006,0.007,0.01 0.01,0.03,0.05,0.10,0.12 0.15,0.17,0.18,0.31), mean=0.0631, stddev=0.0432], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.08 0.10,0.15,0.27,0.42,0.50 0.61,0.69,0.73,0.80), mean=0.292, stddev=0.158], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.007,0.008,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00989, stddev=0.00329], oderiv-count=1.15258e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10917.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.006,0.007,0.01 0.01,0.02,0.05,0.10,0.12 0.15,0.17,0.18,0.32), mean=0.0631, stddev=0.0436], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.04,0.05 0.07,0.09,0.13,0.16,0.17 0.18,0.20,0.22,0.36), mean=0.125, stddev=0.0415]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000512182, l2-regularize=0.008, max-change=0.75, params-rms=0.01285, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.411, stddev=0.000211], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.16,0.18,0.21,0.28 0.36,0.39,0.39,0.41), mean=0.197, stddev=0.0592], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10917.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-3e-08,-3e-08,-2e-08 -2e-08,-1e-08,-2e-10,1e-08,2e-08 2e-08,3e-08,3e-08,4e-08), mean=2.49e-10, stddev=1.46e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.42,0.43,0.44,0.46,0.47 0.47,0.48,0.49,0.50), mean=0.443, stddev=0.0197]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00256091, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.04117, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.04,0.18 0.30,0.45,0.64,0.80,0.90 0.97,1.0,1.1,1.5), mean=0.617, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,1.9,2.0 2.0,2.1,2.2,2.3,2.3 2.3,2.3,2.3,2.4), mean=2.19, stddev=0.102], bias-{mean,stddev}=8.422e-09,0.08429, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-06,7e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.16826e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/54.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/55.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.55881 tdnnf2.linear:2.92437 tdnnf2.affine:2.88414 tdnnf3.linear:2.34577 tdnnf3.affine:2.4595 tdnnf4.linear:2.21224 tdnnf4.affine:2.34902 tdnnf5.linear:1.74374 tdnnf5.affine:1.90404 tdnnf6.linear:2.1829 tdnnf6.affine:2.34846 tdnnf7.linear:2.01008 tdnnf7.affine:2.23456 tdnnf8.linear:1.96195 tdnnf8.affine:2.18948 tdnnf9.linear:1.92799 tdnnf9.affine:2.14373 tdnnf10.linear:1.89772 tdnnf10.affine:2.08282 tdnnf11.linear:1.86534 tdnnf11.affine:2.06763 tdnnf12.linear:1.85743 tdnnf12.affine:2.14346 tdnnf13.linear:1.84364 tdnnf13.affine:2.22212 prefinal-l:2.37246 prefinal-chain.affine:2.3675 prefinal-chain.linear:1.75328 output.affine:2.57019 prefinal-xent.affine:1.32231 prefinal-xent.linear:0.859368 output-xent.affine:1.99598 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:14.621 tdnnf2.linear:9.95057 tdnnf2.affine:8.69602 tdnnf3.linear:7.77869 tdnnf3.affine:6.96798 tdnnf4.linear:7.16454 tdnnf4.affine:6.39695 tdnnf5.linear:4.80438 tdnnf5.affine:4.89583 tdnnf6.linear:7.26558 tdnnf6.affine:6.78109 tdnnf7.linear:7.0397 tdnnf7.affine:6.79751 tdnnf8.linear:7.05918 tdnnf8.affine:6.83972 tdnnf9.linear:7.09593 tdnnf9.affine:6.83087 tdnnf10.linear:7.16796 tdnnf10.affine:6.75577 tdnnf11.linear:7.36488 tdnnf11.affine:6.90221 tdnnf12.linear:7.55434 tdnnf12.affine:7.24616 tdnnf13.linear:7.01241 tdnnf13.affine:7.14072 prefinal-l:10.9556 prefinal-chain.affine:8.02238 prefinal-chain.linear:10.2156 output.affine:21.0504 prefinal-xent.affine:6.0711 prefinal-xent.linear:6.58172 output-xent.affine:35.2942 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.310238 tdnnf2.linear:0.291606 tdnnf2.affine:0.330088 tdnnf3.linear:0.300015 tdnnf3.affine:0.351906 tdnnf4.linear:0.30678 tdnnf4.affine:0.365752 tdnnf5.linear:0.362748 tdnnf5.affine:0.389262 tdnnf6.linear:0.298751 tdnnf6.affine:0.345654 tdnnf7.linear:0.284606 tdnnf7.affine:0.328122 tdnnf8.linear:0.276809 tdnnf8.affine:0.319448 tdnnf9.linear:0.270579 tdnnf9.affine:0.312651 tdnnf10.linear:0.263432 tdnnf10.affine:0.307055 tdnnf11.linear:0.251632 tdnnf11.affine:0.298242 tdnnf12.linear:0.244317 tdnnf12.affine:0.294409 tdnnf13.linear:0.261089 tdnnf13.affine:0.308966 prefinal-l:0.214505 prefinal-chain.affine:0.294927 prefinal-chain.linear:0.171244 output.affine:0.122819 prefinal-xent.affine:0.216716 prefinal-xent.linear:0.130175 output-xent.affine:0.056633 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 21 15:17:23 EDT 2022, elapsed time 0 seconds
