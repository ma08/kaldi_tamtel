# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/83.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/82.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/83.mdl 
# Started at Thu Jul 21 17:26:26 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/83.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.0255, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.19,0.21 0.23,0.25,0.32,0.44,0.55 0.63,0.74,0.79,0.98), mean=0.354, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.49,0.52 0.55,0.60,0.76,0.97,1.0 1.1,1.2,1.2,1.4), mean=0.792, stddev=0.196], bias-{mean,stddev}=-0.009746,0.02495, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3e+06, self-repaired-proportion=0.0118774, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.003,0.004,0.01,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.014, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.09 0.13,0.18,0.36,0.65,0.79 0.88,0.92,0.94,0.95), mean=0.415, stddev=0.247], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.12,0.14,0.16 0.18,0.21,0.24,0.31), mean=0.12, stddev=0.0356], oderiv-count=4.61149e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47083.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.002,0.002 0.003,0.004,0.01,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0141, stddev=0.0105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.009 0.01,0.01,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.02, stddev=0.00802]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01567, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71), mean=0.709, stddev=0.00081], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.14,0.17,0.20,0.22 0.24,0.26,0.27,0.31), mean=0.174, stddev=0.0343], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01296, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.15,0.16,0.20,0.24,0.27 0.29,0.31,0.32,0.36), mean=0.202, stddev=0.0471], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.38 0.39,0.39,0.41,0.43,0.44 0.45,0.46,0.48,0.50), mean=0.414, stddev=0.0224], bias-{mean,stddev}=-0.04203,0.04212, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.03 0.04,0.04,0.06,0.07,0.07 0.08,0.08,0.09,0.10), mean=0.0545, stddev=0.0145], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.17,0.26 0.30,0.33,0.40,0.47,0.52 0.57,0.64,0.69,0.77), mean=0.405, stddev=0.0995], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.04,0.06), mean=0.0175, stddev=0.00454], oderiv-count=4.40013e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46571.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.03 0.04,0.04,0.06,0.07,0.07 0.08,0.08,0.09,0.10), mean=0.0547, stddev=0.0145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.08,0.10,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0985, stddev=0.0184]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.533, stddev=0.000622], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.16 0.16,0.17,0.18,0.19), mean=0.132, stddev=0.0183], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.17,0.19,0.20 0.22,0.23,0.24,0.31), mean=0.167, stddev=0.0288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.30 0.31,0.32,0.34,0.35,0.36 0.37,0.38,0.38,0.43), mean=0.338, stddev=0.0202], bias-{mean,stddev}=-0.02785,0.0216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.22e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.10,0.11 0.11,0.12,0.13,0.24), mean=0.086, stddev=0.017], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.35,0.37 0.39,0.41,0.45,0.49,0.50 0.52,0.54,0.54,0.61), mean=0.447, stddev=0.0439], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00921, stddev=0.00144], oderiv-count=4.5599e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46059.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.10,0.11 0.11,0.12,0.13,0.24), mean=0.0859, stddev=0.017], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.16,0.17 0.18,0.20,0.21,0.34), mean=0.145, stddev=0.0228]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01089, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.493, stddev=0.000503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.16,0.16,0.19), mean=0.122, stddev=0.0153], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.21,0.26), mean=0.155, stddev=0.0218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.28 0.29,0.30,0.31,0.33,0.34 0.34,0.35,0.36,0.36), mean=0.313, stddev=0.019], bias-{mean,stddev}=-0.02118,0.01582, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.20), mean=0.0897, stddev=0.0139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.34,0.36,0.38 0.39,0.41,0.44,0.47,0.48 0.49,0.51,0.53,0.57), mean=0.438, stddev=0.0364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0137, stddev=0.00171], oderiv-count=1.53312e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15353.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.20), mean=0.089, stddev=0.0138], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.18 0.18,0.20,0.22,0.32), mean=0.155, stddev=0.0202]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01005, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.32,0.32 0.32,0.32,0.32,0.32,0.32 0.32,0.32,0.32,0.32), mean=0.322, stddev=0.000525], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.11,0.12,0.13 0.13,0.13,0.14,0.15), mean=0.113, stddev=0.0102], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.009958, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.08 0.09,0.10,0.11,0.13,0.13 0.14,0.15,0.15,0.17), mean=0.111, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.29,0.30,0.32,0.33,0.34 0.35,0.37,0.37,0.40), mean=0.318, stddev=0.0214], bias-{mean,stddev}=-0.02142,0.02347, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0445, stddev=0.0124], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.17 0.24,0.29,0.37,0.44,0.48 0.50,0.53,0.56,0.67), mean=0.362, stddev=0.0951], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0283, stddev=0.00509], oderiv-count=1.58365e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15353.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0439, stddev=0.0124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.084, stddev=0.0134]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01117, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.505, stddev=0.000598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.14,0.14 0.15,0.16,0.16,0.19), mean=0.125, stddev=0.0146], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.20,0.21,0.23), mean=0.165, stddev=0.0194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.30,0.31,0.33,0.35,0.37 0.37,0.38,0.39,0.40), mean=0.332, stddev=0.0252], bias-{mean,stddev}=-0.03489,0.01677, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.08,0.09,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0853, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.30,0.32,0.34 0.36,0.38,0.43,0.47,0.49 0.50,0.52,0.53,0.57), mean=0.424, stddev=0.0493], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0161, stddev=0.00165], oderiv-count=1.48266e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14841.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.08,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0848, stddev=0.0105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.17,0.19,0.19,0.29), mean=0.152, stddev=0.0146]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.504, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.14,0.14 0.15,0.16,0.16,0.19), mean=0.125, stddev=0.0147], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.20,0.21,0.30), mean=0.168, stddev=0.0194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.31,0.32,0.34,0.36,0.37 0.37,0.38,0.38,0.41), mean=0.338, stddev=0.0229], bias-{mean,stddev}=-0.03858,0.01652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.69e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.21), mean=0.0877, stddev=0.0118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.30,0.33 0.35,0.37,0.42,0.46,0.48 0.50,0.52,0.54,0.57), mean=0.415, stddev=0.0529], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0156, stddev=0.00171], oderiv-count=1.35478e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14329.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.21), mean=0.0873, stddev=0.0119], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.19,0.21,0.22,0.34), mean=0.159, stddev=0.0186]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.514, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.13,0.14,0.15 0.15,0.16,0.17,0.20), mean=0.127, stddev=0.0156], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.12,0.13 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.22,0.30), mean=0.171, stddev=0.0221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.30 0.32,0.32,0.34,0.36,0.37 0.38,0.40,0.40,0.41), mean=0.344, stddev=0.024], bias-{mean,stddev}=-0.04029,0.01877, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.22), mean=0.0876, stddev=0.0142], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.25,0.27,0.31 0.33,0.36,0.41,0.46,0.48 0.50,0.52,0.54,0.58), mean=0.408, stddev=0.0603], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0155, stddev=0.00182], oderiv-count=1.3448e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13817.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.22), mean=0.0876, stddev=0.0144], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.20,0.22,0.24,0.41), mean=0.162, stddev=0.0224]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.524, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.17,0.17,0.26), mean=0.13, stddev=0.0168], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.10,0.13 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.22,0.30), mean=0.171, stddev=0.0252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.31 0.31,0.33,0.35,0.36,0.38 0.39,0.39,0.40,0.41), mean=0.346, stddev=0.0237], bias-{mean,stddev}=-0.03851,0.01848, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.08,0.09,0.10,0.11 0.12,0.13,0.13,0.21), mean=0.0894, stddev=0.0177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.21,0.23,0.28 0.31,0.35,0.41,0.46,0.48 0.51,0.54,0.55,0.62), mean=0.402, stddev=0.0705], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.015, stddev=0.00189], oderiv-count=1.28774e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13305.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.08,0.09,0.10,0.11 0.12,0.13,0.13,0.21), mean=0.0897, stddev=0.0178], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.19 0.20,0.22,0.23,0.41), mean=0.167, stddev=0.0228]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.53, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.10 0.11,0.12,0.13,0.14,0.15 0.16,0.18,0.18,0.24), mean=0.131, stddev=0.0183], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.10,0.12 0.14,0.15,0.17,0.19,0.20 0.21,0.21,0.22,0.27), mean=0.171, stddev=0.0282], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.30,0.31 0.32,0.32,0.35,0.36,0.38 0.38,0.39,0.39,0.42), mean=0.346, stddev=0.0228], bias-{mean,stddev}=-0.03586,0.01874, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.24e+05, self-repaired-proportion=8.89401e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.06,0.07,0.09,0.10,0.11 0.12,0.13,0.14,0.18), mean=0.0871, stddev=0.0199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.21,0.26 0.29,0.33,0.40,0.45,0.47 0.50,0.52,0.54,0.60), mean=0.387, stddev=0.0752], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.015, stddev=0.00201], oderiv-count=1.28592e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12793.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.06,0.07,0.09,0.10,0.11 0.12,0.13,0.14,0.18), mean=0.0877, stddev=0.02], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.15,0.17,0.19,0.20 0.21,0.22,0.24,0.35), mean=0.171, stddev=0.0223]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.012, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.543, stddev=0.000299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.19,0.19,0.24), mean=0.134, stddev=0.0211], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.10,0.12 0.13,0.16,0.18,0.20,0.21 0.22,0.23,0.23,0.28), mean=0.176, stddev=0.0317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.32 0.33,0.34,0.35,0.37,0.39 0.40,0.41,0.42,0.43), mean=0.356, stddev=0.024], bias-{mean,stddev}=-0.0318,0.01784, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.13e+05, self-repaired-proportion=2.02606e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.07,0.09,0.11,0.12 0.13,0.14,0.15,0.21), mean=0.0899, stddev=0.0236], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.19,0.21,0.25 0.29,0.33,0.38,0.43,0.46 0.49,0.51,0.52,0.69), mean=0.379, stddev=0.0713], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0151, stddev=0.00206], oderiv-count=1.23293e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12281.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.07,0.09,0.11,0.12 0.13,0.14,0.15,0.20), mean=0.0904, stddev=0.0234], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.18,0.20,0.21 0.22,0.23,0.24,0.34), mean=0.183, stddev=0.0228]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.561, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.16,0.17 0.19,0.20,0.21,0.27), mean=0.138, stddev=0.0262], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.11,0.13 0.15,0.17,0.19,0.21,0.22 0.22,0.23,0.24,0.29), mean=0.186, stddev=0.0288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.34 0.35,0.36,0.38,0.40,0.41 0.42,0.43,0.43,0.44), mean=0.377, stddev=0.0242], bias-{mean,stddev}=-0.02951,0.0145, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.97e+05, self-repaired-proportion=4.41276e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.06,0.07,0.09,0.11,0.11 0.12,0.13,0.14,0.24), mean=0.0899, stddev=0.0204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.20,0.22,0.26 0.29,0.33,0.37,0.42,0.45 0.47,0.49,0.50,0.58), mean=0.371, stddev=0.0627], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0159, stddev=0.00198], oderiv-count=1.17469e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11769.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.06,0.07,0.09,0.11,0.11 0.12,0.13,0.14,0.23), mean=0.0905, stddev=0.0203], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.16 0.17,0.18,0.19,0.21,0.22 0.23,0.25,0.26,0.38), mean=0.194, stddev=0.0228]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01191, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.539, stddev=0.000546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.13,0.15,0.17 0.18,0.20,0.22,0.29), mean=0.132, stddev=0.0274], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01204, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.13,0.15 0.16,0.17,0.19,0.21,0.22 0.23,0.25,0.26,0.32), mean=0.19, stddev=0.0287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.35 0.35,0.37,0.38,0.41,0.41 0.42,0.43,0.43,0.45), mean=0.385, stddev=0.0226], bias-{mean,stddev}=-0.02732,0.0173, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.85e+05, self-repaired-proportion=0.0082427, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.02,0.03,0.04 0.04,0.05,0.06,0.08,0.09 0.10,0.12,0.13,0.23), mean=0.0653, stddev=0.0218], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.13,0.18,0.22 0.25,0.28,0.32,0.38,0.42 0.46,0.49,0.53,0.92), mean=0.329, stddev=0.0777], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.17), mean=0.0243, stddev=0.0103], oderiv-count=1.16166e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11257.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.02,0.03,0.04 0.05,0.05,0.06,0.08,0.09 0.10,0.12,0.13,0.22), mean=0.0664, stddev=0.0217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.08,0.11,0.13 0.14,0.15,0.17,0.19,0.20 0.21,0.22,0.23,0.33), mean=0.168, stddev=0.0277]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.118519, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, params-rms=0.01823, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58), mean=0.584, stddev=0.000299], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.24,0.25 0.26,0.27,0.29,0.31,0.32 0.33,0.35,0.35,0.37), mean=0.291, stddev=0.0252], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01403, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.26,0.27,0.29), mean=0.224, stddev=0.0186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.42 0.42,0.43,0.45,0.46,0.47 0.49,0.50,0.50,0.52), mean=0.449, stddev=0.0218], bias-{mean,stddev}=-0.04777,0.0178, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.31e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.03,0.03 0.04,0.04,0.05,0.07,0.08 0.08,0.09,0.10,0.12), mean=0.0558, stddev=0.0153], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.16,0.20 0.22,0.25,0.31,0.37,0.41 0.43,0.47,0.48,0.53), mean=0.312, stddev=0.0724], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.08), mean=0.03, stddev=0.00464], oderiv-count=1.13421e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11257.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.04,0.06,0.07,0.08 0.08,0.09,0.10,0.12), mean=0.0563, stddev=0.0152], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.19), mean=0.122, stddev=0.014]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, params-rms=0.01703, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.545, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.24,0.25,0.27,0.29,0.30 0.31,0.33,0.33,0.40), mean=0.271, stddev=0.0231], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11257.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-3e-08,-3e-08 -2e-08,-1e-08,-2e-10,1e-08,2e-08 3e-08,4e-08,5e-08,5e-08), mean=3.43e-10, stddev=1.76e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.60,0.61 0.62,0.62,0.64,0.66,0.68 0.69,0.70,0.71,0.75), mean=0.644, stddev=0.0255]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000197065, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.11,0.21 0.28,0.32,0.39,0.47,0.52 0.59,0.65,0.67,0.83), mean=0.395, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.36, stddev=0.0438], bias-{mean,stddev}=0.0004324,0.0652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.008557, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.03,0.04,0.07 0.11,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.22), mean=0.134, stddev=0.0271], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.25 0.25,0.26,0.27,0.28,0.29 0.31,0.32,0.32,0.34), mean=0.273, stddev=0.0162], bias-{mean,stddev}=-0.0594,0.04666, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.7e+05, self-repaired-proportion=0.0454092, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.002,0.003,0.004 0.006,0.009,0.02,0.05,0.07 0.09,0.12,0.13,0.19), mean=0.0325, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.06,0.10,0.21,0.38,0.46 0.60,0.71,0.72,0.81), mean=0.246, stddev=0.165], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0172, stddev=0.00527], oderiv-count=1.03434e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11257.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.003,0.003,0.004 0.006,0.009,0.02,0.05,0.07 0.09,0.12,0.12,0.19), mean=0.0322, stddev=0.0279], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.02,0.03 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.23), mean=0.0668, stddev=0.0266]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000197065, l2-regularize=0.008, max-change=0.75, params-rms=0.01069, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.34,0.34 0.34,0.34,0.34,0.34,0.34 0.34,0.34,0.34,0.34), mean=0.342, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.15,0.18,0.23 0.30,0.32,0.32,0.34), mean=0.164, stddev=0.0495], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11257.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-2e-08,-2e-08 -1e-08,-9e-09,1e-11,1e-08,1e-08 2e-08,2e-08,2e-08,4e-08), mean=7.63e-11, stddev=1.12e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.29,0.30,0.31,0.32,0.33 0.34,0.34,0.34,0.35), mean=0.312, stddev=0.0133]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000985326, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.04141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.05,0.21 0.34,0.47,0.63,0.80,0.90 0.98,1.1,1.1,1.5), mean=0.625, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,1.9,2.0,2.0 2.1,2.1,2.2,2.3,2.3 2.3,2.3,2.3,2.4), mean=2.2, stddev=0.0888], bias-{mean,stddev}=1.141e-08,0.0723, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-08,7e-05,0.0002 0.0003,0.0004,0.0008,0.002,0.002 0.003,0.004,0.004,0.04), mean=0.00107, stddev=0.00117], oderiv-count=1.10896e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/82.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/83.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.11518 tdnnf2.linear:1.19822 tdnnf2.affine:1.2308 tdnnf3.linear:0.911005 tdnnf3.affine:1.01344 tdnnf4.linear:0.846934 tdnnf4.affine:0.947634 tdnnf5.linear:0.646176 tdnnf5.affine:0.742881 tdnnf6.linear:0.855555 tdnnf6.affine:1.01213 tdnnf7.linear:0.816343 tdnnf7.affine:0.988968 tdnnf8.linear:0.809092 tdnnf8.affine:0.976786 tdnnf9.linear:0.815622 tdnnf9.affine:0.965074 tdnnf10.linear:0.808932 tdnnf10.affine:0.955841 tdnnf11.linear:0.803791 tdnnf11.affine:0.963399 tdnnf12.linear:0.809551 tdnnf12.affine:1.01424 tdnnf13.linear:0.874617 tdnnf13.affine:1.14421 prefinal-l:1.09922 prefinal-chain.affine:1.32396 prefinal-chain.linear:0.97074 output.affine:0.935891 prefinal-xent.affine:0.710216 prefinal-xent.linear:0.443651 output-xent.affine:0.790933 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.1358 tdnnf2.linear:8.02461 tdnnf2.affine:6.90417 tdnnf3.linear:6.02542 tdnnf3.affine:5.534 tdnnf4.linear:5.57712 tdnnf4.affine:5.08298 tdnnf5.linear:3.63872 tdnnf5.affine:3.74589 tdnnf6.linear:5.71709 tdnnf6.affine:5.46365 tdnnf7.linear:5.69684 tdnnf7.affine:5.57999 tdnnf8.linear:5.8108 tdnnf8.affine:5.69354 tdnnf9.linear:5.92466 tdnnf9.affine:5.70774 tdnnf10.linear:6.00169 tdnnf10.affine:5.68973 tdnnf11.linear:6.14615 tdnnf11.affine:5.83348 tdnnf12.linear:6.35052 tdnnf12.affine:6.12964 tdnnf13.linear:6.10036 tdnnf13.affine:6.24909 prefinal-l:9.33625 prefinal-chain.affine:7.36867 prefinal-chain.linear:8.71933 output.affine:22.1051 prefinal-xent.affine:5.00373 prefinal-xent.linear:5.47272 output-xent.affine:35.4213 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.1734 tdnnf2.linear:0.148553 tdnnf2.affine:0.177069 tdnnf3.linear:0.150335 tdnnf3.affine:0.182154 tdnnf4.linear:0.150931 tdnnf4.affine:0.185373 tdnnf5.linear:0.176243 tdnnf5.affine:0.196909 tdnnf6.linear:0.148908 tdnnf6.affine:0.18441 tdnnf7.linear:0.142705 tdnnf7.affine:0.176579 tdnnf8.linear:0.138654 tdnnf8.affine:0.170995 tdnnf9.linear:0.137205 tdnnf9.affine:0.168604 tdnnf10.linear:0.134366 tdnnf10.affine:0.167625 tdnnf11.linear:0.130402 tdnnf11.affine:0.164785 tdnnf12.linear:0.127098 tdnnf12.affine:0.165117 tdnnf13.linear:0.143245 tdnnf13.affine:0.182894 prefinal-l:0.117227 prefinal-chain.affine:0.179089 prefinal-chain.linear:0.110632 output.affine:0.0423845 prefinal-xent.affine:0.140927 prefinal-xent.linear:0.0804963 output-xent.affine:0.0223258 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 21 17:26:27 EDT 2022, elapsed time 1 seconds
