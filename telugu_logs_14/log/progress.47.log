# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/47.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/46.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/47.mdl 
# Started at Thu Jul 21 14:39:44 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/47.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.03091, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.12,0.17 0.22,0.28,0.38,0.52,0.65 0.78,0.99,1.2,1.3), mean=0.416, stddev=0.193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.58,0.61 0.65,0.71,0.89,1.2,1.3 1.5,1.6,1.7,1.7), mean=0.951, stddev=0.272], bias-{mean,stddev}=-0.009132,0.03776, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.89e+06, self-repaired-proportion=0.0312964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0009,0.002 0.003,0.004,0.02,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0223, stddev=0.0175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.08 0.10,0.16,0.40,0.67,0.82 0.90,0.93,0.95,0.98), mean=0.424, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.09,0.12,0.14 0.16,0.18,0.21,0.28), mean=0.0969, stddev=0.0352], oderiv-count=4.59274e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46886.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0005,0.0009,0.002 0.003,0.005,0.02,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0231, stddev=0.018], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.003,0.004,0.007 0.01,0.02,0.03,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0305, stddev=0.0147]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.92,0.92,0.92 0.92,0.92,0.92,0.92), mean=0.916, stddev=0.00331], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.16,0.18,0.22,0.26,0.29 0.32,0.36,0.37,0.42), mean=0.223, stddev=0.0524], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01648, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.17,0.19,0.24,0.31,0.36 0.40,0.43,0.45,0.49), mean=0.254, stddev=0.0715], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.46,0.47 0.49,0.50,0.52,0.55,0.57 0.59,0.61,0.61,0.67), mean=0.526, stddev=0.0353], bias-{mean,stddev}=-0.0503,0.06323, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.2e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.09 0.10,0.12,0.13,0.15,0.17 0.18,0.19,0.20,0.25), mean=0.135, stddev=0.0275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.23,0.26,0.33 0.36,0.40,0.44,0.49,0.53 0.55,0.59,0.60,0.66), mean=0.441, stddev=0.0689], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.008,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.00878, stddev=0.00198], oderiv-count=4.41872e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46374.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.10 0.11,0.13,0.15,0.17,0.18 0.19,0.21,0.22,0.26), mean=0.147, stddev=0.0291], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.20,0.21,0.25,0.28,0.31 0.32,0.34,0.37,0.46), mean=0.25, stddev=0.0426]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01543, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.69,0.69,0.69 0.69,0.70,0.70,0.70,0.70 0.70,0.70,0.70,0.70), mean=0.698, stddev=0.00248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.17,0.20,0.21 0.22,0.23,0.24,0.26), mean=0.173, stddev=0.0269], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01331, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.20,0.24,0.27 0.29,0.31,0.33,0.44), mean=0.209, stddev=0.043], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.46,0.48,0.49,0.50), mean=0.425, stddev=0.0262], bias-{mean,stddev}=-0.02751,0.03141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.91e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.19,0.20 0.22,0.23,0.24,0.40), mean=0.17, stddev=0.027], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.37,0.40 0.42,0.43,0.46,0.49,0.51 0.52,0.54,0.55,0.61), mean=0.461, stddev=0.0384], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.005,0.005,0.006,0.006 0.007,0.008,0.008,0.01), mean=0.00544, stddev=0.000838], oderiv-count=4.49683e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45862.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.18,0.20,0.22 0.23,0.25,0.26,0.44), mean=0.183, stddev=0.0293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.23,0.24 0.25,0.27,0.30,0.34,0.36 0.38,0.41,0.43,0.68), mean=0.308, stddev=0.0469]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.64,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.636, stddev=0.00269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.19 0.20,0.21,0.21,0.24), mean=0.158, stddev=0.0208], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.17,0.19,0.22,0.23 0.25,0.27,0.29,0.39), mean=0.194, stddev=0.0329], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.35 0.36,0.37,0.39,0.41,0.43 0.44,0.45,0.45,0.48), mean=0.392, stddev=0.0261], bias-{mean,stddev}=-0.01926,0.02265, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.18,0.19 0.20,0.21,0.23,0.41), mean=0.166, stddev=0.0221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.43,0.45,0.48,0.50 0.51,0.52,0.53,0.59), mean=0.453, stddev=0.0326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00867, stddev=0.00118], oderiv-count=1.49885e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15287.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.18,0.19,0.20 0.21,0.23,0.25,0.44), mean=0.177, stddev=0.0235], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.30,0.33,0.35 0.36,0.39,0.41,0.69), mean=0.305, stddev=0.0383]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.414, stddev=0.00229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.15,0.16,0.16 0.17,0.17,0.18,0.20), mean=0.146, stddev=0.0123], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.20,0.21,0.24), mean=0.142, stddev=0.0249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.36 0.36,0.38,0.41,0.43,0.45 0.46,0.48,0.48,0.51), mean=0.406, stddev=0.0326], bias-{mean,stddev}=-0.01681,0.03455, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.07,0.07,0.09,0.11,0.11 0.12,0.13,0.13,0.17), mean=0.0897, stddev=0.0197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.26 0.30,0.34,0.41,0.47,0.50 0.53,0.57,0.57,0.62), mean=0.403, stddev=0.081], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0172, stddev=0.0028], oderiv-count=1.50048e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15287.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.07,0.08,0.10,0.11,0.12 0.13,0.14,0.14,0.18), mean=0.0951, stddev=0.0204], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.14,0.15,0.17,0.19,0.20 0.21,0.23,0.23,0.31), mean=0.174, stddev=0.027]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.65,0.65,0.65 0.65,0.65,0.65,0.66,0.66 0.66,0.66,0.66,0.66), mean=0.655, stddev=0.0022], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.16,0.18,0.19 0.20,0.21,0.22,0.27), mean=0.162, stddev=0.0205], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01283, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.20,0.23,0.24 0.25,0.27,0.28,0.33), mean=0.203, stddev=0.0306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.36 0.37,0.38,0.41,0.43,0.45 0.46,0.48,0.48,0.49), mean=0.409, stddev=0.0299], bias-{mean,stddev}=-0.03597,0.02317, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.15,0.16,0.17,0.18 0.19,0.20,0.21,0.26), mean=0.162, stddev=0.0187], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.34,0.36,0.38 0.40,0.41,0.45,0.48,0.49 0.51,0.52,0.53,0.56), mean=0.445, stddev=0.0394], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00914, stddev=0.00107], oderiv-count=1.44992e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14775.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.17,0.19,0.20 0.20,0.21,0.23,0.29), mean=0.172, stddev=0.02], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.30,0.32,0.34 0.35,0.37,0.39,0.54), mean=0.301, stddev=0.0309]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01371, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.63), mean=0.62, stddev=0.00201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.21,0.27), mean=0.154, stddev=0.0202], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01277, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.17,0.18,0.20,0.22,0.24 0.25,0.26,0.27,0.38), mean=0.202, stddev=0.0287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.36 0.37,0.38,0.41,0.43,0.44 0.45,0.46,0.48,0.52), mean=0.408, stddev=0.0289], bias-{mean,stddev}=-0.03768,0.02267, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.18,0.19 0.20,0.20,0.21,0.31), mean=0.164, stddev=0.0199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.38 0.39,0.41,0.44,0.48,0.50 0.51,0.53,0.53,0.56), mean=0.442, stddev=0.0405], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00888, stddev=0.00109], oderiv-count=1.35901e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14263.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.16,0.17,0.19,0.20 0.21,0.22,0.23,0.34), mean=0.175, stddev=0.0212], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.30,0.32,0.34 0.35,0.38,0.41,0.57), mean=0.307, stddev=0.0303]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.615, stddev=0.00181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.152, stddev=0.0198], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.13,0.15 0.17,0.18,0.20,0.23,0.24 0.25,0.27,0.28,0.46), mean=0.202, stddev=0.0322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.35,0.36 0.37,0.38,0.41,0.43,0.44 0.45,0.47,0.48,0.51), mean=0.408, stddev=0.0296], bias-{mean,stddev}=-0.03882,0.02523, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.40), mean=0.158, stddev=0.0228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.32,0.34,0.37 0.38,0.40,0.44,0.47,0.49 0.51,0.53,0.54,0.57), mean=0.437, stddev=0.0444], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00908, stddev=0.00115], oderiv-count=1.34224e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13751.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.13 0.14,0.15,0.17,0.19,0.19 0.20,0.22,0.23,0.41), mean=0.168, stddev=0.024], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.29,0.32,0.33 0.35,0.37,0.39,0.81), mean=0.299, stddev=0.0347]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01369, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.62,0.62 0.62,0.62,0.62,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.619, stddev=0.00177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.15,0.17,0.18 0.19,0.20,0.21,0.30), mean=0.153, stddev=0.021], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.14 0.16,0.18,0.20,0.23,0.24 0.25,0.28,0.28,0.33), mean=0.202, stddev=0.0359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.35 0.37,0.38,0.41,0.43,0.45 0.46,0.48,0.48,0.51), mean=0.408, stddev=0.0316], bias-{mean,stddev}=-0.03705,0.02641, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.55e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.11 0.13,0.14,0.16,0.18,0.19 0.20,0.21,0.22,0.29), mean=0.157, stddev=0.0267], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.27,0.30,0.34 0.37,0.39,0.43,0.47,0.50 0.51,0.53,0.54,0.57), mean=0.43, stddev=0.0526], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00887, stddev=0.00127], oderiv-count=1.32371e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13239.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.12 0.13,0.15,0.17,0.19,0.20 0.21,0.23,0.24,0.31), mean=0.168, stddev=0.0283], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.28,0.30,0.32,0.34 0.35,0.37,0.39,0.65), mean=0.3, stddev=0.0344]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01385, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.62,0.62 0.62,0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.627, stddev=0.00157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.13,0.14,0.15,0.17,0.18 0.20,0.21,0.23,0.30), mean=0.155, stddev=0.0231], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.10,0.12 0.15,0.17,0.20,0.23,0.24 0.25,0.27,0.28,0.33), mean=0.2, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.36 0.37,0.38,0.41,0.43,0.44 0.45,0.47,0.48,0.51), mean=0.407, stddev=0.03], bias-{mean,stddev}=-0.0342,0.02649, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.95e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.11,0.13,0.15,0.18,0.19 0.20,0.21,0.23,0.25), mean=0.152, stddev=0.0299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.25,0.28,0.31 0.34,0.37,0.42,0.47,0.49 0.50,0.51,0.52,0.56), mean=0.416, stddev=0.058], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00885, stddev=0.0013], oderiv-count=1.25536e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12727.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.12,0.14,0.16,0.19,0.20 0.21,0.23,0.24,0.28), mean=0.163, stddev=0.0321], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.26 0.27,0.28,0.30,0.32,0.34 0.36,0.38,0.40,0.61), mean=0.302, stddev=0.0338]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01431, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.64,0.64 0.64,0.65,0.65,0.65,0.65 0.65,0.65,0.65,0.65), mean=0.648, stddev=0.00185], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.16,0.18,0.19 0.21,0.23,0.24,0.30), mean=0.16, stddev=0.0267], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.10,0.12 0.14,0.18,0.21,0.24,0.25 0.27,0.28,0.30,0.43), mean=0.206, stddev=0.0426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.49,0.51,0.52), mean=0.42, stddev=0.033], bias-{mean,stddev}=-0.02926,0.02411, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.12,0.13,0.16,0.18,0.20 0.21,0.23,0.25,0.43), mean=0.16, stddev=0.034], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.25,0.28,0.32 0.35,0.37,0.42,0.45,0.48 0.50,0.52,0.53,0.59), mean=0.412, stddev=0.0565], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00846, stddev=0.0012], oderiv-count=1.18477e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12215.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.11 0.12,0.14,0.17,0.20,0.21 0.23,0.24,0.26,0.45), mean=0.172, stddev=0.0366], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.27,0.28 0.29,0.30,0.32,0.35,0.36 0.38,0.40,0.42,0.81), mean=0.326, stddev=0.0368]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01474, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.66,0.66,0.66 0.66,0.67,0.67,0.67,0.67 0.67,0.67,0.67,0.67), mean=0.667, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.14,0.16,0.19,0.20 0.22,0.24,0.26,0.33), mean=0.164, stddev=0.0315], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01393, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.15 0.17,0.19,0.22,0.25,0.26 0.27,0.29,0.31,0.36), mean=0.22, stddev=0.0382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.49 0.50,0.51,0.52,0.56), mean=0.445, stddev=0.0339], bias-{mean,stddev}=-0.02613,0.02188, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.13,0.15,0.17,0.20,0.21 0.22,0.24,0.24,0.38), mean=0.172, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.28,0.30,0.33 0.36,0.38,0.42,0.46,0.48 0.50,0.52,0.53,0.57), mean=0.418, stddev=0.05], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.008,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00853, stddev=0.00111], oderiv-count=1.19101e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11703.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.13 0.14,0.16,0.19,0.21,0.22 0.23,0.25,0.26,0.42), mean=0.184, stddev=0.0327], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.29,0.30 0.31,0.32,0.35,0.37,0.39 0.41,0.43,0.45,0.72), mean=0.35, stddev=0.0342]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01361, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.61,0.61 0.61,0.61,0.62,0.62,0.62 0.62,0.62,0.62,0.62), mean=0.616, stddev=0.00159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.17,0.19 0.21,0.24,0.25,0.34), mean=0.15, stddev=0.0325], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.17,0.18,0.21,0.25,0.27 0.29,0.31,0.32,0.37), mean=0.217, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.38,0.39 0.40,0.42,0.44,0.46,0.48 0.49,0.50,0.52,0.53), mean=0.441, stddev=0.0297], bias-{mean,stddev}=-0.02448,0.02034, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.3e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.09,0.10 0.11,0.12,0.15,0.18,0.19 0.21,0.23,0.24,0.35), mean=0.15, stddev=0.0343], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.28,0.30 0.32,0.34,0.39,0.44,0.46 0.48,0.52,0.53,0.59), mean=0.39, stddev=0.0572], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02), mean=0.011, stddev=0.00144], oderiv-count=1.15027e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11191.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.10,0.11 0.12,0.13,0.15,0.18,0.20 0.22,0.24,0.25,0.38), mean=0.158, stddev=0.0355], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.27,0.29 0.30,0.32,0.35,0.38,0.41 0.43,0.45,0.47,0.57), mean=0.352, stddev=0.0434]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.246914, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, params-rms=0.02184, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.70,0.70 0.70,0.70,0.70,0.70,0.70 0.70,0.70,0.70,0.70), mean=0.699, stddev=0.00137], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.29,0.30 0.31,0.32,0.35,0.37,0.39 0.40,0.42,0.43,0.47), mean=0.348, stddev=0.0302], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01459, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.19 0.20,0.21,0.23,0.25,0.27 0.28,0.31,0.33,0.39), mean=0.231, stddev=0.0317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.42 0.44,0.45,0.47,0.49,0.49 0.51,0.53,0.54,0.56), mean=0.466, stddev=0.0257], bias-{mean,stddev}=-0.04289,0.02923, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.32e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.08 0.09,0.10,0.12,0.13,0.14 0.15,0.16,0.16,0.20), mean=0.116, stddev=0.0209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.23,0.25,0.27 0.32,0.34,0.40,0.44,0.46 0.48,0.50,0.52,0.55), mean=0.391, stddev=0.0609], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.05), mean=0.0135, stddev=0.00197], oderiv-count=1.11168e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11191.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.09 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.17,0.21), mean=0.124, stddev=0.022], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.26 0.26,0.27,0.28,0.30), mean=0.234, stddev=0.0178]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, params-rms=0.01909, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61,0.61 0.61,0.61,0.61,0.61), mean=0.611, stddev=0.00102], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.26 0.27,0.28,0.30,0.33,0.34 0.36,0.38,0.39,0.49), mean=0.304, stddev=0.0319], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11191.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-6e-08,-5e-08,-4e-08 -3e-08,-2e-08,-6e-10,2e-08,3e-08 4e-08,4e-08,4e-08,6e-08), mean=-6.67e-10, stddev=2.25e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.85,0.85,0.86 0.87,0.89,0.92,0.96,0.97 0.99,1.0,1.0,1.1), mean=0.924, stddev=0.0416]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000672889, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.08,0.19 0.24,0.29,0.35,0.41,0.45 0.49,0.53,0.55,0.98), mean=0.343, stddev=0.0918], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.1,1.2,1.2,1.2 1.3,1.3,1.3,1.3), mean=1.18, stddev=0.0516], bias-{mean,stddev}=0.0003217,0.06134, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.03,0.04,0.07 0.10,0.13,0.16,0.19,0.19 0.20,0.21,0.22,0.25), mean=0.155, stddev=0.0391], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.28,0.29 0.30,0.30,0.32,0.33,0.35 0.36,0.37,0.38,0.39), mean=0.319, stddev=0.0208], bias-{mean,stddev}=-0.07471,0.06774, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.75e+05, self-repaired-proportion=0.00812477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.007,0.009,0.01 0.02,0.02,0.05,0.08,0.11 0.13,0.15,0.16,0.25), mean=0.0567, stddev=0.0376], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.06,0.07,0.09 0.11,0.15,0.26,0.42,0.50 0.63,0.70,0.74,0.79), mean=0.295, stddev=0.158], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.007,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0096, stddev=0.00286], oderiv-count=1.10442e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11191.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.007,0.009,0.01 0.02,0.03,0.05,0.09,0.11 0.14,0.16,0.17,0.26), mean=0.0601, stddev=0.0393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.05,0.06 0.07,0.09,0.12,0.15,0.16 0.17,0.18,0.20,0.29), mean=0.12, stddev=0.0354]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000672889, l2-regularize=0.008, max-change=0.75, params-rms=0.01248, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.399, stddev=0.000473], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.14,0.15,0.17,0.21,0.28 0.35,0.37,0.38,0.40), mean=0.191, stddev=0.059], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11191.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-3e-08,-3e-08,-2e-08 -2e-08,-9e-09,8e-10,1e-08,2e-08 3e-08,3e-08,3e-08,4e-08), mean=1.57e-09, stddev=1.42e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.42,0.43 0.44,0.44,0.46,0.48,0.49 0.50,0.51,0.51,0.53), mean=0.462, stddev=0.0202]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00336444, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.13 0.22,0.40,0.61,0.77,0.87 0.94,1.0,1.0,1.4), mean=0.582, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.8,1.8,1.9 1.9,2.0,2.1,2.2,2.2 2.2,2.2,2.2,2.3), mean=2.08, stddev=0.102], bias-{mean,stddev}=6.262e-09,0.07833, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-07,6e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00103, stddev=0.00117], oderiv-count=1.12512e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/46.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/47.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.51153 tdnnf2.linear:3.28104 tdnnf2.affine:3.2968 tdnnf3.linear:2.54492 tdnnf3.affine:2.75851 tdnnf4.linear:2.38072 tdnnf4.affine:2.6522 tdnnf5.linear:1.8905 tdnnf5.affine:2.07712 tdnnf6.linear:2.35943 tdnnf6.affine:2.58364 tdnnf7.linear:2.14537 tdnnf7.affine:2.45965 tdnnf8.linear:2.08968 tdnnf8.affine:2.39808 tdnnf9.linear:2.07257 tdnnf9.affine:2.35522 tdnnf10.linear:2.04949 tdnnf10.affine:2.29501 tdnnf11.linear:2.0029 tdnnf11.affine:2.28929 tdnnf12.linear:1.98712 tdnnf12.affine:2.35602 tdnnf13.linear:1.95628 tdnnf13.affine:2.48878 prefinal-l:2.69699 prefinal-chain.affine:2.69573 prefinal-chain.linear:2.13147 output.affine:3.36301 prefinal-xent.affine:1.56427 prefinal-xent.linear:1.09675 output-xent.affine:2.949 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:14.7214 tdnnf2.linear:10.3587 tdnnf2.affine:8.82528 tdnnf3.linear:7.90203 tdnnf3.affine:6.9442 tdnnf4.linear:7.19165 tdnnf4.affine:6.35945 tdnnf5.linear:4.68632 tdnnf5.affine:4.77348 tdnnf6.linear:7.41034 tdnnf6.affine:6.70809 tdnnf7.linear:7.01748 tdnnf7.affine:6.68642 tdnnf8.linear:6.95493 tdnnf8.affine:6.7105 tdnnf9.linear:7.00811 tdnnf9.affine:6.71244 tdnnf10.linear:7.09273 tdnnf10.affine:6.67374 tdnnf11.linear:7.32568 tdnnf11.affine:6.85224 tdnnf12.linear:7.54478 tdnnf12.affine:7.21651 tdnnf13.linear:6.96679 tdnnf13.affine:7.15229 prefinal-l:11.1834 prefinal-chain.affine:7.65097 prefinal-chain.linear:9.77583 output.affine:19.134 prefinal-xent.affine:6.04899 prefinal-xent.linear:6.39169 output-xent.affine:33.6258 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.389857 tdnnf2.linear:0.329812 tdnnf2.affine:0.386299 tdnnf3.linear:0.335992 tdnnf3.affine:0.410651 tdnnf4.linear:0.346381 tdnnf4.affine:0.432749 tdnnf5.linear:0.419763 tdnnf5.affine:0.449134 tdnnf6.linear:0.332729 tdnnf6.affine:0.399795 tdnnf7.linear:0.32033 tdnnf7.affine:0.382408 tdnnf8.linear:0.315774 tdnnf8.affine:0.372255 tdnnf9.linear:0.311148 tdnnf9.affine:0.365702 tdnnf10.linear:0.304756 tdnnf10.affine:0.358795 tdnnf11.linear:0.28786 tdnnf11.affine:0.349063 tdnnf12.linear:0.277577 tdnnf12.affine:0.341259 tdnnf13.linear:0.295213 tdnnf13.affine:0.36286 prefinal-l:0.2544 prefinal-chain.affine:0.370186 prefinal-chain.linear:0.231522 output.affine:0.181288 prefinal-xent.affine:0.272222 prefinal-xent.linear:0.182843 output-xent.affine:0.0904298 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 21 14:39:44 EDT 2022, elapsed time 0 seconds
