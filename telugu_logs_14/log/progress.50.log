# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl 
# Started at Thu Jul 21 14:53:18 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.03136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.19 0.24,0.30,0.39,0.53,0.65 0.78,0.97,1.2,1.3), mean=0.426, stddev=0.188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.60,0.61 0.66,0.73,0.91,1.2,1.4 1.5,1.6,1.7,1.7), mean=0.966, stddev=0.27], bias-{mean,stddev}=-0.009909,0.03706, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.18e+06, self-repaired-proportion=0.0195783, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.001,0.002 0.003,0.005,0.02,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0218, stddev=0.0168], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.11,0.17,0.40,0.66,0.81 0.89,0.92,0.93,0.97), mean=0.424, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.06,0.07,0.09,0.12,0.14 0.16,0.18,0.21,0.29), mean=0.0986, stddev=0.0342], oderiv-count=4.50925e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46243.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0008,0.001,0.002 0.003,0.005,0.02,0.04,0.05 0.05,0.06,0.06,0.08), mean=0.0221, stddev=0.017], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.008 0.01,0.02,0.03,0.04,0.05 0.05,0.05,0.06,0.09), mean=0.0296, stddev=0.0134]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.93), mean=0.918, stddev=0.00302], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.15 0.16,0.19,0.22,0.26,0.29 0.32,0.35,0.37,0.43), mean=0.224, stddev=0.0504], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01667, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.20,0.25,0.31,0.36 0.40,0.43,0.44,0.50), mean=0.258, stddev=0.0693], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.47,0.47,0.48 0.49,0.50,0.53,0.56,0.58 0.59,0.61,0.63,0.67), mean=0.532, stddev=0.0351], bias-{mean,stddev}=-0.05006,0.06112, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.19e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.09 0.11,0.12,0.14,0.16,0.18 0.19,0.21,0.21,0.25), mean=0.143, stddev=0.0291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.24,0.28,0.35 0.37,0.40,0.45,0.49,0.52 0.55,0.57,0.60,0.66), mean=0.445, stddev=0.0636], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.008,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00842, stddev=0.00182], oderiv-count=4.55232e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45731.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.10 0.11,0.13,0.15,0.17,0.18 0.19,0.21,0.22,0.25), mean=0.147, stddev=0.0292], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.20,0.22,0.24,0.28,0.30 0.32,0.35,0.37,0.42), mean=0.25, stddev=0.0411]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01565, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.70,0.70,0.70 0.70,0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71), mean=0.708, stddev=0.00213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.17,0.20,0.21 0.22,0.23,0.24,0.26), mean=0.175, stddev=0.0266], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01355, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.21,0.24,0.27 0.29,0.32,0.33,0.44), mean=0.213, stddev=0.0422], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.46 0.47,0.49,0.49,0.50), mean=0.433, stddev=0.0267], bias-{mean,stddev}=-0.02796,0.02976, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.16,0.18,0.20,0.22 0.23,0.25,0.26,0.43), mean=0.181, stddev=0.0289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.40 0.42,0.44,0.46,0.49,0.51 0.52,0.54,0.54,0.56), mean=0.465, stddev=0.0359], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.005,0.006,0.006 0.007,0.007,0.008,0.01), mean=0.00523, stddev=0.000763], oderiv-count=4.57248e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45219.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.45), mean=0.185, stddev=0.0293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.24 0.26,0.27,0.30,0.34,0.36 0.38,0.41,0.43,0.67), mean=0.308, stddev=0.0458]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.64,0.64 0.64,0.65,0.65,0.65,0.65 0.65,0.65,0.65,0.65), mean=0.647, stddev=0.00245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.16,0.18,0.19 0.20,0.21,0.22,0.25), mean=0.16, stddev=0.0207], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01248, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.19,0.22,0.24 0.25,0.27,0.28,0.37), mean=0.197, stddev=0.0324], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.35 0.37,0.38,0.40,0.42,0.43 0.44,0.45,0.46,0.48), mean=0.399, stddev=0.0263], bias-{mean,stddev}=-0.01953,0.02172, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.17,0.19,0.20 0.21,0.23,0.25,0.43), mean=0.176, stddev=0.0242], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.39,0.41 0.42,0.43,0.46,0.48,0.49 0.51,0.52,0.53,0.58), mean=0.455, stddev=0.0302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.007,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00834, stddev=0.00106], oderiv-count=1.55546e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15073, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.15,0.16,0.18,0.19,0.21 0.22,0.24,0.26,0.44), mean=0.181, stddev=0.0242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.24,0.26 0.27,0.28,0.31,0.34,0.35 0.37,0.39,0.43,0.70), mean=0.31, stddev=0.039]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01322, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.43 0.43,0.43,0.43,0.43), mean=0.423, stddev=0.00203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.13,0.14,0.15,0.16,0.16 0.17,0.18,0.18,0.20), mean=0.149, stddev=0.0124], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.11,0.12,0.14,0.16,0.18 0.19,0.20,0.21,0.23), mean=0.144, stddev=0.025], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.48,0.49,0.50), mean=0.412, stddev=0.0312], bias-{mean,stddev}=-0.01955,0.03697, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.06 0.07,0.08,0.09,0.11,0.12 0.13,0.13,0.14,0.18), mean=0.0939, stddev=0.0213], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.18,0.26 0.30,0.33,0.41,0.47,0.50 0.53,0.56,0.57,0.63), mean=0.401, stddev=0.0831], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0168, stddev=0.00292], oderiv-count=1.53581e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15073, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.06 0.07,0.08,0.10,0.11,0.12 0.13,0.14,0.14,0.18), mean=0.0954, stddev=0.0213], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.13 0.14,0.15,0.17,0.19,0.20 0.22,0.23,0.24,0.32), mean=0.174, stddev=0.0262]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01463, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.66,0.66,0.66 0.66,0.66,0.66,0.66,0.66 0.67,0.67,0.67,0.67), mean=0.662, stddev=0.00188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.15,0.16,0.18,0.19 0.20,0.21,0.22,0.26), mean=0.164, stddev=0.0201], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01308, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.16 0.17,0.18,0.21,0.23,0.24 0.26,0.27,0.28,0.32), mean=0.207, stddev=0.0303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.49,0.50), mean=0.418, stddev=0.0306], bias-{mean,stddev}=-0.03641,0.02219, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.17,0.19,0.20 0.20,0.22,0.23,0.27), mean=0.173, stddev=0.0198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.37,0.39 0.40,0.42,0.45,0.48,0.50 0.51,0.53,0.53,0.56), mean=0.449, stddev=0.0389], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00885, stddev=0.000944], oderiv-count=1.48563e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14561, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.27), mean=0.176, stddev=0.0199], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.27,0.28,0.30,0.33,0.34 0.35,0.37,0.40,0.51), mean=0.306, stddev=0.0311]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.634, stddev=0.00158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.26), mean=0.157, stddev=0.0199], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01312, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.16 0.17,0.19,0.21,0.23,0.24 0.25,0.27,0.28,0.41), mean=0.208, stddev=0.0295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.37 0.38,0.39,0.42,0.44,0.45 0.47,0.48,0.49,0.55), mean=0.419, stddev=0.0304], bias-{mean,stddev}=-0.03841,0.02183, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.36), mean=0.177, stddev=0.0216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.38 0.40,0.41,0.45,0.48,0.50 0.51,0.53,0.54,0.57), mean=0.447, stddev=0.0399], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.007,0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00863, stddev=0.000979], oderiv-count=1.42234e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14049, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.16,0.18,0.20,0.21 0.22,0.23,0.24,0.35), mean=0.182, stddev=0.0222], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.27 0.28,0.29,0.31,0.33,0.35 0.36,0.39,0.42,0.57), mean=0.316, stddev=0.0327]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01398, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63,0.63 0.64,0.64,0.64,0.64), mean=0.633, stddev=0.00144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.157, stddev=0.02], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.13,0.15 0.17,0.19,0.21,0.23,0.25 0.26,0.27,0.28,0.45), mean=0.208, stddev=0.0327], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.49,0.49,0.52), mean=0.42, stddev=0.0304], bias-{mean,stddev}=-0.03941,0.02426, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.31e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.15,0.15,0.17,0.19,0.20 0.21,0.22,0.23,0.42), mean=0.171, stddev=0.0243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.32,0.34,0.37 0.39,0.41,0.44,0.48,0.50 0.51,0.52,0.54,0.56), mean=0.44, stddev=0.0447], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00872, stddev=0.00104], oderiv-count=1.41386e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13537, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.14 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.41), mean=0.175, stddev=0.0242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.27,0.28,0.31,0.33,0.34 0.36,0.39,0.41,0.73), mean=0.309, stddev=0.0368]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.64 0.64,0.64,0.64,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.638, stddev=0.00166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.21,0.22,0.31), mean=0.158, stddev=0.0213], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.12,0.15 0.16,0.18,0.21,0.24,0.25 0.26,0.28,0.29,0.34), mean=0.208, stddev=0.0364], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.48,0.49,0.50,0.52), mean=0.42, stddev=0.0321], bias-{mean,stddev}=-0.03762,0.02491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.66e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.12 0.14,0.15,0.17,0.19,0.21 0.22,0.23,0.24,0.35), mean=0.171, stddev=0.0293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.26,0.30,0.34 0.37,0.39,0.43,0.47,0.50 0.51,0.53,0.55,0.59), mean=0.43, stddev=0.0551], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00848, stddev=0.00113], oderiv-count=1.26784e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13025, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.13 0.14,0.15,0.18,0.20,0.21 0.22,0.23,0.24,0.36), mean=0.175, stddev=0.0296], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.27 0.27,0.28,0.31,0.33,0.35 0.37,0.39,0.41,0.74), mean=0.312, stddev=0.0365]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01428, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.64,0.64 0.64,0.65,0.65,0.65,0.65 0.65,0.65,0.65,0.65), mean=0.646, stddev=0.00142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.13,0.14,0.16,0.18,0.19 0.20,0.22,0.23,0.30), mean=0.16, stddev=0.023], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.13 0.15,0.18,0.21,0.24,0.25 0.26,0.27,0.28,0.37), mean=0.206, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.48,0.52), mean=0.418, stddev=0.031], bias-{mean,stddev}=-0.03467,0.02524, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.09,0.10 0.12,0.14,0.17,0.19,0.20 0.22,0.23,0.25,0.30), mean=0.166, stddev=0.0337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.23,0.27,0.30 0.34,0.37,0.42,0.47,0.49 0.50,0.52,0.53,0.57), mean=0.416, stddev=0.0616], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.008,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00842, stddev=0.00118], oderiv-count=1.23107e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12513, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.11 0.13,0.14,0.17,0.19,0.21 0.22,0.24,0.25,0.33), mean=0.169, stddev=0.0342], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.27 0.28,0.29,0.31,0.34,0.35 0.37,0.39,0.41,0.73), mean=0.313, stddev=0.0356]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01475, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.66,0.66,0.67 0.67,0.67,0.67,0.67,0.67 0.67,0.67,0.67,0.67), mean=0.667, stddev=0.00129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.16,0.18,0.20 0.21,0.23,0.25,0.30), mean=0.165, stddev=0.027], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.12 0.15,0.19,0.22,0.24,0.26 0.27,0.29,0.30,0.42), mean=0.212, stddev=0.0441], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.38 0.39,0.40,0.43,0.46,0.47 0.49,0.50,0.51,0.54), mean=0.431, stddev=0.0332], bias-{mean,stddev}=-0.02966,0.02305, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.11 0.12,0.14,0.18,0.20,0.21 0.23,0.25,0.27,0.47), mean=0.173, stddev=0.0385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.23,0.27,0.31 0.34,0.37,0.42,0.46,0.48 0.50,0.52,0.53,0.59), mean=0.411, stddev=0.0592], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.007,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.0081, stddev=0.0011], oderiv-count=1.23091e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12001, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.11 0.13,0.15,0.18,0.20,0.22 0.23,0.26,0.28,0.47), mean=0.176, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.28 0.29,0.31,0.33,0.36,0.38 0.39,0.41,0.45,0.80), mean=0.336, stddev=0.0388]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01516, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.68,0.68 0.68,0.69,0.69,0.69,0.69 0.69,0.69,0.69,0.69), mean=0.686, stddev=0.00109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.13,0.14,0.16,0.19,0.21 0.23,0.25,0.26,0.34), mean=0.169, stddev=0.0318], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01428, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.13,0.15 0.17,0.20,0.23,0.25,0.27 0.28,0.30,0.31,0.35), mean=0.225, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.40 0.41,0.43,0.45,0.48,0.50 0.51,0.52,0.53,0.57), mean=0.456, stddev=0.034], bias-{mean,stddev}=-0.02634,0.02041, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.14,0.16,0.18,0.21,0.22 0.24,0.25,0.26,0.41), mean=0.183, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.29,0.30,0.33 0.35,0.38,0.42,0.45,0.48 0.49,0.52,0.53,0.57), mean=0.415, stddev=0.0511], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.007,0.008,0.009,0.009 0.01,0.01,0.01,0.02), mean=0.00822, stddev=0.000993], oderiv-count=1.07331e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11489, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.11,0.13 0.14,0.16,0.19,0.21,0.23 0.24,0.25,0.27,0.39), mean=0.185, stddev=0.0344], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.29,0.31 0.32,0.33,0.35,0.38,0.39 0.41,0.44,0.46,0.66), mean=0.355, stddev=0.034]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01403, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.635, stddev=0.00123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.15,0.18,0.20 0.22,0.24,0.26,0.34), mean=0.155, stddev=0.0331], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01415, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.14,0.16 0.17,0.19,0.22,0.26,0.28 0.30,0.31,0.32,0.39), mean=0.222, stddev=0.0419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.40 0.41,0.43,0.45,0.48,0.49 0.50,0.52,0.52,0.54), mean=0.452, stddev=0.0297], bias-{mean,stddev}=-0.02482,0.02002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.6e+05, self-repaired-proportion=0.000536595, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.08,0.09,0.10 0.11,0.12,0.15,0.18,0.20 0.22,0.24,0.24,0.42), mean=0.149, stddev=0.0371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.25,0.26,0.29 0.31,0.33,0.38,0.43,0.46 0.49,0.51,0.52,0.61), mean=0.382, stddev=0.0614], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.009,0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.05), mean=0.011, stddev=0.00182], oderiv-count=1.08154e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10977, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.08,0.09,0.10 0.11,0.12,0.14,0.18,0.20 0.22,0.24,0.25,0.41), mean=0.151, stddev=0.0385], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.25,0.26,0.28 0.29,0.31,0.33,0.37,0.39 0.40,0.43,0.45,0.61), mean=0.337, stddev=0.0398]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.320988, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, params-rms=0.02228, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71,0.71 0.72,0.72,0.72,0.72), mean=0.713, stddev=0.0015], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.33,0.35,0.38,0.39 0.41,0.43,0.43,0.47), mean=0.355, stddev=0.0307], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01523, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.18,0.19 0.21,0.22,0.24,0.26,0.28 0.30,0.32,0.33,0.40), mean=0.242, stddev=0.0317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.43,0.44 0.46,0.47,0.48,0.51,0.52 0.54,0.54,0.55,0.58), mean=0.487, stddev=0.0261], bias-{mean,stddev}=-0.04342,0.02789, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.07,0.09 0.09,0.11,0.12,0.14,0.15 0.16,0.17,0.18,0.23), mean=0.124, stddev=0.0231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.23,0.24,0.28 0.30,0.34,0.39,0.44,0.46 0.48,0.50,0.51,0.55), mean=0.386, stddev=0.0617], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.05), mean=0.0132, stddev=0.00194], oderiv-count=1.14448e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10977, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.16,0.17,0.18,0.24), mean=0.126, stddev=0.024], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.20,0.20,0.21 0.22,0.23,0.24,0.26,0.26 0.27,0.28,0.29,0.32), mean=0.24, stddev=0.0195]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, params-rms=0.01993, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.64,0.64 0.64,0.64,0.64,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.638, stddev=0.000846], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.27 0.28,0.29,0.31,0.34,0.36 0.37,0.39,0.41,0.50), mean=0.317, stddev=0.0335], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10977, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-4e-08 -3e-08,-2e-08,2e-09,2e-08,3e-08 4e-08,5e-08,5e-08,7e-08), mean=3.03e-09, stddev=2.26e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.86,0.87 0.89,0.90,0.94,0.97,0.99 1.0,1.0,1.1,1.1), mean=0.939, stddev=0.0433]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000607433, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.09,0.20 0.26,0.30,0.36,0.43,0.47 0.52,0.56,0.58,0.97), mean=0.362, stddev=0.0965], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.2,1.3,1.3 1.3,1.3,1.4,1.4), mean=1.24, stddev=0.0531], bias-{mean,stddev}=0.0003509,0.0645, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01027, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.04,0.08 0.11,0.14,0.17,0.19,0.20 0.20,0.21,0.22,0.25), mean=0.16, stddev=0.0384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.30 0.30,0.31,0.32,0.34,0.36 0.37,0.38,0.40,0.43), mean=0.328, stddev=0.0236], bias-{mean,stddev}=-0.07712,0.06765, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.68e+05, self-repaired-proportion=0.00887011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.006,0.008,0.01 0.02,0.03,0.05,0.09,0.12 0.15,0.17,0.18,0.30), mean=0.0622, stddev=0.0422], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.08 0.10,0.15,0.26,0.42,0.50 0.61,0.69,0.73,0.80), mean=0.292, stddev=0.159], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.006,0.007,0.008,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00925, stddev=0.00294], oderiv-count=1.09459e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10977, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.006,0.008,0.01 0.02,0.03,0.05,0.09,0.12 0.15,0.17,0.18,0.31), mean=0.063, stddev=0.0427], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.05,0.06 0.07,0.09,0.13,0.16,0.17 0.18,0.20,0.22,0.30), mean=0.126, stddev=0.0391]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000607433, l2-regularize=0.008, max-change=0.75, params-rms=0.01297, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.415, stddev=0.000323], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.15,0.16,0.18,0.21,0.29 0.37,0.39,0.39,0.41), mean=0.199, stddev=0.0603], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10977, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-2e-08 -2e-08,-1e-08,-3e-10,1e-08,2e-08 3e-08,3e-08,3e-08,5e-08), mean=5.9e-10, stddev=1.53e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.43 0.44,0.45,0.46,0.48,0.49 0.50,0.51,0.51,0.54), mean=0.464, stddev=0.0205]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00303717, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.04049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.04,0.15 0.27,0.43,0.63,0.79,0.89 0.96,1.0,1.1,1.4), mean=0.605, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,1.9 2.0,2.1,2.2,2.2,2.3 2.3,2.3,2.3,2.3), mean=2.15, stddev=0.103], bias-{mean,stddev}=8.897e-09,0.08208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-07,7e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.12358e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/49.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.99015 tdnnf2.linear:3.05572 tdnnf2.affine:3.0441 tdnnf3.linear:2.40027 tdnnf3.affine:2.58406 tdnnf4.linear:2.2448 tdnnf4.affine:2.45081 tdnnf5.linear:1.77919 tdnnf5.affine:1.96142 tdnnf6.linear:2.23349 tdnnf6.affine:2.42383 tdnnf7.linear:2.02681 tdnnf7.affine:2.34324 tdnnf8.linear:1.99902 tdnnf8.affine:2.27315 tdnnf9.linear:1.96882 tdnnf9.affine:2.22855 tdnnf10.linear:1.94786 tdnnf10.affine:2.16755 tdnnf11.linear:1.90526 tdnnf11.affine:2.14767 tdnnf12.linear:1.87778 tdnnf12.affine:2.19382 tdnnf13.linear:1.86734 tdnnf13.affine:2.33721 prefinal-l:2.473 prefinal-chain.affine:2.50137 prefinal-chain.linear:1.86502 output.affine:2.96835 prefinal-xent.affine:1.41981 prefinal-xent.linear:0.926329 output-xent.affine:2.31842 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:14.936 tdnnf2.linear:10.3829 tdnnf2.affine:8.90345 tdnnf3.linear:8.01054 tdnnf3.affine:7.05971 tdnnf4.linear:7.32377 tdnnf4.affine:6.45913 tdnnf5.linear:4.7844 tdnnf5.affine:4.86171 tdnnf6.linear:7.49178 tdnnf6.affine:6.83596 tdnnf7.linear:7.17018 tdnnf7.affine:6.86364 tdnnf8.linear:7.15994 tdnnf8.affine:6.90256 tdnnf9.linear:7.21715 tdnnf9.affine:6.8971 tdnnf10.linear:7.31387 tdnnf10.affine:6.85029 tdnnf11.linear:7.55035 tdnnf11.affine:7.02728 tdnnf12.linear:7.7639 tdnnf12.affine:7.39026 tdnnf13.linear:7.18313 tdnnf13.affine:7.31461 prefinal-l:11.4079 prefinal-chain.affine:7.97093 prefinal-chain.linear:10.2017 output.affine:20.1876 prefinal-xent.affine:6.19862 prefinal-xent.linear:6.64108 output-xent.affine:34.7014 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.33331 tdnnf2.linear:0.292481 tdnnf2.affine:0.340887 tdnnf3.linear:0.299023 tdnnf3.affine:0.366084 tdnnf4.linear:0.306083 tdnnf4.affine:0.379238 tdnnf5.linear:0.372263 tdnnf5.affine:0.404237 tdnnf6.linear:0.296886 tdnnf6.affine:0.354276 tdnnf7.linear:0.282478 tdnnf7.affine:0.34275 tdnnf8.linear:0.279341 tdnnf8.affine:0.330027 tdnnf9.linear:0.272885 tdnnf9.affine:0.323564 tdnnf10.linear:0.266745 tdnnf10.affine:0.316593 tdnnf11.linear:0.252798 tdnnf11.affine:0.305936 tdnnf12.linear:0.242005 tdnnf12.affine:0.29676 tdnnf13.linear:0.260067 tdnnf13.affine:0.319131 prefinal-l:0.21603 prefinal-chain.affine:0.315677 prefinal-chain.linear:0.183676 output.affine:0.149156 prefinal-xent.affine:0.228859 prefinal-xent.linear:0.14005 output-xent.affine:0.0672527 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 21 14:53:18 EDT 2022, elapsed time 0 seconds
