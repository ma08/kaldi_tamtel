# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/45.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/44.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/45.mdl 
# Started at Thu Jul 21 14:19:36 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/45.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02516, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.13 0.18,0.23,0.31,0.42,0.52 0.63,0.81,0.91,1.0), mean=0.34, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.50 0.54,0.59,0.74,0.94,1.1 1.2,1.3,1.3,1.4), mean=0.777, stddev=0.212], bias-{mean,stddev}=-0.006205,0.02913, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.2e+06, self-repaired-proportion=0.0249005, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0004,0.0006,0.001 0.002,0.003,0.02,0.03,0.04 0.04,0.05,0.05,0.07), mean=0.018, stddev=0.0145], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.11,0.16,0.40,0.68,0.81 0.90,0.93,0.94,0.96), mean=0.425, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.08,0.11,0.15,0.17 0.19,0.23,0.27,0.35), mean=0.117, stddev=0.0448], oderiv-count=4.35168e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46730.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0003,0.0005,0.001 0.002,0.003,0.02,0.03,0.04 0.04,0.05,0.05,0.07), mean=0.0179, stddev=0.0146], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.003,0.005 0.007,0.01,0.02,0.03,0.04 0.04,0.05,0.05,0.08), mean=0.0232, stddev=0.0122]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01608, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.72,0.72,0.72 0.73,0.73,0.73,0.73,0.73 0.73,0.73,0.73,0.73), mean=0.728, stddev=0.00183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.17,0.21,0.23 0.26,0.28,0.30,0.33), mean=0.177, stddev=0.0426], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.15,0.16,0.20,0.25,0.29 0.33,0.35,0.35,0.40), mean=0.209, stddev=0.0562], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.39 0.40,0.41,0.43,0.45,0.46 0.48,0.49,0.50,0.53), mean=0.432, stddev=0.0263], bias-{mean,stddev}=-0.03922,0.05135, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.04 0.05,0.06,0.07,0.08,0.09 0.10,0.11,0.11,0.14), mean=0.0709, stddev=0.0185], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.17,0.28 0.31,0.35,0.42,0.49,0.55 0.59,0.65,0.70,0.79), mean=0.423, stddev=0.0996], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.06), mean=0.0166, stddev=0.00457], oderiv-count=4.77146e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46218.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.07,0.08,0.09 0.10,0.11,0.11,0.14), mean=0.0695, stddev=0.0186], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.18,0.19,0.24), mean=0.122, stddev=0.0242]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.56,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.555, stddev=0.00106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.19,0.21), mean=0.137, stddev=0.0214], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.20,0.21 0.23,0.25,0.26,0.37), mean=0.173, stddev=0.0322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.33,0.34,0.35,0.37,0.38 0.38,0.39,0.39,0.40), mean=0.351, stddev=0.0194], bias-{mean,stddev}=-0.02196,0.02571, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.10,0.11,0.12 0.13,0.14,0.14,0.27), mean=0.0985, stddev=0.0177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.35,0.37 0.40,0.42,0.46,0.49,0.51 0.53,0.55,0.56,0.61), mean=0.453, stddev=0.0467], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00936, stddev=0.00156], oderiv-count=4.42195e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45706.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.10,0.11,0.12 0.13,0.14,0.14,0.26), mean=0.0983, stddev=0.018], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.14,0.16,0.19,0.20 0.21,0.23,0.24,0.38), mean=0.166, stddev=0.0263]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.503, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.14,0.15 0.15,0.16,0.17,0.19), mean=0.125, stddev=0.016], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.16,0.18,0.19 0.20,0.22,0.23,0.31), mean=0.161, stddev=0.0253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.31,0.32,0.34,0.35 0.36,0.37,0.37,0.40), mean=0.324, stddev=0.0205], bias-{mean,stddev}=-0.0157,0.01918, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.26), mean=0.0976, stddev=0.0144], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.38 0.40,0.42,0.45,0.48,0.49 0.51,0.52,0.53,0.58), mean=0.448, stddev=0.0389], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0147, stddev=0.002], oderiv-count=1.50093e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15235.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.24), mean=0.0971, stddev=0.0145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.17,0.18,0.19 0.20,0.22,0.24,0.38), mean=0.169, stddev=0.0218]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33), mean=0.332, stddev=8.63e-05], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.10,0.11,0.12,0.12,0.13 0.13,0.14,0.14,0.17), mean=0.117, stddev=0.0099], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.09,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.19), mean=0.118, stddev=0.0198], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.30 0.31,0.32,0.34,0.35,0.36 0.37,0.39,0.40,0.41), mean=0.338, stddev=0.0224], bias-{mean,stddev}=-0.01279,0.02586, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.11), mean=0.0515, stddev=0.0136], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.17,0.23 0.27,0.32,0.40,0.48,0.51 0.54,0.58,0.60,0.72), mean=0.397, stddev=0.0955], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.06), mean=0.0292, stddev=0.0049], oderiv-count=1.53734e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15235.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.11), mean=0.0512, stddev=0.0135], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.07,0.08,0.09,0.11,0.11 0.12,0.13,0.13,0.19), mean=0.094, stddev=0.0159]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01142, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.517, stddev=0.0014], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.10 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.21), mean=0.128, stddev=0.0156], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01051, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.17,0.19,0.20 0.21,0.22,0.23,0.27), mean=0.166, stddev=0.0239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.31,0.32,0.33,0.35,0.36 0.37,0.38,0.39,0.39), mean=0.336, stddev=0.0224], bias-{mean,stddev}=-0.02911,0.01921, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.16), mean=0.0933, stddev=0.0123], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.33,0.36 0.37,0.39,0.43,0.47,0.49 0.50,0.52,0.53,0.56), mean=0.43, stddev=0.046], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0157, stddev=0.00197], oderiv-count=1.52026e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14723.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.16), mean=0.0921, stddev=0.0126], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.19 0.19,0.20,0.21,0.30), mean=0.165, stddev=0.0176]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.491, stddev=0.000657], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.16,0.16,0.21), mean=0.122, stddev=0.0153], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01041, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.29), mean=0.165, stddev=0.0219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.30,0.31,0.33,0.35,0.36 0.36,0.37,0.38,0.41), mean=0.332, stddev=0.0208], bias-{mean,stddev}=-0.03041,0.01865, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.08,0.08,0.09,0.10,0.11 0.12,0.12,0.13,0.20), mean=0.0951, stddev=0.0132], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.34,0.36 0.37,0.39,0.43,0.47,0.49 0.51,0.52,0.53,0.56), mean=0.43, stddev=0.0459], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0151, stddev=0.00195], oderiv-count=1.36365e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14211.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.08,0.08,0.09,0.10,0.11 0.12,0.12,0.13,0.19), mean=0.0945, stddev=0.0134], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.14,0.14 0.15,0.15,0.17,0.18,0.19 0.20,0.21,0.23,0.31), mean=0.169, stddev=0.0187]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01076, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.487, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.121, stddev=0.0154], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.11,0.12 0.14,0.15,0.16,0.18,0.19 0.20,0.21,0.22,0.35), mean=0.164, stddev=0.0243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.30,0.31,0.33,0.35,0.36 0.37,0.38,0.39,0.40), mean=0.331, stddev=0.0221], bias-{mean,stddev}=-0.03163,0.0209, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.25), mean=0.0913, stddev=0.0148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.31,0.34 0.36,0.39,0.42,0.47,0.49 0.51,0.52,0.54,0.56), mean=0.423, stddev=0.0516], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0154, stddev=0.00213], oderiv-count=1.34144e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13699.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.24), mean=0.0904, stddev=0.0149], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.19,0.21,0.21,0.46), mean=0.163, stddev=0.0206]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.489, stddev=0.00109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.16,0.16,0.22), mean=0.121, stddev=0.0162], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01035, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.12 0.13,0.14,0.16,0.19,0.20 0.20,0.22,0.22,0.26), mean=0.163, stddev=0.0272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.29 0.30,0.31,0.33,0.35,0.36 0.37,0.38,0.38,0.40), mean=0.33, stddev=0.0232], bias-{mean,stddev}=-0.03051,0.02177, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.08,0.09,0.10,0.11 0.12,0.13,0.13,0.18), mean=0.0906, stddev=0.017], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.25,0.27,0.31 0.34,0.37,0.42,0.47,0.49 0.51,0.53,0.55,0.57), mean=0.417, stddev=0.0609], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.015, stddev=0.00233], oderiv-count=1.33126e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13187.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.08,0.09,0.10,0.11 0.12,0.12,0.13,0.17), mean=0.0897, stddev=0.017], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.18 0.19,0.21,0.22,0.38), mean=0.163, stddev=0.0198]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01086, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.492, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.17,0.17,0.23), mean=0.122, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.11 0.12,0.14,0.16,0.18,0.19 0.20,0.21,0.22,0.29), mean=0.161, stddev=0.0293], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.31,0.33,0.34,0.35 0.36,0.37,0.38,0.40), mean=0.327, stddev=0.0217], bias-{mean,stddev}=-0.02823,0.02192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.05 0.06,0.07,0.09,0.10,0.11 0.11,0.13,0.13,0.18), mean=0.0878, stddev=0.0186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.22,0.25,0.29 0.32,0.36,0.41,0.46,0.48 0.51,0.52,0.53,0.56), mean=0.404, stddev=0.0648], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.015, stddev=0.00234], oderiv-count=1.27488e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12675.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.06,0.07,0.09,0.10,0.11 0.11,0.12,0.13,0.17), mean=0.0864, stddev=0.0186], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.16,0.18,0.19 0.19,0.21,0.21,0.37), mean=0.163, stddev=0.0196]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.505, stddev=0.000992], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.19,0.22), mean=0.125, stddev=0.0202], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01051, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.09,0.10 0.12,0.15,0.17,0.19,0.20 0.21,0.22,0.23,0.33), mean=0.165, stddev=0.0312], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.30,0.32,0.34,0.35,0.36 0.37,0.39,0.40,0.41), mean=0.335, stddev=0.0237], bias-{mean,stddev}=-0.02457,0.02031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.17e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.06,0.08,0.09,0.11,0.11 0.12,0.13,0.14,0.26), mean=0.0914, stddev=0.0205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.26,0.30 0.33,0.36,0.41,0.45,0.48 0.50,0.52,0.53,0.59), mean=0.403, stddev=0.0601], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0144, stddev=0.0022], oderiv-count=1.21082e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12163.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.06,0.07,0.09,0.11,0.11 0.12,0.13,0.14,0.27), mean=0.0907, stddev=0.0208], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.17,0.19,0.20 0.20,0.21,0.22,0.43), mean=0.173, stddev=0.0214]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01142, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.517, stddev=0.00123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.16 0.17,0.18,0.20,0.25), mean=0.127, stddev=0.0238], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.14,0.15,0.18,0.19,0.20 0.21,0.23,0.24,0.28), mean=0.174, stddev=0.0274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.31 0.32,0.33,0.35,0.37,0.38 0.39,0.40,0.40,0.44), mean=0.352, stddev=0.0239], bias-{mean,stddev}=-0.02248,0.01829, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.08,0.10,0.11,0.12 0.13,0.14,0.15,0.22), mean=0.0983, stddev=0.0189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.27,0.31 0.34,0.37,0.41,0.45,0.48 0.50,0.52,0.54,0.59), mean=0.408, stddev=0.0564], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0144, stddev=0.00198], oderiv-count=1.09894e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11651.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.08,0.10,0.11,0.12 0.13,0.14,0.15,0.22), mean=0.0975, stddev=0.0193], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.17,0.18,0.20,0.21 0.22,0.23,0.23,0.37), mean=0.185, stddev=0.0197]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01078, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49,0.49 0.49,0.49,0.49,0.49), mean=0.488, stddev=0.000657], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.14,0.15 0.17,0.19,0.20,0.26), mean=0.119, stddev=0.0248], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.15,0.18,0.20,0.21 0.23,0.24,0.25,0.29), mean=0.177, stddev=0.0299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.32 0.33,0.34,0.36,0.38,0.38 0.40,0.40,0.42,0.43), mean=0.359, stddev=0.0217], bias-{mean,stddev}=-0.02149,0.0166, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.63e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.07,0.07,0.09,0.11,0.12 0.13,0.14,0.15,0.22), mean=0.0898, stddev=0.0209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.25,0.28,0.31 0.33,0.35,0.39,0.44,0.46 0.49,0.52,0.53,0.57), mean=0.394, stddev=0.056], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04), mean=0.0178, stddev=0.00246], oderiv-count=1.14778e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11139.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.06,0.07,0.09,0.10,0.11 0.12,0.13,0.14,0.23), mean=0.0883, stddev=0.0206], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.14,0.15 0.16,0.17,0.18,0.20,0.22 0.23,0.24,0.25,0.32), mean=0.185, stddev=0.0242]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.209877, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, params-rms=0.01642, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.525, stddev=0.00138], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.23 0.24,0.24,0.26,0.28,0.29 0.30,0.31,0.32,0.35), mean=0.262, stddev=0.0222], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01155, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.14,0.15 0.16,0.16,0.18,0.20,0.21 0.22,0.23,0.25,0.30), mean=0.183, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.35,0.35,0.37,0.38,0.39 0.40,0.41,0.42,0.44), mean=0.369, stddev=0.0188], bias-{mean,stddev}=-0.03465,0.02245, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.04 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.11), mean=0.0632, stddev=0.0133], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.20,0.22,0.25 0.28,0.32,0.38,0.43,0.45 0.48,0.50,0.51,0.57), mean=0.374, stddev=0.0687], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.07), mean=0.0228, stddev=0.00334], oderiv-count=1.14368e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11139.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.10,0.11), mean=0.0616, stddev=0.0135], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.16), mean=0.12, stddev=0.0109]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, params-rms=0.0145, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.47 0.47,0.47,0.47,0.47), mean=0.464, stddev=0.000922], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.23,0.25,0.26 0.27,0.28,0.29,0.36), mean=0.231, stddev=0.0229], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11139.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,-2e-09,2e-08,3e-08 4e-08,5e-08,5e-08,6e-08), mean=-3.7e-10, stddev=2.23e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.58,0.60 0.60,0.62,0.64,0.67,0.68 0.70,0.72,0.75,0.79), mean=0.644, stddev=0.0327]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000354108, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.07,0.17 0.22,0.27,0.32,0.38,0.42 0.45,0.50,0.52,0.88), mean=0.317, stddev=0.0868], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.99,1.0,1.0 1.0,1.1,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.09, stddev=0.0476], bias-{mean,stddev}=0.0002944,0.05621, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.007637, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.05 0.07,0.10,0.12,0.14,0.15 0.16,0.16,0.17,0.20), mean=0.118, stddev=0.0313], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.23,0.23,0.24,0.25,0.26 0.27,0.28,0.28,0.30), mean=0.244, stddev=0.014], bias-{mean,stddev}=-0.05617,0.05136, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.04e+05, self-repaired-proportion=0.0186712, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.003,0.004,0.006 0.007,0.01,0.02,0.05,0.06 0.08,0.10,0.10,0.16), mean=0.0308, stddev=0.0246], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.08,0.11,0.22,0.40,0.51 0.64,0.74,0.76,0.81), mean=0.269, stddev=0.175], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.0159, stddev=0.00441], oderiv-count=1.13382e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11139.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.003,0.004,0.005 0.007,0.01,0.02,0.05,0.06 0.08,0.10,0.10,0.16), mean=0.0301, stddev=0.0243], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.08 0.09,0.10,0.11,0.17), mean=0.0608, stddev=0.0209]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000354108, l2-regularize=0.008, max-change=0.75, params-rms=0.009375, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.30,0.30 0.30,0.30,0.30,0.30,0.30 0.30,0.30,0.30,0.30), mean=0.3, stddev=0.000334], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.11,0.13,0.16,0.21 0.26,0.28,0.28,0.30), mean=0.143, stddev=0.0455], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11139.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-3e-08,-3e-08,-2e-08 -2e-08,-1e-08,5e-10,1e-08,2e-08 2e-08,2e-08,3e-08,5e-08), mean=7.82e-10, stddev=1.4e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.28 0.28,0.29,0.30,0.31,0.32 0.32,0.33,0.33,0.35), mean=0.301, stddev=0.0124]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00177054, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03443, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.09 0.17,0.30,0.53,0.69,0.78 0.85,0.91,0.94,1.3), mean=0.503, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.7 1.7,1.8,1.8,1.9,1.9 1.9,2.0,2.0,2.0), mean=1.83, stddev=0.0872], bias-{mean,stddev}=4.918e-09,0.06336, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-08,5e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.12582e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/44.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/45.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.13945 tdnnf2.linear:3.15253 tdnnf2.affine:3.15375 tdnnf3.linear:2.44084 tdnnf3.affine:2.62433 tdnnf4.linear:2.25872 tdnnf4.affine:2.48255 tdnnf5.linear:1.80233 tdnnf5.affine:1.96182 tdnnf6.linear:2.24227 tdnnf6.affine:2.43988 tdnnf7.linear:2.02396 tdnnf7.affine:2.31603 tdnnf8.linear:1.96153 tdnnf8.affine:2.26255 tdnnf9.linear:1.93507 tdnnf9.affine:2.21944 tdnnf10.linear:1.90369 tdnnf10.affine:2.15669 tdnnf11.linear:1.86547 tdnnf11.affine:2.1336 tdnnf12.linear:1.82771 tdnnf12.affine:2.17742 tdnnf13.linear:1.82138 tdnnf13.affine:2.31491 prefinal-l:2.44246 prefinal-chain.affine:2.51663 prefinal-chain.linear:1.91447 output.affine:2.55954 prefinal-xent.affine:1.39249 prefinal-xent.linear:0.869448 output-xent.affine:2.04587 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9799 tdnnf2.linear:8.23422 tdnnf2.affine:7.23445 tdnnf3.linear:6.28373 tdnnf3.affine:5.72213 tdnnf4.linear:5.6869 tdnnf4.affine:5.26198 tdnnf5.linear:3.75978 tdnnf5.affine:3.93878 tdnnf6.linear:5.84786 tdnnf6.affine:5.49513 tdnnf7.linear:5.55762 tdnnf7.affine:5.45123 tdnnf8.linear:5.511 tdnnf8.affine:5.44082 tdnnf9.linear:5.52774 tdnnf9.affine:5.43242 tdnnf10.linear:5.56082 tdnnf10.affine:5.36614 tdnnf11.linear:5.71234 tdnnf11.affine:5.47632 tdnnf12.linear:5.84739 tdnnf12.affine:5.7234 tdnnf13.linear:5.52 tdnnf13.affine:5.81643 prefinal-l:8.40711 prefinal-chain.affine:6.06052 prefinal-chain.linear:7.42451 output.affine:17.716 prefinal-xent.affine:4.6065 prefinal-xent.linear:4.79975 output-xent.affine:29.4678 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.425541 tdnnf2.linear:0.379764 tdnnf2.affine:0.433239 tdnnf3.linear:0.385998 tdnnf3.affine:0.456266 tdnnf4.linear:0.394628 tdnnf4.affine:0.469819 tdnnf5.linear:0.478084 tdnnf5.affine:0.496249 tdnnf6.linear:0.380514 tdnnf6.affine:0.441882 tdnnf7.linear:0.361736 tdnnf7.affine:0.423079 tdnnf8.linear:0.353674 tdnnf8.affine:0.414468 tdnnf9.linear:0.34751 tdnnf9.affine:0.407295 tdnnf10.linear:0.34029 tdnnf10.affine:0.400656 tdnnf11.linear:0.324969 tdnnf11.affine:0.388196 tdnnf12.linear:0.310748 tdnnf12.affine:0.378986 tdnnf13.linear:0.328648 tdnnf13.affine:0.395413 prefinal-l:0.288286 prefinal-chain.affine:0.413615 prefinal-chain.linear:0.256573 output.affine:0.144591 prefinal-xent.affine:0.300202 prefinal-xent.linear:0.180241 output-xent.affine:0.0695297 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 21 14:19:37 EDT 2022, elapsed time 1 seconds
