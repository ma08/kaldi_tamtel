# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/5.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl 
# Started at Thu Jul 21 12:36:07 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02535, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.10,0.10,0.31,0.45,0.57 0.72,0.85,0.96,1.2), mean=0.315, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.50,0.53 0.54,0.58,0.72,0.95,1.1 1.3,1.4,1.4,1.5), mean=0.777, stddev=0.231], bias-{mean,stddev}=0.00379,0.07193, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.08e+06, self-repaired-proportion=0.514914, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,7e-07,0.04,0.08,0.11 0.15,0.19,0.22,0.36), mean=0.044, stddev=0.0524], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0002,0.45,0.92,0.99 1.0,1.0,1.0,1.0), mean=0.456, stddev=0.409], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.07,0.11,0.14 0.17,0.21,0.23,0.41), mean=0.0841, stddev=0.0438], oderiv-count=4.72704e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47651.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-06,0.03,0.07,0.09 0.12,0.14,0.17,0.28), mean=0.0378, stddev=0.0421], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,8e-05,0.03,0.05,0.06 0.07,0.07,0.08,0.10), mean=0.0287, stddev=0.0247]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.81,0.82 0.82,0.82,0.82,0.82,0.82 0.82,0.82,0.82,0.83), mean=0.819, stddev=0.0024], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.14,0.15,0.19,0.23,0.28 0.31,0.34,0.36,0.41), mean=0.198, stddev=0.0524], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01579, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.23,0.30,0.33 0.37,0.42,0.45,0.54), mean=0.243, stddev=0.0705], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.45,0.46 0.47,0.47,0.50,0.53,0.55 0.57,0.58,0.59,0.59), mean=0.504, stddev=0.0328], bias-{mean,stddev}=-0.02913,0.1153, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.01e+06, self-repaired-proportion=0.000718391, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.06 0.08,0.09,0.13,0.17,0.19 0.21,0.23,0.24,0.28), mean=0.134, stddev=0.0455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.20,0.24 0.28,0.33,0.46,0.65,0.74 0.83,0.87,0.88,0.93), mean=0.488, stddev=0.174], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.008,0.008,0.01,0.01,0.02 0.02,0.02,0.02,0.04), mean=0.0113, stddev=0.00367], oderiv-count=4.64038e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47139.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.08,0.09,0.13,0.16,0.18 0.19,0.21,0.21,0.26), mean=0.128, stddev=0.039], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.16,0.20,0.23,0.25 0.26,0.28,0.29,0.33), mean=0.196, stddev=0.0401]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01465, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.66,0.66,0.66 0.66,0.66,0.66,0.66,0.67 0.67,0.67,0.67,0.67), mean=0.663, stddev=0.00153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.16,0.19,0.20 0.21,0.22,0.23,0.27), mean=0.164, stddev=0.027], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.20,0.24,0.26 0.28,0.30,0.32,0.38), mean=0.207, stddev=0.0406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.39 0.39,0.40,0.42,0.44,0.45 0.46,0.47,0.47,0.47), mean=0.422, stddev=0.0222], bias-{mean,stddev}=-0.01434,0.1052, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.09,0.11,0.15,0.19,0.22 0.25,0.26,0.28,0.34), mean=0.152, stddev=0.0495], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.27 0.30,0.35,0.48,0.61,0.68 0.73,0.80,0.83,0.90), mean=0.485, stddev=0.144], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.007,0.008,0.009 0.01,0.01,0.01,0.02), mean=0.00713, stddev=0.00185], oderiv-count=4.52832e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46627.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.11,0.14,0.18,0.20 0.22,0.24,0.25,0.29), mean=0.146, stddev=0.0417], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.17 0.19,0.20,0.23,0.25,0.27 0.28,0.30,0.31,0.35), mean=0.227, stddev=0.0322]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58,0.58 0.58,0.58,0.58,0.58), mean=0.581, stddev=0.00144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.20,0.23), mean=0.144, stddev=0.019], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.20,0.22,0.24 0.25,0.27,0.28,0.33), mean=0.199, stddev=0.0317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.37,0.38,0.40,0.42,0.43 0.44,0.45,0.45,0.46), mean=0.402, stddev=0.0224], bias-{mean,stddev}=-0.006582,0.109, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.08 0.09,0.11,0.15,0.20,0.23 0.26,0.29,0.32,0.42), mean=0.158, stddev=0.0546], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.18,0.20,0.26 0.29,0.36,0.48,0.61,0.70 0.76,0.81,0.84,0.93), mean=0.485, stddev=0.149], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.009,0.01,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.0111, stddev=0.00251], oderiv-count=1.49587e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15542.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.08 0.10,0.12,0.15,0.19,0.21 0.23,0.26,0.28,0.36), mean=0.153, stddev=0.0458], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.17,0.19 0.20,0.21,0.24,0.27,0.28 0.29,0.30,0.31,0.38), mean=0.24, stddev=0.0326]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01433, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.459, stddev=0.00181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.161, stddev=0.0162], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.11 0.12,0.13,0.16,0.18,0.20 0.21,0.22,0.23,0.28), mean=0.16, stddev=0.0295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.41,0.42 0.43,0.44,0.46,0.48,0.49 0.50,0.50,0.50,0.51), mean=0.459, stddev=0.0235], bias-{mean,stddev}=-0.007462,0.1033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.00575912, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.02,0.02,0.03 0.05,0.06,0.10,0.15,0.18 0.22,0.25,0.28,0.34), mean=0.109, stddev=0.0557], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.10,0.12,0.17 0.22,0.29,0.46,0.65,0.75 0.81,0.89,0.91,0.95), mean=0.473, stddev=0.197], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.08), mean=0.0165, stddev=0.00607], oderiv-count=1.5168e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15542.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-12,0.02,0.02,0.03 0.04,0.06,0.10,0.13,0.16 0.19,0.22,0.24,0.28), mean=0.1, stddev=0.0468], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,0.06,0.08,0.10 0.11,0.13,0.15,0.17,0.19 0.20,0.21,0.22,0.23), mean=0.15, stddev=0.0308]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.536, stddev=0.00143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.11,0.12,0.13,0.15,0.15 0.16,0.17,0.17,0.20), mean=0.133, stddev=0.0146], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.15,0.17,0.19,0.21,0.22 0.24,0.25,0.26,0.30), mean=0.19, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.34,0.34 0.35,0.36,0.38,0.40,0.42 0.42,0.43,0.44,0.45), mean=0.383, stddev=0.0243], bias-{mean,stddev}=-0.01643,0.09963, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.09,0.10,0.14,0.19,0.22 0.24,0.27,0.29,0.41), mean=0.147, stddev=0.0525], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.19,0.22,0.26 0.30,0.35,0.47,0.59,0.66 0.70,0.76,0.79,0.90), mean=0.471, stddev=0.136], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.007 0.008,0.008,0.01,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0106, stddev=0.00247], oderiv-count=1.53766e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15030.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.09,0.10,0.13,0.18,0.20 0.21,0.23,0.25,0.34), mean=0.139, stddev=0.0439], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.18 0.19,0.20,0.22,0.25,0.26 0.27,0.28,0.29,0.32), mean=0.223, stddev=0.029]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.53,0.53,0.53), mean=0.524, stddev=0.000752], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.21), mean=0.13, stddev=0.014], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.15,0.16,0.19,0.21,0.22 0.23,0.24,0.25,0.28), mean=0.188, stddev=0.0262], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.35,0.36,0.38,0.40,0.41 0.41,0.42,0.43,0.46), mean=0.378, stddev=0.0221], bias-{mean,stddev}=-0.01207,0.1066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.07 0.08,0.10,0.14,0.19,0.23 0.25,0.30,0.33,0.42), mean=0.147, stddev=0.0597], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.21,0.25 0.28,0.33,0.47,0.60,0.67 0.73,0.80,0.81,0.87), mean=0.472, stddev=0.149], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.008,0.008,0.01,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0105, stddev=0.00263], oderiv-count=1.39821e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14518.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.08,0.10,0.13,0.18,0.21 0.23,0.26,0.28,0.36), mean=0.138, stddev=0.0498], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.15,0.17 0.18,0.19,0.22,0.24,0.26 0.27,0.28,0.29,0.33), mean=0.217, stddev=0.0307]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52), mean=0.518, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.19), mean=0.129, stddev=0.0145], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.15,0.16,0.18,0.21,0.22 0.23,0.24,0.25,0.27), mean=0.186, stddev=0.0255], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.35,0.36,0.37,0.39,0.40 0.41,0.42,0.43,0.45), mean=0.375, stddev=0.0217], bias-{mean,stddev}=-0.01759,0.109, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.43e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.07,0.09,0.13,0.18,0.22 0.25,0.30,0.31,0.38), mean=0.142, stddev=0.0586], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.19,0.23 0.27,0.33,0.46,0.60,0.67 0.73,0.79,0.83,0.89), mean=0.466, stddev=0.153], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.007 0.008,0.008,0.01,0.01,0.01 0.02,0.02,0.02,0.04), mean=0.0107, stddev=0.00292], oderiv-count=1.34016e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14006.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.07,0.09,0.13,0.17,0.20 0.22,0.25,0.27,0.33), mean=0.133, stddev=0.0494], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.14,0.15 0.17,0.18,0.21,0.23,0.25 0.26,0.28,0.28,0.31), mean=0.21, stddev=0.0322]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01155, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.53), mean=0.523, stddev=0.000897], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.22), mean=0.13, stddev=0.015], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.24,0.24,0.27), mean=0.184, stddev=0.0247], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.43,0.43,0.44), mean=0.371, stddev=0.0246], bias-{mean,stddev}=-0.01564,0.1078, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.94e+05, self-repaired-proportion=0.00057382, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.07,0.09,0.13,0.18,0.21 0.24,0.27,0.29,0.41), mean=0.138, stddev=0.0571], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.18,0.21 0.26,0.33,0.46,0.60,0.67 0.73,0.78,0.80,0.92), mean=0.464, stddev=0.154], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.007 0.008,0.008,0.01,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.0107, stddev=0.00309], oderiv-count=1.28262e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13494.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.07,0.09,0.13,0.17,0.20 0.22,0.24,0.25,0.36), mean=0.131, stddev=0.0486], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.14,0.15 0.17,0.18,0.21,0.23,0.24 0.25,0.26,0.28,0.32), mean=0.206, stddev=0.0304]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.524, stddev=0.00184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.17,0.17,0.22), mean=0.13, stddev=0.0159], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.16,0.18,0.20,0.22 0.23,0.24,0.24,0.28), mean=0.185, stddev=0.0237], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.33 0.34,0.35,0.37,0.39,0.40 0.41,0.42,0.43,0.46), mean=0.372, stddev=0.0239], bias-{mean,stddev}=-0.005612,0.1082, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.73e+05, self-repaired-proportion=0.000368383, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.06 0.07,0.09,0.14,0.19,0.22 0.25,0.29,0.31,0.37), mean=0.145, stddev=0.0596], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.16,0.19,0.24 0.28,0.34,0.47,0.63,0.69 0.74,0.79,0.84,0.90), mean=0.481, stddev=0.159], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.008,0.008,0.01,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.0105, stddev=0.00292], oderiv-count=1.22298e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12982.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.06 0.08,0.09,0.13,0.18,0.20 0.22,0.25,0.27,0.31), mean=0.135, stddev=0.0495], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.14,0.16 0.17,0.19,0.21,0.23,0.24 0.26,0.27,0.28,0.32), mean=0.208, stddev=0.03]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.538, stddev=0.00123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.11,0.12,0.13,0.15,0.15 0.16,0.17,0.18,0.22), mean=0.133, stddev=0.0161], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.16,0.17,0.19,0.21,0.22 0.23,0.24,0.25,0.33), mean=0.189, stddev=0.0222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.35,0.36,0.38,0.40,0.41 0.42,0.43,0.44,0.45), mean=0.379, stddev=0.0247], bias-{mean,stddev}=-0.01577,0.1102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.86e+05, self-repaired-proportion=0.00114818, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.06 0.07,0.09,0.13,0.19,0.22 0.24,0.27,0.29,0.36), mean=0.139, stddev=0.0579], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.16,0.18,0.22 0.25,0.31,0.46,0.60,0.68 0.74,0.79,0.81,0.94), mean=0.462, stddev=0.16], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.01,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.0105, stddev=0.00263], oderiv-count=1.18682e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12470.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.07,0.09,0.13,0.17,0.20 0.22,0.24,0.26,0.31), mean=0.132, stddev=0.0492], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.14,0.16 0.17,0.19,0.21,0.23,0.24 0.25,0.27,0.27,0.33), mean=0.209, stddev=0.0296]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.552, stddev=0.000828], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.11 0.12,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.28), mean=0.137, stddev=0.0171], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.15,0.16 0.17,0.17,0.19,0.21,0.22 0.23,0.24,0.25,0.30), mean=0.194, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.34,0.35 0.36,0.37,0.39,0.41,0.42 0.43,0.44,0.44,0.47), mean=0.389, stddev=0.0258], bias-{mean,stddev}=-0.01038,0.106, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.52e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.07 0.08,0.10,0.14,0.19,0.22 0.25,0.28,0.30,0.37), mean=0.149, stddev=0.0567], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.19,0.24 0.28,0.34,0.46,0.59,0.67 0.72,0.78,0.81,0.85), mean=0.469, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.01,0.01,0.01 0.01,0.02,0.02,0.03), mean=0.00998, stddev=0.00214], oderiv-count=1.14131e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11958.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.07 0.08,0.10,0.14,0.18,0.21 0.23,0.25,0.27,0.32), mean=0.142, stddev=0.0481], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.16,0.18 0.19,0.20,0.22,0.24,0.25 0.26,0.28,0.28,0.34), mean=0.221, stddev=0.0277]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.56, stddev=0.00081], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.18,0.19,0.28), mean=0.139, stddev=0.017], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01254, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.16,0.16 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.25,0.28), mean=0.199, stddev=0.0228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.36 0.37,0.38,0.40,0.42,0.43 0.44,0.45,0.45,0.49), mean=0.401, stddev=0.024], bias-{mean,stddev}=-0.01059,0.1048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.88e+05, self-repaired-proportion=0.000976562, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.06,0.07,0.08 0.09,0.11,0.16,0.21,0.24 0.26,0.29,0.31,0.35), mean=0.164, stddev=0.0569], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.18,0.22,0.27 0.30,0.35,0.46,0.58,0.65 0.69,0.73,0.77,0.85), mean=0.466, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.02,0.07), mean=0.00967, stddev=0.00257], oderiv-count=1.11962e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.06,0.07,0.09 0.10,0.11,0.15,0.20,0.22 0.24,0.26,0.27,0.31), mean=0.158, stddev=0.0489], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.17,0.17,0.19 0.21,0.22,0.25,0.27,0.28 0.29,0.31,0.31,0.35), mean=0.246, stddev=0.0311]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, params-rms=0.01721, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.56), mean=0.551, stddev=0.00175], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.26,0.27,0.29,0.30 0.30,0.31,0.31,0.34), mean=0.275, stddev=0.0162], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.0125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.14,0.15 0.16,0.17,0.20,0.22,0.23 0.25,0.26,0.27,0.31), mean=0.198, stddev=0.0287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.37 0.37,0.38,0.40,0.42,0.43 0.43,0.44,0.44,0.46), mean=0.399, stddev=0.0209], bias-{mean,stddev}=-0.0128,0.1078, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.37e+05, self-repaired-proportion=0.00390625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.04,0.05,0.07 0.08,0.10,0.14,0.19,0.22 0.26,0.30,0.32,0.38), mean=0.149, stddev=0.0591], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.15,0.19,0.22 0.26,0.33,0.45,0.59,0.66 0.72,0.78,0.83,0.88), mean=0.46, stddev=0.154], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.008 0.009,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.04), mean=0.0123, stddev=0.00324], oderiv-count=1.13754e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.04,0.05,0.07 0.08,0.10,0.14,0.18,0.21 0.23,0.26,0.28,0.33), mean=0.142, stddev=0.05], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.14,0.15,0.18 0.19,0.21,0.23,0.25,0.26 0.26,0.27,0.27,0.29), mean=0.226, stddev=0.0292]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, params-rms=0.01635, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.52,0.52,0.52 0.52,0.52,0.52,0.52,0.52 0.53,0.53,0.53,0.53), mean=0.523, stddev=0.00127], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.22 0.23,0.24,0.26,0.28,0.29 0.30,0.31,0.32,0.35), mean=0.261, stddev=0.0239], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9e-08,-7e-08,-6e-08,-5e-08 -3e-08,-2e-08,6e-10,2e-08,4e-08 5e-08,6e-08,6e-08,1e-07), mean=9.44e-10, stddev=2.94e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.72,0.72,0.73 0.74,0.76,0.80,0.83,0.85 0.86,0.88,0.89,0.92), mean=0.8, stddev=0.0402]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000688691, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01976, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.01,0.04,0.12 0.19,0.24,0.31,0.37,0.41 0.44,0.47,0.49,1.1), mean=0.302, stddev=0.0926], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.89,0.92,0.93 0.97,0.99,1.0,1.1,1.1 1.2,1.2,1.2,1.3), mean=1.05, stddev=0.0676], bias-{mean,stddev}=0.0001636,0.05855, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.09 0.10,0.12,0.14,0.17,0.18 0.19,0.20,0.20,0.30), mean=0.143, stddev=0.0282], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.27,0.28,0.29,0.30,0.31 0.32,0.32,0.33,0.36), mean=0.29, stddev=0.0152], bias-{mean,stddev}=-0.02136,0.1087, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.84e+05, self-repaired-proportion=0.0066664, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.01,0.02,0.02 0.03,0.04,0.09,0.15,0.18 0.21,0.24,0.27,0.37), mean=0.0994, stddev=0.0591], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.08,0.10,0.13 0.18,0.24,0.43,0.63,0.73 0.80,0.86,0.88,0.92), mean=0.443, stddev=0.205], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.007,0.009,0.01 0.01,0.01,0.02,0.02), mean=0.00738, stddev=0.00267], oderiv-count=1.10701e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,0.01,0.02,0.02 0.03,0.04,0.08,0.13,0.16 0.18,0.21,0.22,0.31), mean=0.0904, stddev=0.0506], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.06,0.07,0.08 0.10,0.11,0.14,0.16,0.16 0.17,0.18,0.19,0.42), mean=0.134, stddev=0.0334]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000688691, l2-regularize=0.008, max-change=0.75, params-rms=0.01086, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35), mean=0.348, stddev=0.000457], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.14,0.14 0.15,0.16,0.17,0.19,0.20 0.20,0.21,0.22,0.27), mean=0.173, stddev=0.0189], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11446.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-4e-08,-3e-08 -2e-08,-1e-08,7e-10,2e-08,2e-08 3e-08,3e-08,4e-08,4e-08), mean=7.12e-10, stddev=1.72e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.37,0.38,0.39,0.41,0.42 0.42,0.43,0.43,0.45), mean=0.394, stddev=0.0175]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00344345, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03313, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.05 0.12,0.23,0.51,0.68,0.77 0.83,0.89,0.92,1.3), mean=0.474, stddev=0.237], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.6 1.7,1.7,1.8,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.76, stddev=0.0776], bias-{mean,stddev}=4.49e-09,0.07523, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,8e-08,4e-05,0.0001 0.0002,0.0004,0.0007,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000997, stddev=0.00118], oderiv-count=1.11802e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/5.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/6.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.31323 tdnnf2.linear:4.0635 tdnnf2.affine:4.85151 tdnnf3.linear:3.61498 tdnnf3.affine:4.27333 tdnnf4.linear:3.32209 tdnnf4.affine:4.17426 tdnnf5.linear:2.66937 tdnnf5.affine:3.35353 tdnnf6.linear:3.02055 tdnnf6.affine:3.79781 tdnnf7.linear:2.85776 tdnnf7.affine:3.68217 tdnnf8.linear:2.7322 tdnnf8.affine:3.56327 tdnnf9.linear:2.68832 tdnnf9.affine:3.46684 tdnnf10.linear:2.61336 tdnnf10.affine:3.3869 tdnnf11.linear:2.57862 tdnnf11.affine:3.37062 tdnnf12.linear:2.54113 tdnnf12.affine:3.37026 tdnnf13.linear:2.47899 tdnnf13.affine:3.46069 prefinal-l:3.01386 prefinal-chain.affine:3.71808 prefinal-chain.linear:2.9632 output.affine:4.98062 prefinal-xent.affine:2.45583 prefinal-xent.linear:1.53309 output-xent.affine:4.07523 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2497 tdnnf2.linear:9.26966 tdnnf2.affine:8.93373 tdnnf3.linear:7.50197 tdnnf3.affine:7.56638 tdnnf4.linear:6.57409 tdnnf4.affine:7.335 tdnnf5.linear:5.18841 tdnnf5.affine:6.16623 tdnnf6.linear:6.0678 tdnnf6.affine:6.93856 tdnnf7.linear:5.92511 tdnnf7.affine:6.96316 tdnnf8.linear:5.86201 tdnnf8.affine:6.96811 tdnnf9.linear:5.91232 tdnnf9.affine:6.89355 tdnnf10.linear:5.92802 tdnnf10.affine:6.90312 tdnnf11.linear:6.08176 tdnnf11.affine:7.0452 tdnnf12.linear:6.24005 tdnnf12.affine:7.11516 tdnnf13.linear:6.3392 tdnnf13.affine:7.25133 prefinal-l:8.81013 prefinal-chain.affine:7.27999 prefinal-chain.linear:8.37268 output.affine:17.0901 prefinal-xent.affine:5.84782 prefinal-xent.linear:5.56018 output-xent.affine:28.4518 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.580202 tdnnf2.linear:0.434641 tdnnf2.affine:0.497753 tdnnf3.linear:0.478075 tdnnf3.affine:0.497492 tdnnf4.linear:0.499627 tdnnf4.affine:0.490661 tdnnf5.linear:0.496353 tdnnf5.affine:0.450436 tdnnf6.linear:0.488461 tdnnf6.affine:0.471195 tdnnf7.linear:0.471338 tdnnf7.affine:0.450347 tdnnf8.linear:0.456108 tdnnf8.affine:0.435284 tdnnf9.linear:0.446796 tdnnf9.affine:0.428138 tdnnf10.linear:0.434411 tdnnf10.affine:0.418196 tdnnf11.linear:0.420133 tdnnf11.affine:0.408317 tdnnf12.linear:0.402607 tdnnf12.affine:0.407911 tdnnf13.linear:0.385277 tdnnf13.affine:0.41534 prefinal-l:0.34126 prefinal-chain.affine:0.44297 prefinal-chain.linear:0.350644 output.affine:0.299346 prefinal-xent.affine:0.350255 prefinal-xent.linear:0.277382 output-xent.affine:0.144412 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 21 12:36:07 EDT 2022, elapsed time 0 seconds
