# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/51.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/51.mdl 
# Started at Thu Jul 21 14:58:22 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/51.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.03134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.13,0.19 0.24,0.30,0.39,0.53,0.65 0.78,0.96,1.2,1.3), mean=0.427, stddev=0.184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.59,0.61 0.65,0.73,0.91,1.2,1.4 1.5,1.6,1.7,1.8), mean=0.966, stddev=0.27], bias-{mean,stddev}=-0.01017,0.03646, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.07e+06, self-repaired-proportion=0.0207771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.003,0.005,0.02,0.04,0.04 0.05,0.05,0.06,0.08), mean=0.0215, stddev=0.0165], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.09 0.12,0.17,0.40,0.66,0.82 0.89,0.93,0.94,0.97), mean=0.425, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.06,0.07,0.10,0.13,0.14 0.16,0.19,0.21,0.28), mean=0.1, stddev=0.0339], oderiv-count=4.63232e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47129.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.001,0.002 0.003,0.005,0.02,0.04,0.05 0.05,0.06,0.06,0.08), mean=0.0219, stddev=0.0167], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.006,0.009 0.01,0.02,0.03,0.04,0.05 0.05,0.05,0.06,0.09), mean=0.0294, stddev=0.0129]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.92 0.92,0.92,0.92,0.92), mean=0.912, stddev=0.0028], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.15 0.17,0.18,0.22,0.26,0.29 0.31,0.35,0.36,0.41), mean=0.223, stddev=0.0492], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01664, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.17 0.18,0.20,0.25,0.31,0.35 0.40,0.43,0.43,0.48), mean=0.257, stddev=0.0677], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.47,0.48 0.49,0.50,0.53,0.56,0.57 0.59,0.61,0.62,0.69), mean=0.531, stddev=0.035], bias-{mean,stddev}=-0.04974,0.06013, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.27e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.09 0.11,0.12,0.14,0.16,0.18 0.19,0.20,0.21,0.25), mean=0.142, stddev=0.0287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.24,0.29,0.35 0.38,0.40,0.45,0.49,0.52 0.54,0.58,0.59,0.66), mean=0.445, stddev=0.0632], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.007,0.008,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00858, stddev=0.00179], oderiv-count=4.71408e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46617.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.08,0.10 0.11,0.13,0.15,0.17,0.19 0.19,0.21,0.22,0.25), mean=0.148, stddev=0.0298], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.20,0.21,0.24,0.28,0.31 0.33,0.36,0.38,0.45), mean=0.25, stddev=0.0433]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01558, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.70,0.70,0.70 0.70,0.70,0.70,0.71,0.71 0.71,0.71,0.71,0.71), mean=0.705, stddev=0.00225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.17,0.20,0.21 0.22,0.23,0.24,0.26), mean=0.174, stddev=0.0261], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01353, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.18,0.21,0.24,0.27 0.29,0.31,0.32,0.43), mean=0.213, stddev=0.0413], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.41,0.43,0.45,0.47 0.47,0.49,0.49,0.50), mean=0.432, stddev=0.027], bias-{mean,stddev}=-0.02811,0.02921, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.26e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.18,0.20,0.22 0.23,0.25,0.26,0.43), mean=0.181, stddev=0.0288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.39,0.41 0.42,0.44,0.46,0.50,0.51 0.52,0.53,0.54,0.57), mean=0.465, stddev=0.0357], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.004,0.005,0.005,0.006,0.006 0.007,0.007,0.008,0.009), mean=0.00534, stddev=0.000766], oderiv-count=4.67875e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46105.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.25,0.26,0.43), mean=0.186, stddev=0.0294], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.26,0.27,0.30,0.34,0.36 0.38,0.40,0.43,0.63), mean=0.309, stddev=0.0449]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01428, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.64,0.64 0.64,0.64,0.65,0.65,0.65 0.65,0.65,0.65,0.65), mean=0.646, stddev=0.00224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.16,0.18,0.19 0.20,0.21,0.21,0.25), mean=0.16, stddev=0.0205], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01248, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.17,0.20,0.22,0.24 0.25,0.27,0.28,0.36), mean=0.197, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.35 0.37,0.38,0.40,0.42,0.43 0.44,0.45,0.46,0.48), mean=0.398, stddev=0.0268], bias-{mean,stddev}=-0.01951,0.02113, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.38e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.17,0.19,0.20 0.21,0.23,0.25,0.42), mean=0.176, stddev=0.0243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.41 0.42,0.43,0.46,0.48,0.49 0.51,0.52,0.53,0.59), mean=0.456, stddev=0.0297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00849, stddev=0.00107], oderiv-count=1.47466e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15368.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.15,0.16,0.18,0.20,0.21 0.22,0.24,0.25,0.43), mean=0.181, stddev=0.0242], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.27,0.28,0.30,0.33,0.35 0.36,0.38,0.42,0.66), mean=0.307, stddev=0.0368]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.424, stddev=0.00216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.13,0.14,0.15,0.16,0.16 0.17,0.18,0.18,0.20), mean=0.149, stddev=0.0122], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.11,0.12,0.14,0.16,0.17 0.19,0.20,0.21,0.23), mean=0.144, stddev=0.0248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.36 0.38,0.39,0.41,0.44,0.45 0.47,0.48,0.48,0.50), mean=0.412, stddev=0.03], bias-{mean,stddev}=-0.0207,0.03747, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.06 0.07,0.08,0.09,0.11,0.12 0.13,0.13,0.14,0.18), mean=0.0934, stddev=0.0214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.18,0.26 0.30,0.34,0.40,0.47,0.50 0.53,0.56,0.57,0.64), mean=0.401, stddev=0.0832], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.017, stddev=0.003], oderiv-count=1.48387e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15368.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.06 0.07,0.08,0.10,0.11,0.12 0.13,0.14,0.14,0.18), mean=0.0954, stddev=0.0219], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.12,0.13 0.14,0.16,0.17,0.19,0.20 0.21,0.23,0.24,0.30), mean=0.173, stddev=0.0254]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01458, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.65,0.66,0.66 0.66,0.66,0.66,0.66,0.66 0.66,0.66,0.66,0.66), mean=0.66, stddev=0.00199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.15,0.16,0.18,0.19 0.20,0.21,0.22,0.26), mean=0.164, stddev=0.0197], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.16 0.17,0.18,0.21,0.23,0.24 0.26,0.27,0.28,0.31), mean=0.207, stddev=0.0296], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.49,0.49,0.51), mean=0.418, stddev=0.0313], bias-{mean,stddev}=-0.03645,0.02174, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.56e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.16,0.17,0.19,0.20 0.20,0.22,0.23,0.27), mean=0.172, stddev=0.0194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.37,0.39 0.40,0.42,0.45,0.48,0.50 0.51,0.53,0.53,0.57), mean=0.45, stddev=0.039], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.00906, stddev=0.000932], oderiv-count=1.45494e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14856.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.13,0.15 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.28), mean=0.176, stddev=0.0198], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.30,0.33,0.34 0.35,0.38,0.39,0.51), mean=0.305, stddev=0.0304]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.634, stddev=0.00166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.26), mean=0.157, stddev=0.0198], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01312, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.15,0.16 0.17,0.19,0.21,0.23,0.24 0.25,0.26,0.28,0.37), mean=0.208, stddev=0.029], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.49,0.53), mean=0.419, stddev=0.0305], bias-{mean,stddev}=-0.0386,0.02144, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.15,0.16,0.17,0.19,0.20 0.21,0.22,0.23,0.35), mean=0.176, stddev=0.0213], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.38 0.40,0.41,0.45,0.48,0.50 0.51,0.53,0.54,0.57), mean=0.447, stddev=0.0402], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00874, stddev=0.000977], oderiv-count=1.43958e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14344.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.36), mean=0.18, stddev=0.0216], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.28,0.29,0.31,0.33,0.34 0.36,0.39,0.40,0.57), mean=0.313, stddev=0.0301]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01398, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63,0.63 0.64,0.64,0.64,0.64), mean=0.633, stddev=0.00197], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.157, stddev=0.0199], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01316, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.15 0.17,0.19,0.21,0.23,0.25 0.26,0.27,0.28,0.45), mean=0.208, stddev=0.0322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.37 0.38,0.40,0.42,0.45,0.46 0.47,0.48,0.50,0.52), mean=0.42, stddev=0.0308], bias-{mean,stddev}=-0.03954,0.0241, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.14 0.14,0.15,0.17,0.19,0.20 0.20,0.22,0.23,0.43), mean=0.171, stddev=0.0244], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.31,0.34,0.37 0.39,0.41,0.44,0.48,0.50 0.51,0.52,0.53,0.56), mean=0.441, stddev=0.0446], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.007 0.008,0.008,0.009,0.01,0.01 0.01,0.01,0.01,0.01), mean=0.0088, stddev=0.00104], oderiv-count=1.2928e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13832.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.14 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.42), mean=0.176, stddev=0.0248], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.28,0.28,0.30,0.33,0.34 0.36,0.38,0.40,0.80), mean=0.308, stddev=0.0344]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.64 0.64,0.64,0.64,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.638, stddev=0.00137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.20,0.21,0.21,0.31), mean=0.158, stddev=0.021], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.12,0.15 0.16,0.18,0.21,0.24,0.25 0.26,0.27,0.29,0.35), mean=0.208, stddev=0.036], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.36 0.38,0.39,0.42,0.45,0.46 0.48,0.49,0.49,0.53), mean=0.42, stddev=0.0326], bias-{mean,stddev}=-0.03771,0.0245, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.41e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.12 0.14,0.15,0.17,0.19,0.21 0.22,0.23,0.24,0.35), mean=0.172, stddev=0.0298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.27,0.31,0.34 0.37,0.39,0.43,0.48,0.50 0.52,0.53,0.55,0.57), mean=0.432, stddev=0.0545], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00856, stddev=0.00109], oderiv-count=1.35082e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13320.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.13 0.14,0.15,0.18,0.20,0.21 0.22,0.24,0.24,0.36), mean=0.176, stddev=0.0301], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.27,0.28,0.31,0.33,0.35 0.36,0.39,0.41,0.61), mean=0.311, stddev=0.0345]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01427, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.64,0.64 0.64,0.64,0.65,0.65,0.65 0.65,0.65,0.65,0.65), mean=0.646, stddev=0.00133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.13,0.14,0.16,0.18,0.19 0.20,0.21,0.23,0.30), mean=0.16, stddev=0.0227], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.10,0.13 0.16,0.18,0.21,0.24,0.25 0.26,0.27,0.28,0.35), mean=0.206, stddev=0.0393], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.49,0.52), mean=0.418, stddev=0.0312], bias-{mean,stddev}=-0.03481,0.0247, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.55e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.12,0.14,0.17,0.19,0.20 0.22,0.24,0.25,0.30), mean=0.166, stddev=0.0338], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.23,0.27,0.30 0.34,0.38,0.42,0.47,0.49 0.50,0.52,0.53,0.56), mean=0.417, stddev=0.0605], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00852, stddev=0.00113], oderiv-count=1.27613e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12808.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.11 0.13,0.15,0.17,0.20,0.21 0.22,0.24,0.25,0.29), mean=0.17, stddev=0.0339], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.28,0.29,0.31,0.34,0.35 0.37,0.39,0.41,0.61), mean=0.314, stddev=0.034]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01471, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.66,0.66,0.66 0.66,0.66,0.67,0.67,0.67 0.67,0.67,0.67,0.67), mean=0.666, stddev=0.00118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.13,0.14,0.16,0.18,0.20 0.21,0.23,0.24,0.30), mean=0.164, stddev=0.0266], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.12 0.15,0.19,0.22,0.24,0.26 0.27,0.28,0.30,0.42), mean=0.212, stddev=0.0437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.37,0.37 0.39,0.40,0.43,0.46,0.47 0.48,0.51,0.52,0.59), mean=0.431, stddev=0.0349], bias-{mean,stddev}=-0.02964,0.02264, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.12 0.15,0.18,11219716096.0,34799943680.0,53415940096.0 69075025920.0,80223313920.0,88207900672.0,146619727872.0), mean=1.92e+10, stddev=2.33e+10], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.23,0.27,0.31 0.35,0.37,0.42,0.46,0.48 0.50,0.52,0.53,0.59), mean=0.414, stddev=0.0575], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.007,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00824, stddev=0.00109], oderiv-count=1.21174e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12296.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.09,0.11 0.12,0.15,0.18,0.21,0.22 0.24,0.26,0.28,0.48), mean=0.178, stddev=0.0401], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.31 0.33,0.35,923,2671,3852 4763,5920,6554,9987), mean=1.45e+03, stddev=1.68e+03]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01513, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.68,0.68 0.68,0.68,0.68,0.69,0.69 0.69,0.69,0.69,0.69), mean=0.685, stddev=0.00127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.13,0.14,0.16,0.19,0.21 0.23,0.25,0.26,0.34), mean=0.168, stddev=0.0315], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01427, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.13,0.15 0.17,0.20,0.23,0.25,0.27 0.28,0.30,0.31,0.35), mean=0.225, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.40 0.41,0.43,0.45,0.48,0.50 0.51,0.52,0.53,0.68), mean=0.455, stddev=0.0356], bias-{mean,stddev}=-0.02645,0.01991, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.11,0.12 0.14,0.15,0.18,0.21,0.22 0.23,0.25,0.27,0.41), mean=0.18, stddev=0.034], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.27,0.30,0.33 0.35,0.38,0.42,0.45,0.48 0.50,0.51,0.52,0.56), mean=0.413, stddev=0.0516], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.008,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00834, stddev=0.000998], oderiv-count=1.15488e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11784.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.11,0.13 0.14,0.16,0.19,0.21,0.22 0.24,0.26,0.27,0.41), mean=0.186, stddev=0.0343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.30,0.31 0.32,0.33,0.35,0.38,0.40 0.42,0.44,0.46,0.70), mean=0.359, stddev=0.0362]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63,0.64 0.64,0.64,0.64,0.64), mean=0.634, stddev=0.00113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.15,0.18,0.20 0.21,0.24,0.26,0.34), mean=0.155, stddev=0.0327], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.14,0.16 0.17,0.19,0.22,0.26,0.28 0.30,0.31,0.32,0.40), mean=0.222, stddev=0.0412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.40 0.41,0.42,0.45,0.48,0.49 0.50,0.52,0.53,0.54), mean=0.451, stddev=0.0304], bias-{mean,stddev}=-0.02487,0.02015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.37e+05, self-repaired-proportion=0.000976562, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.07,0.08,0.10 0.11,0.12,0.14,0.17,0.20 0.21,0.23,0.24,0.41), mean=0.146, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.24,0.27,0.29 0.31,0.33,0.38,0.43,0.46 0.49,0.51,0.53,0.62), mean=0.381, stddev=0.0616], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.009 0.01,0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.09), mean=0.0113, stddev=0.00288], oderiv-count=1.14083e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11272.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.08,0.09,0.10 0.11,0.12,0.15,0.18,0.20 0.22,0.24,0.24,0.41), mean=0.15, stddev=0.0369], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.25,0.27,0.28 0.30,0.31,0.34,0.37,0.39 0.41,0.43,0.46,0.62), mean=0.343, stddev=0.0415]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.345679, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, params-rms=0.02212, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71), mean=0.708, stddev=0.00106], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.31 0.32,0.33,0.35,0.38,0.39 0.41,0.42,0.43,0.46), mean=0.353, stddev=0.0303], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01526, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.18,0.19 0.20,0.22,0.24,0.27,0.28 0.29,0.32,0.33,0.40), mean=0.242, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.49,0.51,0.52 0.54,0.54,0.56,0.58), mean=0.488, stddev=0.0263], bias-{mean,stddev}=-0.04362,0.02748, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.84e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.09 0.09,0.11,0.12,0.14,0.15 0.16,0.17,0.17,0.23), mean=0.124, stddev=0.023], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.23,0.24,0.28 0.31,0.34,0.39,0.44,0.46 0.48,0.50,0.51,0.55), mean=0.388, stddev=0.0604], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.05), mean=0.0135, stddev=0.00195], oderiv-count=1.09802e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11272.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.09 0.10,0.11,0.13,0.15,0.15 0.16,0.17,0.18,0.23), mean=0.126, stddev=0.0233], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.21 0.21,0.22,0.24,0.25,0.26 0.27,0.28,0.28,0.32), mean=0.238, stddev=0.0192]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, params-rms=0.01997, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.64,0.64,0.64 0.64,0.64,0.64,0.64,0.64 0.64,0.64,0.64,0.64), mean=0.639, stddev=0.000732], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.27 0.28,0.29,0.32,0.34,0.36 0.37,0.40,0.41,0.50), mean=0.318, stddev=0.0338], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11272.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,2e-09,2e-08,3e-08 4e-08,4e-08,5e-08,5e-08), mean=1e-09, stddev=2.25e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.85,0.86,0.87 0.88,0.90,0.93,0.96,0.98 1.0,1.0,1.0,1.1), mean=0.931, stddev=0.04]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000587062, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02366, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.09,0.20 0.26,0.31,0.37,0.43,0.48 0.52,0.57,0.59,0.98), mean=0.366, stddev=0.0977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.26, stddev=0.0535], bias-{mean,stddev}=0.0003585,0.06513, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.04,0.08 0.11,0.14,0.17,0.19,0.20 0.20,0.21,0.22,0.25), mean=0.16, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.30,0.31,0.32,0.34,0.36 0.37,0.38,0.41,0.45), mean=0.327, stddev=0.0251], bias-{mean,stddev}=-0.07738,0.06746, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.09e+05, self-repaired-proportion=0.00873534, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.006,0.008,0.01 0.02,0.03,0.05,0.09,0.12 0.15,0.17,0.18,0.31), mean=0.0626, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.08 0.10,0.15,0.26,0.42,0.50 0.61,0.69,0.74,0.79), mean=0.292, stddev=0.159], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.007,0.007,0.009,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.0094, stddev=0.00302], oderiv-count=1.14842e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11272.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.006,0.008,0.01 0.02,0.03,0.05,0.09,0.12 0.15,0.17,0.18,0.31), mean=0.0633, stddev=0.0431], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.04,0.05,0.06 0.07,0.09,0.13,0.16,0.17 0.18,0.20,0.22,0.32), mean=0.126, stddev=0.0397]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000587062, l2-regularize=0.008, max-change=0.75, params-rms=0.01296, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.42 0.42,0.42,0.42,0.42), mean=0.415, stddev=0.000345], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.18,0.21,0.29 0.37,0.39,0.39,0.41), mean=0.198, stddev=0.0601], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11272.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-3e-08 -2e-08,-1e-08,1e-09,1e-08,2e-08 2e-08,3e-08,3e-08,5e-08), mean=5.87e-10, stddev=1.5e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.42,0.43 0.44,0.44,0.46,0.48,0.49 0.49,0.50,0.51,0.52), mean=0.461, stddev=0.02]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00293531, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.0407, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.04,0.16 0.28,0.44,0.63,0.79,0.89 0.96,1.0,1.1,1.5), mean=0.609, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.9,1.9,2.0 2.0,2.1,2.2,2.3,2.3 2.3,2.3,2.3,2.3), mean=2.16, stddev=0.103], bias-{mean,stddev}=9.5e-09,0.08273, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-07,7e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.1184e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/50.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/51.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.88911 tdnnf2.linear:3.02602 tdnnf2.affine:3.03785 tdnnf3.linear:2.40007 tdnnf3.affine:2.5459 tdnnf4.linear:2.2396 tdnnf4.affine:2.42433 tdnnf5.linear:1.77963 tdnnf5.affine:1.94209 tdnnf6.linear:2.22221 tdnnf6.affine:2.39729 tdnnf7.linear:2.02788 tdnnf7.affine:2.30439 tdnnf8.linear:1.99759 tdnnf8.affine:2.25615 tdnnf9.linear:1.96586 tdnnf9.affine:2.2094 tdnnf10.linear:1.94612 tdnnf10.affine:2.14905 tdnnf11.linear:1.91186 tdnnf11.affine:2.16478 tdnnf12.linear:1.8854 tdnnf12.affine:2.22581 tdnnf13.linear:1.86518 tdnnf13.affine:2.3243 prefinal-l:2.47134 prefinal-chain.affine:2.4889 prefinal-chain.linear:1.84855 output.affine:2.88749 prefinal-xent.affine:1.43272 prefinal-xent.linear:0.914092 output-xent.affine:2.24356 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:14.9238 tdnnf2.linear:10.3169 tdnnf2.affine:8.87604 tdnnf3.linear:7.97552 tdnnf3.affine:7.04818 tdnnf4.linear:7.31151 tdnnf4.affine:6.45327 tdnnf5.linear:4.79708 tdnnf5.affine:4.87505 tdnnf6.linear:7.46349 tdnnf6.affine:6.83933 tdnnf7.linear:7.16738 tdnnf7.affine:6.8667 tdnnf8.linear:7.15822 tdnnf8.affine:6.90031 tdnnf9.linear:7.21521 tdnnf9.affine:6.89552 tdnnf10.linear:7.30741 tdnnf10.affine:6.84283 tdnnf11.linear:7.53328 tdnnf11.affine:7.02404 tdnnf12.linear:7.74654 tdnnf12.affine:7.38293 tdnnf13.linear:7.16842 tdnnf13.affine:7.30265 prefinal-l:11.3265 prefinal-chain.affine:7.98663 prefinal-chain.linear:10.2271 output.affine:20.4117 prefinal-xent.affine:6.19066 prefinal-xent.linear:6.63305 output-xent.affine:34.8843 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.327339 tdnnf2.linear:0.291444 tdnnf2.affine:0.341199 tdnnf3.linear:0.299614 tdnnf3.affine:0.360624 tdnnf4.linear:0.305799 tdnnf4.affine:0.375334 tdnnf5.linear:0.371965 tdnnf5.affine:0.399467 tdnnf6.linear:0.29662 tdnnf6.affine:0.350689 tdnnf7.linear:0.282821 tdnnf7.affine:0.335739 tdnnf8.linear:0.278996 tdnnf8.affine:0.326857 tdnnf9.linear:0.272387 tdnnf9.affine:0.320337 tdnnf10.linear:0.266086 tdnnf10.affine:0.313717 tdnnf11.linear:0.253215 tdnnf11.affine:0.308053 tdnnf12.linear:0.242842 tdnnf12.affine:0.301181 tdnnf13.linear:0.259661 tdnnf13.affine:0.317761 prefinal-l:0.216635 prefinal-chain.affine:0.312247 prefinal-chain.linear:0.1812 output.affine:0.143033 prefinal-xent.affine:0.231136 prefinal-xent.linear:0.137642 output-xent.affine:0.0646532 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 21 14:58:23 EDT 2022, elapsed time 1 seconds
