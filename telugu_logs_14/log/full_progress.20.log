# nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/19.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/20.mdl 
# Started at Thu Jul 21 13:16:48 EDT 2022
#
nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/19.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/20.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005747, bias-{mean,stddev}=-0.001007,0.01284
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01394, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.08,0.12,0.19,0.25,0.29 0.33,0.37,0.40,0.45), mean=0.192, stddev=0.0777], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.29 0.30,0.34,0.41,0.50,0.60 0.68,0.75,0.76,0.78), mean=0.431, stddev=0.115], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.17 0.19,0.24,0.37,0.57,0.68 0.76,0.82,0.85,0.92), mean=0.406, stddev=0.184], bias-{mean,stddev}=0.0002651,0.01026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.22,0.32 0.40,0.52,0.64,0.91), mean=0.11, stddev=0.152], oderiv-count=116352
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=628.38, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.97,-0.84,-0.63 -0.46,-0.23,0.01,0.30,0.51 0.71,0.92,1.1,1.7), mean=0.0292, stddev=0.393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.008 0.06,0.12,0.14,0.23), mean=0.00738, stddev=0.0267]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.007294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.31,0.32,0.33,0.34,0.35 0.36,0.36,0.37,0.40), mean=0.33, stddev=0.0178], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.16), mean=0.0771, stddev=0.0295], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.14,0.28,0.44,0.50 0.53,0.56,0.57,0.61), mean=0.295, stddev=0.148], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.007555, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.10,0.11,0.12,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.12, stddev=0.0174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.22 0.23,0.23,0.24,0.25,0.26 0.26,0.27,0.27,0.28), mean=0.241, stddev=0.0121], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.07,0.15,0.33,0.42 0.47,0.51,0.54,0.58), mean=0.197, stddev=0.141], bias-{mean,stddev}=-8.954e-05,0.01167, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.83e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,-0.05,-0.04,-0.005 0.02,0.05,0.10,0.16,0.18 0.22,0.25,0.26,0.36), mean=0.103, stddev=0.068], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.60,-0.08,-0.02,0.08 0.15,0.26,0.44,0.63,0.74 0.82,0.96,1.1,1.8), mean=0.447, stddev=0.239], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.05,0.08 0.10,0.12,0.14,0.26), mean=0.0252, stddev=0.0371], oderiv-count=22400
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=628.38, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.4,-1.2,-0.93 -0.68,-0.41,0.14,0.66,0.93 1.2,1.5,1.7,2.9), mean=0.131, stddev=0.646], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.24,0.38 0.50,0.62,0.71,1.0), mean=0.0991, stddev=0.181]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.005701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.23,0.23 0.24,0.25,0.26,0.27,0.28 0.28,0.28,0.28,0.28), mean=0.258, stddev=0.0131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0638, stddev=0.00955], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.10,0.12,0.23,0.34,0.38 0.40,0.43,0.43,0.45), mean=0.235, stddev=0.107], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.006335, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.101, stddev=0.0116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.19 0.19,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.00928], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.14,0.27,0.34 0.38,0.42,0.44,0.46), mean=0.171, stddev=0.108], bias-{mean,stddev}=8.795e-05,0.007055, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.06,-0.04,0.01 0.03,0.07,0.13,0.20,0.23 0.27,0.30,0.32,0.40), mean=0.133, stddev=0.0791], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.33,-0.05,0.04,0.13 0.21,0.30,0.45,0.61,0.71 0.79,0.87,0.93,1.2), mean=0.454, stddev=0.201]
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=628.38, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.4,-1.3,-1.0 -0.73,-0.44,0.05,0.57,0.85 1.1,1.4,1.6,2.3), mean=0.0603, stddev=0.64], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.30,0.50 0.62,0.75,0.86,1.3), mean=0.125, stddev=0.23]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.005232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.26,0.26,0.26,0.27), mean=0.236, stddev=0.0124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0588, stddev=0.00712], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.09,0.10,0.21,0.32,0.35 0.37,0.39,0.39,0.41), mean=0.214, stddev=0.101], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.005997, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.09,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0953, stddev=0.0113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.18,0.18,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.192, stddev=0.00972], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.13,0.25,0.32 0.37,0.40,0.43,0.45), mean=0.162, stddev=0.102], bias-{mean,stddev}=0.0004626,0.006521, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.47e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.80,-0.62,-0.43 -0.31,-0.14,0.19,0.49,0.66 0.83,1.0,1.1,1.7), mean=0.184, stddev=0.392], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.9,-1.5,-1.2 -0.81,-0.32,0.53,1.4,1.8 2.2,2.9,3.1,4.2), mean=0.529, stddev=1.04]
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.5,-1.1,-0.94 -0.68,-0.42,0.10,0.59,0.89 1.1,1.5,1.7,2.1), mean=0.101, stddev=0.629], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.37,0.53 0.65,0.78,0.83,1.0), mean=0.143, stddev=0.235]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.005841, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.18,0.18,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.187, stddev=0.00902], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.07,0.07 0.08,0.08,0.08,0.10), mean=0.0657, stddev=0.00695], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.09,0.15,0.25,0.29 0.31,0.32,0.33,0.34), mean=0.17, stddev=0.0785], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.006622, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.07,0.07,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0743, stddev=0.00962], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.19 0.20,0.20,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.212, stddev=0.00976], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.12,0.17,0.28,0.32 0.34,0.36,0.36,0.38), mean=0.196, stddev=0.0815], bias-{mean,stddev}=-0.0001777,0.007816, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.17e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,-0.02,-0.007,0.009 0.02,0.04,0.08,0.11,0.13 0.15,0.16,0.17,0.23), mean=0.0768, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.05,0.02,0.11 0.18,0.26,0.42,0.61,0.72 0.79,0.90,0.94,1.2), mean=0.435, stddev=0.211], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.04 0.05,0.06,0.06,0.11), mean=0.0158, stddev=0.0171], oderiv-count=86784
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.2,-0.91,-0.67 -0.52,-0.27,0.08,0.48,0.71 0.89,1.1,1.2,1.7), mean=0.0899, stddev=0.477], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.20,0.32 0.38,0.46,0.53,0.66), mean=0.0775, stddev=0.141]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.20 0.20,0.21,0.22,0.23,0.23 0.24,0.24,0.24,0.25), mean=0.22, stddev=0.0111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.05,0.06,0.06 0.06,0.07,0.07,0.08), mean=0.0547, stddev=0.00609], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.10,0.20,0.29,0.32 0.34,0.35,0.36,0.37), mean=0.201, stddev=0.0905], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.005674, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.10 0.11,0.12,0.12,0.13), mean=0.0902, stddev=0.0106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.17,0.17,0.18,0.19,0.19 0.20,0.20,0.21,0.21), mean=0.181, stddev=0.0109], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.13,0.24,0.29 0.33,0.36,0.38,0.40), mean=0.157, stddev=0.0907], bias-{mean,stddev}=0.0001612,0.005291, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.59e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,-0.01,0.005,0.03 0.05,0.07,0.11,0.15,0.17 0.19,0.21,0.22,0.29), mean=0.111, stddev=0.0493], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.009,0.07,0.17 0.24,0.31,0.45,0.60,0.67 0.73,0.82,0.88,1.3), mean=0.454, stddev=0.177], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.03,0.04 0.05,0.05,0.06,0.08), mean=0.0147, stddev=0.0176], oderiv-count=17664
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.2,-1.1,-0.81 -0.60,-0.42,-0.008,0.41,0.61 0.79,0.99,1.1,1.9), mean=-0.00348, stddev=0.491], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.37,0.51 0.60,0.70,0.77,1.1), mean=0.139, stddev=0.223]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004517, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.19,0.19 0.19,0.20,0.20,0.21,0.21 0.22,0.22,0.22,0.22), mean=0.204, stddev=0.00845], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.06 0.06,0.06,0.06,0.07), mean=0.0508, stddev=0.00561], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.11,0.19,0.26,0.29 0.30,0.32,0.32,0.33), mean=0.189, stddev=0.0772], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.005414, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.09,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.0861, stddev=0.00965], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.16,0.17,0.17,0.18,0.18 0.19,0.19,0.19,0.20), mean=0.173, stddev=0.00814], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.13,0.23,0.28 0.31,0.33,0.35,0.37), mean=0.151, stddev=0.0842], bias-{mean,stddev}=0.0005415,0.004909, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=5.36e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.06,-0.04,-0.01 0.02,0.05,0.12,0.18,0.22 0.26,0.29,0.30,0.39), mean=0.119, stddev=0.0801], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.26,-0.12,0.007 0.13,0.26,0.47,0.69,0.80 0.90,1.0,1.1,1.5), mean=0.468, stddev=0.273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.008,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.01, stddev=0.0106], oderiv-count=47616
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.0,-0.92,-0.71 -0.55,-0.34,0.02,0.40,0.58 0.74,0.92,1.1,1.6), mean=0.0171, stddev=0.449], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.34,0.49 0.56,0.64,0.70,1.2), mean=0.13, stddev=0.209]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.19 0.19,0.19,0.20,0.21,0.21 0.21,0.21,0.21,0.22), mean=0.198, stddev=0.00817], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0494, stddev=0.00496], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.08,0.11,0.19,0.25,0.28 0.29,0.30,0.31,0.32), mean=0.185, stddev=0.0705], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.005243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.08,0.08,0.09,0.10 0.10,0.10,0.11,0.12), mean=0.0834, stddev=0.00944], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.16,0.16,0.17,0.17,0.18 0.18,0.18,0.19,0.19), mean=0.168, stddev=0.00809], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.13,0.22,0.27 0.30,0.32,0.34,0.35), mean=0.148, stddev=0.0794], bias-{mean,stddev}=0.0002647,0.004775, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.64e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.13,-0.10,-0.06 -0.02,0.03,0.13,0.22,0.27 0.31,0.37,0.40,0.53), mean=0.128, stddev=0.115], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.55,-0.41,-0.18 -0.03,0.13,0.44,0.75,0.90 1.0,1.2,1.3,1.8), mean=0.44, stddev=0.382], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.00994, stddev=0.00927], oderiv-count=71808
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.94,-0.80,-0.61 -0.45,-0.28,0.07,0.44,0.65 0.81,1.0,1.1,1.5), mean=0.0825, stddev=0.437], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.34,0.46 0.56,0.65,0.70,0.96), mean=0.136, stddev=0.207]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.18 0.19,0.19,0.20,0.20,0.21 0.21,0.21,0.21,0.22), mean=0.197, stddev=0.00763], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0491, stddev=0.00507], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.09,0.11,0.19,0.25,0.28 0.29,0.30,0.31,0.31), mean=0.185, stddev=0.069], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.005085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.09 0.10,0.10,0.10,0.12), mean=0.0809, stddev=0.0088], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.15 0.15,0.16,0.16,0.17,0.17 0.18,0.18,0.18,0.18), mean=0.163, stddev=0.0066], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.12,0.21,0.26 0.29,0.31,0.32,0.34), mean=0.144, stddev=0.0758], bias-{mean,stddev}=0.0001313,0.0048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.05e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.27,-0.19,-0.16,-0.10 -0.04,0.01,0.12,0.23,0.28 0.32,0.38,0.40,0.49), mean=0.119, stddev=0.126], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.56,-0.46,-0.26 -0.10,0.11,0.44,0.78,0.98 1.2,1.4,1.4,1.8), mean=0.448, stddev=0.429], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.03,0.03 0.04,0.05,0.05,0.08), mean=0.0118, stddev=0.0149], oderiv-count=22080
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.91,-0.79,-0.66 -0.52,-0.31,0.04,0.38,0.56 0.74,0.92,0.97,1.8), mean=0.0386, stddev=0.422], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.31,0.44 0.54,0.65,0.74,0.92), mean=0.124, stddev=0.2]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004251, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.18 0.18,0.19,0.19,0.20,0.20 0.20,0.20,0.21,0.21), mean=0.192, stddev=0.00681], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0478, stddev=0.0049], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.11,0.18,0.24,0.27 0.28,0.30,0.30,0.31), mean=0.181, stddev=0.0658], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.004962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.09 0.09,0.10,0.10,0.14), mean=0.0789, stddev=0.00886], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.15 0.15,0.15,0.16,0.16,0.17 0.17,0.17,0.17,0.18), mean=0.159, stddev=0.00658], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.07,0.12,0.21,0.25 0.28,0.30,0.32,0.33), mean=0.14, stddev=0.0747], bias-{mean,stddev}=0.0003312,0.004608, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.94e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,-0.03,-0.01,0.02 0.04,0.07,0.12,0.17,0.20 0.22,0.25,0.27,0.37), mean=0.119, stddev=0.0613], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,0.005,0.07,0.15 0.21,0.30,0.45,0.60,0.68 0.76,0.87,0.94,1.2), mean=0.452, stddev=0.19]
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.89,-0.73,-0.59 -0.43,-0.26,0.09,0.45,0.66 0.86,1.0,1.1,1.6), mean=0.101, stddev=0.433], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.31,0.43 0.52,0.60,0.67,1.3), mean=0.119, stddev=0.196]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.18,0.18,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.189, stddev=0.00714], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0469, stddev=0.00479], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.11,0.18,0.24,0.26 0.28,0.29,0.29,0.30), mean=0.177, stddev=0.0654], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.004888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.06 0.07,0.07,0.08,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0777, stddev=0.00858], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.14 0.15,0.15,0.16,0.16,0.16 0.17,0.17,0.17,0.17), mean=0.156, stddev=0.00697], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.11,0.21,0.25 0.29,0.31,0.32,0.34), mean=0.137, stddev=0.0758], bias-{mean,stddev}=0.0002434,0.004149, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.82,-0.72,-0.54 -0.37,-0.21,0.15,0.48,0.68 0.82,0.93,1.1,1.6), mean=0.142, stddev=0.409], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.34,0.46 0.52,0.59,0.63,0.86), mean=0.137, stddev=0.195]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.17,0.18,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.184, stddev=0.00761], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0459, stddev=0.00478], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.11,0.18,0.23,0.25 0.27,0.28,0.28,0.29), mean=0.174, stddev=0.062], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.005107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.09 0.09,0.10,0.11,0.40), mean=0.0803, stddev=0.0149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.15 0.15,0.15,0.16,0.17,0.17 0.17,0.17,0.17,0.62), mean=0.161, stddev=0.0293], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.12,0.21,0.26 0.29,0.32,0.33,0.62), mean=0.14, stddev=0.0843], bias-{mean,stddev}=0.0001417,0.004096, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.44e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-0.24,-0.18,-0.10 -0.04,0.02,0.14,0.28,0.35 0.42,0.47,0.52,0.62), mean=0.148, stddev=0.172], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.78,-0.61,-0.33 -0.14,0.06,0.43,0.80,1.0 1.2,1.4,1.5,2.6), mean=0.441, stddev=0.482], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.05,0.07 0.08,0.09,0.10,0.14), mean=0.0212, stddev=0.0301], oderiv-count=2944
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-0.79,-0.68,-0.55 -0.41,-0.21,0.15,0.52,0.71 0.88,1.0,1.1,1.8), mean=0.161, stddev=0.455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.38,0.50 0.56,0.64,0.69,0.90), mean=0.155, stddev=0.214]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.004018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.17 0.17,0.18,0.18,0.19,0.19 0.19,0.20,0.20,0.20), mean=0.182, stddev=0.00684], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0452, stddev=0.00458], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.12,0.18,0.23,0.25 0.26,0.27,0.27,0.28), mean=0.173, stddev=0.0561], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00534, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.08,0.08,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.0849, stddev=0.00943], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.16,0.16,0.17,0.18,0.18 0.18,0.19,0.19,0.19), mean=0.171, stddev=0.00696], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.07,0.12,0.23,0.28 0.31,0.34,0.35,0.37), mean=0.148, stddev=0.0848], bias-{mean,stddev}=7.816e-05,0.004269, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-1.0,-0.76,-0.55 -0.36,-0.18,0.24,0.63,0.87 1.1,1.3,1.3,2.0), mean=0.237, stddev=0.493], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.43,0.56 0.67,0.78,0.84,1.1), mean=0.177, stddev=0.248]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, params-rms=0.005326, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.16 0.16,0.16,0.17,0.18,0.18 0.18,0.18,0.19,0.19), mean=0.17, stddev=0.0069], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.07 0.08,0.08,0.08,0.09,0.09 0.10,0.10,0.10,0.11), mean=0.0849, stddev=0.00763], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.08,0.14,0.23,0.27 0.29,0.31,0.31,0.33), mean=0.152, stddev=0.0763], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.006024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.08,0.09,0.09,0.10,0.11 0.11,0.12,0.12,0.16), mean=0.0958, stddev=0.0108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.18 0.18,0.19,0.19,0.20,0.20 0.21,0.21,0.21,0.21), mean=0.193, stddev=0.0079], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.09,0.15,0.25,0.30 0.33,0.36,0.37,0.40), mean=0.173, stddev=0.0842], bias-{mean,stddev}=0.0006089,0.006292, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.008,0.02,0.02 0.03,0.03,0.04,0.05), mean=0.0094, stddev=0.0101], oderiv-count=77312
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.81,-0.69,-0.56 -0.39,-0.19,0.15,0.46,0.64 0.78,0.92,1.0,1.4), mean=0.136, stddev=0.398], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.34,0.43 0.49,0.57,0.60,0.78), mean=0.145, stddev=0.185]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, params-rms=0.004808, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.14 0.15,0.15,0.15,0.16,0.16 0.16,0.17,0.17,0.17), mean=0.154, stddev=0.00622], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.07,0.08,0.08,0.09 0.09,0.09,0.09,0.13), mean=0.0765, stddev=0.00789], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.12,0.21,0.24 0.26,0.28,0.29,0.30), mean=0.137, stddev=0.0702], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-06,-4e-06,-3e-06,-3e-06 -2e-06,-2e-06,2e-07,2e-06,2e-06 3e-06,4e-06,4e-06,6e-06), mean=6.49e-08, stddev=1.83e-06], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,1.1,1.9,2.2 2.4,2.7,2.8,3.1), mean=1.01, stddev=0.896]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000551732, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.004541, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.002,0.007,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.19), mean=0.0654, stddev=0.0317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.22 0.23,0.23,0.24,0.25,0.26 0.26,0.27,0.27,0.27), mean=0.241, stddev=0.0112], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.10,0.17,0.32,0.39 0.44,0.48,0.49,0.53), mean=0.211, stddev=0.116], bias-{mean,stddev}=-2.848e-06,0.004672, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.003275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.07,0.08,0.09), mean=0.0509, stddev=0.0123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.10,0.10,0.10,0.11,0.11 0.11,0.11,0.11,0.11), mean=0.105, stddev=0.0034], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.06,0.09,0.13,0.16 0.17,0.18,0.18,0.20), mean=0.0972, stddev=0.0392], bias-{mean,stddev}=0.0001821,0.003801, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.29e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.13,-0.07,-0.05,-0.02 -0.002,0.02,0.07,0.14,0.18 0.22,0.25,0.27,0.46), mean=0.08, stddev=0.0739], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.31,-0.24,-0.09 -0.005,0.14,0.45,0.72,0.86 1.0,1.2,1.4,3.2), mean=0.443, stddev=0.364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.03,0.04 0.05,0.07,0.08,0.11), mean=0.0113, stddev=0.0194], oderiv-count=5888
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.34,-0.30,-0.21 -0.14,-0.06,0.09,0.24,0.33 0.42,0.53,0.59,0.94), mean=0.0929, stddev=0.197], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.17,0.21 0.23,0.27,0.29,0.34), mean=0.0756, stddev=0.0898]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000551732, l2-regularize=0.008, max-change=0.75, params-rms=0.002243, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.07,0.07,0.07,0.08 0.08,0.08,0.08,0.08), mean=0.0717, stddev=0.00329], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.02 0.03,0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0353, stddev=0.00651], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.06,0.10,0.11 0.12,0.13,0.13,0.22), mean=0.0627, stddev=0.035], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=209.46, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-06,-3e-06,-3e-06,-2e-06 -2e-06,-1e-06,-3e-07,8e-07,1e-06 2e-06,2e-06,3e-06,3e-06), mean=-1.75e-07, stddev=1.19e-06], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.49,0.78,0.87 0.93,1.0,1.1,1.3), mean=0.442, stddev=0.343]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00275866, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.003508, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.005,0.01 0.02,0.03,0.05,0.07,0.08 0.09,0.10,0.11,0.20), mean=0.051, stddev=0.0234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.186, stddev=0.0106], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.05,0.14,0.25,0.30 0.34,0.37,0.38,0.44), mean=0.156, stddev=0.102], bias-{mean,stddev}=-1.122e-10,0.003875, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.006,0.008 0.01,0.01,0.02,0.06), mean=0.00285, stddev=0.00425], oderiv-count=3392

LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.62275 tdnnf2.linear:3.73457 tdnnf2.affine:3.88635 tdnnf3.linear:2.91876 tdnnf3.affine:3.25142 tdnnf4.linear:2.67867 tdnnf4.affine:3.07757 tdnnf5.linear:2.11482 tdnnf5.affine:2.41055 tdnnf6.linear:2.49247 tdnnf6.affine:2.91018 tdnnf7.linear:2.31285 tdnnf7.affine:2.77642 tdnnf8.linear:2.24477 tdnnf8.affine:2.68883 tdnnf9.linear:2.2351 tdnnf9.affine:2.60803 tdnnf10.linear:2.17634 tdnnf10.affine:2.54492 tdnnf11.linear:2.13537 tdnnf11.affine:2.50599 tdnnf12.linear:2.08618 tdnnf12.affine:2.61787 tdnnf13.linear:2.05732 tdnnf13.affine:2.73734 prefinal-l:2.72687 prefinal-chain.affine:3.09085 prefinal-chain.linear:2.46173 output.affine:3.86868 prefinal-xent.affine:1.68128 prefinal-xent.linear:1.14866 output-xent.affine:2.98954 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7379 tdnnf2.linear:9.02674 tdnnf2.affine:7.68048 tdnnf3.linear:6.79806 tdnnf3.affine:6.04619 tdnnf4.linear:6.13525 tdnnf4.affine:5.59754 tdnnf5.linear:4.23093 tdnnf5.affine:4.29733 tdnnf6.linear:6.0529 tdnnf6.affine:5.62611 tdnnf7.linear:5.74228 tdnnf7.affine:5.56363 tdnnf8.linear:5.69125 tdnnf8.affine:5.52573 tdnnf9.linear:5.72781 tdnnf9.affine:5.49927 tdnnf10.linear:5.77347 tdnnf10.affine:5.49312 tdnnf11.linear:5.95916 tdnnf11.affine:5.58031 tdnnf12.linear:6.09794 tdnnf12.affine:5.8501 tdnnf13.linear:5.92415 tdnnf13.affine:6.12502 prefinal-l:8.78786 prefinal-chain.affine:6.18632 prefinal-chain.linear:7.96286 output.affine:18.0861 prefinal-xent.affine:4.94148 prefinal-xent.linear:5.24549 output-xent.affine:29.1824 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.52088 tdnnf2.linear:0.413631 tdnnf2.affine:0.504195 tdnnf3.linear:0.428482 tdnnf3.affine:0.536076 tdnnf4.linear:0.434922 tdnnf4.affine:0.54761 tdnnf5.linear:0.495445 tdnnf5.affine:0.556308 tdnnf6.linear:0.411826 tdnnf6.affine:0.51704 tdnnf7.linear:0.402232 tdnnf7.affine:0.498738 tdnnf8.linear:0.394431 tdnnf8.affine:0.486035 tdnnf9.linear:0.389785 tdnnf9.affine:0.474464 tdnnf10.linear:0.376773 tdnnf10.affine:0.463705 tdnnf11.linear:0.358089 tdnnf11.affine:0.449379 tdnnf12.linear:0.341783 tdnnf12.affine:0.450327 tdnnf13.linear:0.34659 tdnnf13.affine:0.446318 prefinal-l:0.310452 prefinal-chain.affine:0.499292 prefinal-chain.linear:0.30654 output.affine:0.213693 prefinal-xent.affine:0.340042 prefinal-xent.linear:0.218274 output-xent.affine:0.102695 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:PrintProfile():cu-device.cc:563) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=21 threads=1
# Ended (code 0) at Thu Jul 21 13:17:09 EDT 2022, elapsed time 21 seconds
