# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/16.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl 
# Started at Wed Jul 20 03:34:23 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.12,0.13,0.27,0.35,0.45 0.55,0.63,0.70,1.0), mean=0.267, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.43,0.44 0.46,0.49,0.61,0.75,0.87 0.97,1.0,1.0,1.2), mean=0.633, stddev=0.157], bias-{mean,stddev}=0.00245,0.09507, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.68e+06, self-repaired-proportion=0.568887, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,3e-08,0.03,0.08,0.13 0.17,0.22,0.26,0.40), mean=0.0452, stddev=0.06], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,6e-06,0.44,0.96,1.0 1.0,1.0,1.0,1.0), mean=0.462, stddev=0.424], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.09,0.14,0.18 0.22,0.26,0.30,0.42), mean=0.106, stddev=0.056], oderiv-count=4.73312e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46668.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-08,0.02,0.07,0.12 0.16,0.21,0.24,0.38), mean=0.043, stddev=0.0562], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,7e-06,0.03,0.05,0.05 0.06,0.06,0.07,0.10), mean=0.0245, stddev=0.0223]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01512, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.68,0.68 0.68,0.68,0.68,0.68,0.68 0.69,0.69,0.69,0.69), mean=0.684, stddev=0.000669], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.11 0.12,0.12,0.16,0.20,0.23 0.25,0.28,0.30,0.34), mean=0.165, stddev=0.044], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.16,0.21,0.27,0.31 0.34,0.37,0.40,0.43), mean=0.215, stddev=0.0642], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.42,0.43,0.45,0.47,0.48 0.49,0.49,0.50,0.51), mean=0.449, stddev=0.0229], bias-{mean,stddev}=-0.02359,0.121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.2e+06, self-repaired-proportion=0.00857285, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.005,0.01 0.02,0.04,0.08,0.14,0.17 0.18,0.21,0.22,0.30), mean=0.0903, stddev=0.0533], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.11 0.17,0.24,0.45,0.72,0.84 0.89,0.91,0.92,0.95), mean=0.478, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.01,0.01,0.02,0.03,0.04 0.04,0.05,0.05,0.07), mean=0.0219, stddev=0.00983], oderiv-count=4.68051e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46156.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.003,0.005,0.01 0.02,0.04,0.08,0.13,0.16 0.18,0.20,0.21,0.29), mean=0.0881, stddev=0.0507], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.05 0.07,0.09,0.13,0.15,0.16 0.18,0.19,0.20,0.21), mean=0.121, stddev=0.0381]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56,0.56 0.56,0.56,0.56,0.56), mean=0.558, stddev=0.00133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.16,0.17 0.18,0.19,0.20,0.24), mean=0.137, stddev=0.0254], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01201, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.15,0.16,0.19,0.22,0.23 0.25,0.26,0.27,0.32), mean=0.19, stddev=0.0312], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.34,0.35,0.36 0.36,0.37,0.38,0.40,0.41 0.41,0.42,0.42,0.44), mean=0.384, stddev=0.0177], bias-{mean,stddev}=-0.01461,0.1213, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.19e+06, self-repaired-proportion=0.00201613, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.02,0.03 0.04,0.05,0.09,0.15,0.19 0.22,0.24,0.25,0.34), mean=0.103, stddev=0.0579], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.10,0.12,0.16 0.21,0.28,0.47,0.67,0.78 0.84,0.87,0.89,0.93), mean=0.479, stddev=0.206], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.009,0.01,0.02,0.02 0.02,0.03,0.03,0.05), mean=0.0133, stddev=0.00524], oderiv-count=4.52736e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45644.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.01,0.02,0.03 0.04,0.05,0.09,0.14,0.18 0.21,0.23,0.24,0.32), mean=0.102, stddev=0.0548], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.05,0.07,0.09 0.10,0.12,0.15,0.17,0.18 0.20,0.21,0.22,0.24), mean=0.145, stddev=0.0332]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48,0.48 0.48,0.48,0.48,0.48), mean=0.48, stddev=0.000323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.14 0.15,0.15,0.16,0.21), mean=0.119, stddev=0.0161], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.14 0.15,0.16,0.18,0.20,0.21 0.22,0.23,0.24,0.27), mean=0.18, stddev=0.0238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.34,0.35,0.36,0.37,0.38 0.39,0.39,0.40,0.41), mean=0.363, stddev=0.0152], bias-{mean,stddev}=-0.006594,0.1291, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.99e+05, self-repaired-proportion=0.0117077, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.008,0.01,0.03 0.04,0.05,0.09,0.16,0.20 0.24,0.28,0.29,0.45), mean=0.109, stddev=0.0659], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.06,0.09,0.14 0.20,0.28,0.47,0.67,0.79 0.85,0.90,0.92,1.0), mean=0.48, stddev=0.215], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.03 0.03,0.04,0.05,0.10), mean=0.0211, stddev=0.00835], oderiv-count=1.5273e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15214.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.009,0.01,0.03 0.04,0.05,0.10,0.15,0.19 0.23,0.26,0.28,0.42), mean=0.106, stddev=0.0624], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.06,0.09 0.11,0.13,0.15,0.18,0.19 0.20,0.21,0.22,0.25), mean=0.15, stddev=0.035]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.37 0.37,0.37,0.37,0.37,0.37 0.37,0.37,0.37,0.37), mean=0.374, stddev=0.00044], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.18), mean=0.132, stddev=0.0122], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.0139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.23), mean=0.156, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.41 0.42,0.43,0.44,0.46,0.47 0.48,0.48,0.48,0.50), mean=0.444, stddev=0.0196], bias-{mean,stddev}=-0.006517,0.1193, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.0336822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,0.003,0.004,0.01 0.02,0.03,0.06,0.13,0.18 0.22,0.25,0.27,0.38), mean=0.0839, stddev=0.0648], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.03,0.04,0.08 0.14,0.21,0.44,0.73,0.84 0.89,0.93,0.95,1.0), mean=0.465, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.04,0.05 0.06,0.07,0.08,0.10), mean=0.0308, stddev=0.0137], oderiv-count=1.52762e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15214.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-18,0.002,0.004,0.009 0.02,0.03,0.06,0.13,0.17 0.21,0.24,0.25,0.35), mean=0.0805, stddev=0.0611], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-10,0.02,0.03,0.04 0.06,0.08,0.11,0.13,0.15 0.16,0.16,0.17,0.20), mean=0.105, stddev=0.0337]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.458, stddev=0.000743], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.17), mean=0.114, stddev=0.0126], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.25), mean=0.181, stddev=0.0194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.35,0.35,0.36,0.38,0.38 0.39,0.40,0.40,0.44), mean=0.365, stddev=0.016], bias-{mean,stddev}=-0.01658,0.1208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.69e+05, self-repaired-proportion=0.00503088, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.03 0.04,0.05,0.09,0.15,0.19 0.22,0.26,0.28,0.43), mean=0.104, stddev=0.0616], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.09,0.10,0.15 0.21,0.28,0.46,0.64,0.73 0.79,0.86,0.88,0.98), mean=0.463, stddev=0.196], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.03,0.03 0.04,0.04,0.05,0.07), mean=0.021, stddev=0.00781], oderiv-count=1.46317e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14702.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.03 0.04,0.05,0.09,0.14,0.18 0.21,0.24,0.27,0.40), mean=0.0999, stddev=0.0582], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.06,0.07,0.09 0.10,0.12,0.15,0.17,0.19 0.20,0.21,0.22,0.25), mean=0.146, stddev=0.0338]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.463, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.10,0.11,0.13,0.13 0.14,0.14,0.15,0.20), mean=0.115, stddev=0.0128], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.15 0.16,0.17,0.18,0.20,0.21 0.21,0.22,0.23,0.25), mean=0.181, stddev=0.0187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.33 0.34,0.35,0.36,0.38,0.39 0.39,0.40,0.40,0.41), mean=0.364, stddev=0.0183], bias-{mean,stddev}=-0.01174,0.1301, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.84e+05, self-repaired-proportion=0.0036917, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.03,0.05,0.09,0.16,0.20 0.24,0.28,0.31,0.41), mean=0.108, stddev=0.0683], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.12,0.15 0.19,0.26,0.46,0.67,0.76 0.82,0.88,0.89,0.97), mean=0.469, stddev=0.21], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.02,0.03,0.03 0.04,0.04,0.05,0.07), mean=0.0204, stddev=0.00819], oderiv-count=1.40224e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14190.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.03 0.03,0.05,0.09,0.15,0.19 0.23,0.27,0.30,0.39), mean=0.104, stddev=0.0647], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.09 0.10,0.12,0.15,0.18,0.19 0.20,0.21,0.22,0.26), mean=0.147, stddev=0.0355]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.458, stddev=0.000518], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.18), mean=0.114, stddev=0.0136], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.15 0.16,0.16,0.18,0.19,0.20 0.21,0.22,0.22,0.24), mean=0.18, stddev=0.0179], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.32,0.33 0.34,0.35,0.36,0.38,0.39 0.40,0.40,0.40,0.42), mean=0.362, stddev=0.0189], bias-{mean,stddev}=-0.01751,0.1314, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.58e+05, self-repaired-proportion=0.00542348, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.01,0.01,0.02 0.03,0.05,0.09,0.15,0.20 0.24,0.28,0.30,0.37), mean=0.103, stddev=0.0672], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.07,0.08,0.13 0.18,0.26,0.45,0.65,0.75 0.83,0.89,0.90,0.94), mean=0.459, stddev=0.214], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.03,0.03 0.04,0.05,0.05,0.08), mean=0.021, stddev=0.00927], oderiv-count=1.4105e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13678.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.008,0.01,0.02 0.03,0.04,0.09,0.15,0.19 0.23,0.27,0.29,0.35), mean=0.0999, stddev=0.0636], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.06,0.07 0.09,0.11,0.15,0.18,0.19 0.20,0.21,0.22,0.24), mean=0.143, stddev=0.0384]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.459, stddev=0.000657], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.19), mean=0.114, stddev=0.0138], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.15,0.15 0.16,0.17,0.18,0.19,0.20 0.21,0.22,0.22,0.24), mean=0.181, stddev=0.0172], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.33 0.34,0.35,0.36,0.38,0.39 0.40,0.40,0.40,0.41), mean=0.362, stddev=0.0186], bias-{mean,stddev}=-0.01535,0.1288, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.74e+05, self-repaired-proportion=0.00587047, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.01,0.01,0.02 0.03,0.05,0.09,0.15,0.20 0.23,0.28,0.30,0.41), mean=0.104, stddev=0.0659], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.07,0.09,0.13 0.18,0.26,0.45,0.66,0.76 0.82,0.87,0.90,0.94), mean=0.461, stddev=0.212], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.02,0.03,0.03 0.04,0.04,0.05,0.08), mean=0.02, stddev=0.00867], oderiv-count=1.34733e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13166.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.009,0.01,0.02 0.03,0.05,0.09,0.15,0.19 0.22,0.26,0.28,0.39), mean=0.101, stddev=0.0626], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.05,0.06,0.08 0.09,0.11,0.15,0.17,0.19 0.20,0.21,0.21,0.24), mean=0.144, stddev=0.0368]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.459, stddev=0.000532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.19), mean=0.114, stddev=0.0136], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.15 0.16,0.17,0.18,0.19,0.20 0.21,0.22,0.22,0.24), mean=0.18, stddev=0.0171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.33 0.34,0.35,0.36,0.38,0.39 0.40,0.40,0.41,0.43), mean=0.362, stddev=0.0196], bias-{mean,stddev}=-0.004704,0.1292, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.84e+05, self-repaired-proportion=0.00556677, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.03 0.03,0.05,0.10,0.16,0.20 0.24,0.28,0.31,0.39), mean=0.108, stddev=0.0684], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.08,0.10,0.15 0.19,0.27,0.47,0.69,0.77 0.83,0.89,0.91,0.96), mean=0.478, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.009,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.04,0.04,0.07), mean=0.019, stddev=0.00772], oderiv-count=1.26381e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12654.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.03 0.03,0.05,0.09,0.16,0.20 0.23,0.27,0.29,0.37), mean=0.105, stddev=0.0647], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.06,0.07,0.08 0.10,0.11,0.15,0.18,0.19 0.20,0.21,0.21,0.24), mean=0.144, stddev=0.0362]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.459, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.19), mean=0.114, stddev=0.0137], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.21,0.22,0.22,0.23), mean=0.181, stddev=0.016], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.33,0.34 0.34,0.35,0.36,0.38,0.39 0.40,0.41,0.42,0.43), mean=0.363, stddev=0.02], bias-{mean,stddev}=-0.01814,0.132, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.94e+05, self-repaired-proportion=0.00872803, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.01,0.02 0.03,0.04,0.09,0.16,0.20 0.23,0.27,0.29,0.36), mean=0.102, stddev=0.0665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.07,0.08,0.12 0.17,0.24,0.45,0.66,0.77 0.84,0.88,0.90,0.97), mean=0.456, stddev=0.22], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.07), mean=0.0192, stddev=0.00807], oderiv-count=1.24384e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12142.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.01,0.01,0.02 0.03,0.04,0.09,0.15,0.19 0.22,0.26,0.28,0.35), mean=0.099, stddev=0.0632], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.05,0.06,0.08 0.09,0.11,0.14,0.17,0.18 0.20,0.20,0.21,0.22), mean=0.139, stddev=0.0366]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47), mean=0.466, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.13,0.13 0.14,0.15,0.16,0.21), mean=0.116, stddev=0.0144], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01144, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.16,0.17,0.18,0.20,0.20 0.21,0.21,0.22,0.24), mean=0.182, stddev=0.0152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.34 0.34,0.35,0.37,0.38,0.39 0.40,0.40,0.41,0.42), mean=0.365, stddev=0.0191], bias-{mean,stddev}=-0.01387,0.128, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.78e+05, self-repaired-proportion=0.00585938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.01,0.02 0.03,0.05,0.09,0.16,0.20 0.23,0.28,0.30,0.37), mean=0.104, stddev=0.066], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.09,0.14 0.18,0.26,0.46,0.66,0.76 0.84,0.88,0.90,0.97), mean=0.464, stddev=0.214], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.03 0.03,0.04,0.04,0.08), mean=0.0183, stddev=0.00683], oderiv-count=1.17338e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11630.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.01,0.02 0.03,0.05,0.09,0.15,0.19 0.22,0.26,0.28,0.35), mean=0.101, stddev=0.0628], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.08 0.09,0.11,0.14,0.17,0.18 0.19,0.20,0.21,0.22), mean=0.14, stddev=0.0347]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.47,0.47,0.47 0.47,0.47,0.47,0.47,0.48 0.48,0.48,0.48,0.48), mean=0.474, stddev=0.00121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.13 0.14,0.15,0.16,0.21), mean=0.118, stddev=0.0137], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.21,0.21,0.22,0.26), mean=0.182, stddev=0.0138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.34,0.35,0.36,0.38,0.39 0.40,0.40,0.41,0.41), mean=0.364, stddev=0.0183], bias-{mean,stddev}=-0.01326,0.1265, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.72e+05, self-repaired-proportion=0.00195312, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.03 0.04,0.05,0.09,0.16,0.21 0.24,0.28,0.29,0.34), mean=0.108, stddev=0.0658], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.11,0.15 0.21,0.28,0.46,0.67,0.75 0.80,0.86,0.88,0.93), mean=0.467, stddev=0.202], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.06), mean=0.0166, stddev=0.0054], oderiv-count=1.11264e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11118.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.02,0.03 0.04,0.05,0.09,0.16,0.20 0.22,0.26,0.28,0.32), mean=0.105, stddev=0.0622], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.09 0.10,0.12,0.15,0.18,0.19 0.20,0.21,0.22,0.24), mean=0.146, stddev=0.0344]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, params-rms=0.01349, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.432, stddev=0.000518], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.20,0.21,0.22,0.22,0.23 0.23,0.24,0.24,0.26), mean=0.215, stddev=0.0115], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01129, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.18, stddev=0.014], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.33,0.34 0.34,0.35,0.36,0.37,0.38 0.38,0.39,0.39,0.40), mean=0.361, stddev=0.0135], bias-{mean,stddev}=-0.01178,0.1253, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.99e+05, self-repaired-proportion=0.0176332, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,0.005,0.01,0.02 0.03,0.04,0.08,0.14,0.19 0.23,0.27,0.29,0.37), mean=0.0944, stddev=0.0665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.04,0.09,0.13 0.16,0.24,0.45,0.69,0.80 0.86,0.90,0.94,0.99), mean=0.465, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0213, stddev=0.00686], oderiv-count=1.09594e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11118.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-30,0.004,0.01,0.02 0.03,0.04,0.07,0.14,0.18 0.22,0.26,0.28,0.35), mean=0.0913, stddev=0.0629], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-16,0.03,0.06,0.07 0.08,0.10,0.13,0.15,0.16 0.17,0.18,0.18,0.21), mean=0.123, stddev=0.0322]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, params-rms=0.01245, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.398, stddev=0.000503], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.18,0.19,0.20,0.21,0.22 0.22,0.22,0.23,0.24), mean=0.199, stddev=0.0133], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11118.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-4e-08,-3e-08 -3e-08,-2e-08,1e-09,2e-08,2e-08 3e-08,3e-08,4e-08,6e-08), mean=2.78e-12, stddev=1.84e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.48,0.49 0.49,0.50,0.52,0.54,0.55 0.56,0.57,0.58,0.61), mean=0.522, stddev=0.0241]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000205724, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01689, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.01,0.03,0.09 0.15,0.20,0.26,0.32,0.35 0.39,0.43,0.45,0.90), mean=0.257, stddev=0.0852], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.79,0.81,0.83 0.85,0.86,0.90,0.93,0.95 0.96,0.97,0.97,1.0), mean=0.897, stddev=0.0396], bias-{mean,stddev}=0.0001246,0.04491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.008876, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.38), mean=0.141, stddev=0.0161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.26 0.27,0.27,0.28,0.29,0.30 0.30,0.31,0.31,0.45), mean=0.284, stddev=0.0156], bias-{mean,stddev}=-0.0114,0.1181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.5e+05, self-repaired-proportion=0.0388761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,0.004,0.006,0.01 0.01,0.02,0.06,0.13,0.17 0.20,0.25,0.27,0.41), mean=0.0756, stddev=0.0634], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.04,0.05,0.08 0.12,0.19,0.42,0.72,0.84 0.91,0.94,0.97,1.0), mean=0.451, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.007,0.01,0.01,0.02 0.02,0.02,0.02,0.03), mean=0.0108, stddev=0.00432], oderiv-count=1.12422e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11118.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-30,0.003,0.005,0.009 0.01,0.02,0.05,0.12,0.16 0.19,0.23,0.25,0.39), mean=0.0722, stddev=0.0601], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-16,0.02,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.14,0.15,0.22), mean=0.0902, stddev=0.0311]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000205724, l2-regularize=0.008, max-change=0.75, params-rms=0.008248, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26), mean=0.264, stddev=0.00015], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.15,0.16,0.17,0.20), mean=0.131, stddev=0.0146], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11118.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-2e-08,-2e-08 -2e-08,-1e-08,-2e-10,1e-08,2e-08 2e-08,2e-08,3e-08,3e-08), mean=3.8e-10, stddev=1.21e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.26 0.27,0.27,0.28,0.29,0.30 0.30,0.31,0.31,0.32), mean=0.282, stddev=0.0132]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00102862, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03345, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.05 0.12,0.24,0.51,0.68,0.77 0.84,0.91,0.93,1.3), mean=0.48, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.6,1.6,1.6 1.7,1.7,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.78, stddev=0.0766], bias-{mean,stddev}=7.248e-09,0.06292, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,5e-08,4e-05,0.0001 0.0002,0.0004,0.0007,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.001, stddev=0.00117], oderiv-count=1.09101e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/16.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.2122 tdnnf2.linear:1.94543 tdnnf2.affine:2.28819 tdnnf3.linear:1.80914 tdnnf3.affine:1.91302 tdnnf4.linear:1.58993 tdnnf4.affine:1.78851 tdnnf5.linear:1.24519 tdnnf5.affine:1.39673 tdnnf6.linear:1.52031 tdnnf6.affine:1.72373 tdnnf7.linear:1.45308 tdnnf7.affine:1.66094 tdnnf8.linear:1.38254 tdnnf8.affine:1.60184 tdnnf9.linear:1.33555 tdnnf9.affine:1.55475 tdnnf10.linear:1.30353 tdnnf10.affine:1.50722 tdnnf11.linear:1.26578 tdnnf11.affine:1.48466 tdnnf12.linear:1.24745 tdnnf12.affine:1.46558 tdnnf13.linear:1.20342 tdnnf13.affine:1.45886 prefinal-l:1.32452 prefinal-chain.affine:1.5321 prefinal-chain.linear:1.23055 output.affine:1.55231 prefinal-xent.affine:0.970783 prefinal-xent.linear:0.63652 output-xent.affine:1.3904 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:10.1471 tdnnf2.linear:7.73921 tdnnf2.affine:8.20237 tdnnf3.linear:6.31477 tdnnf3.affine:7.2873 tdnnf4.linear:5.42659 tdnnf4.affine:7.12871 tdnnf5.linear:4.22837 tdnnf5.affine:6.31964 tdnnf6.linear:5.1761 tdnnf6.affine:7.02327 tdnnf7.linear:5.24079 tdnnf7.affine:7.178 tdnnf8.linear:5.17728 tdnnf8.affine:7.18014 tdnnf9.linear:5.19769 tdnnf9.affine:7.13886 tdnnf10.linear:5.19149 tdnnf10.affine:7.12495 tdnnf11.linear:5.19369 tdnnf11.affine:7.21802 tdnnf12.linear:5.27441 tdnnf12.affine:7.16037 tdnnf13.linear:5.35762 tdnnf13.affine:7.1071 prefinal-l:6.90513 prefinal-chain.affine:7.0436 prefinal-chain.linear:6.37292 output.affine:14.5611 prefinal-xent.affine:5.92133 prefinal-xent.linear:4.2228 output-xent.affine:28.633 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.31111 tdnnf2.linear:0.250683 tdnnf2.affine:0.269058 tdnnf3.linear:0.284714 tdnnf3.affine:0.248733 tdnnf4.linear:0.290509 tdnnf4.affine:0.235209 tdnnf5.linear:0.289733 tdnnf5.affine:0.204331 tdnnf6.linear:0.291972 tdnnf6.affine:0.231214 tdnnf7.linear:0.275204 tdnnf7.affine:0.217547 tdnnf8.linear:0.264889 tdnnf8.affine:0.209567 tdnnf9.linear:0.255171 tdnnf9.affine:0.204716 tdnnf10.linear:0.249311 tdnnf10.affine:0.19872 tdnnf11.linear:0.24195 tdnnf11.affine:0.193181 tdnnf12.linear:0.234697 tdnnf12.affine:0.192624 tdnnf13.linear:0.223299 tdnnf13.affine:0.193327 prefinal-l:0.191033 prefinal-chain.affine:0.204378 prefinal-chain.linear:0.192395 output.affine:0.107341 prefinal-xent.affine:0.150767 prefinal-xent.linear:0.150536 output-xent.affine:0.0486373 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Wed Jul 20 03:34:24 EDT 2022, elapsed time 1 seconds
