# nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/29.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/30.mdl 
# Started at Wed Jul 20 08:18:24 EDT 2022
#
nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/29.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/30.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.00644, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.01 0.02,0.03,0.09,0.12,0.14 0.16,0.18,0.19,0.23), mean=0.0838, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.15,0.19,0.23,0.28 0.33,0.36,0.37,0.41), mean=0.197, stddev=0.0598], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.16,0.26,0.33 0.37,0.41,0.42,0.47), mean=0.183, stddev=0.095], bias-{mean,stddev}=0.0005292,0.0051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.17,0.26 0.36,0.46,0.54,0.78), mean=0.0908, stddev=0.127], oderiv-count=138048
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-1967.83, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.003466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.14 0.15,0.15,0.16,0.16,0.17 0.17,0.17,0.17,0.18), mean=0.157, stddev=0.00886], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.008,0.01,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0345, stddev=0.0187], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.06,0.13,0.21,0.25 0.27,0.28,0.29,0.30), mean=0.138, stddev=0.0741], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.003973, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0625, stddev=0.0118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.12 0.12,0.12,0.13,0.13,0.14 0.14,0.14,0.14,0.15), mean=0.127, stddev=0.00696], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.07,0.18,0.23 0.26,0.28,0.29,0.31), mean=0.099, stddev=0.0797], bias-{mean,stddev}=0.0001745,0.004885, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.07e+05, self-repaired-proportion=0.000542535, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.12,-0.10,-0.05 -0.02,0.01,0.09,0.17,0.21 0.24,0.26,0.30,0.38), mean=0.091, stddev=0.0901], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.68,-0.57,-0.28 -0.08,0.13,0.49,0.86,1.1 1.4,1.7,2.0,2.5), mean=0.508, stddev=0.504], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.14,0.20 0.26,0.33,0.39,0.61), mean=0.0628, stddev=0.0974], oderiv-count=9856
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-1967.83, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.003033, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.13 0.13,0.13,0.14,0.14,0.15 0.15,0.15,0.15,0.16), mean=0.137, stddev=0.00699], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0336, stddev=0.00677], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.12,0.18,0.21 0.22,0.23,0.23,0.24), mean=0.125, stddev=0.0571], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.003274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.07,0.09), mean=0.0518, stddev=0.00782], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.10,0.10,0.10,0.11,0.11 0.11,0.12,0.12,0.12), mean=0.105, stddev=0.00497], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.07,0.14,0.18 0.20,0.22,0.23,0.25), mean=0.0873, stddev=0.058], bias-{mean,stddev}=6.759e-05,0.004734, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.03,0.04 0.05,0.05,0.07,0.11), mean=0.0137, stddev=0.0176], oderiv-count=96384
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-1967.83, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.002707, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.12,0.12,0.12,0.13,0.13 0.13,0.13,0.14,0.14), mean=0.122, stddev=0.00558], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0304, stddev=0.00411], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.06,0.11,0.16,0.18 0.19,0.20,0.20,0.21), mean=0.112, stddev=0.0499], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.003049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.08), mean=0.0483, stddev=0.00679], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.09,0.09,0.10,0.10,0.10 0.11,0.11,0.11,0.11), mean=0.0974, stddev=0.00454], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.06,0.13,0.16 0.19,0.21,0.22,0.24), mean=0.0815, stddev=0.0536], bias-{mean,stddev}=0.0003912,0.004564, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.002977, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.10,0.10,0.10 0.10,0.10,0.10,0.11), mean=0.0951, stddev=0.0055], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0334, stddev=0.00395], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.05,0.08,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.0866, stddev=0.0397], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.003395, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07), mean=0.0379, stddev=0.00641], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.10,0.10,0.11,0.11,0.11 0.12,0.12,0.12,0.13), mean=0.108, stddev=0.00613], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.09,0.14,0.16 0.17,0.18,0.19,0.20), mean=0.1, stddev=0.0419], bias-{mean,stddev}=0.0006147,0.004317, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.10,0.14 0.19,0.26,0.30,0.37), mean=0.0478, stddev=0.0705], oderiv-count=16768
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002628, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.11,0.11,0.12,0.12,0.13 0.13,0.13,0.13,0.13), mean=0.119, stddev=0.00512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0295, stddev=0.00371], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.11,0.15,0.17 0.18,0.19,0.19,0.20), mean=0.11, stddev=0.0445], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.08), mean=0.0479, stddev=0.00698], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.09,0.10,0.10,0.10 0.10,0.11,0.11,0.11), mean=0.0967, stddev=0.00451], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.07,0.13,0.16 0.18,0.19,0.20,0.21), mean=0.0845, stddev=0.0473], bias-{mean,stddev}=0.0005882,0.004146, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.06,0.08 0.10,0.13,0.16,0.21), mean=0.0265, stddev=0.0388], oderiv-count=15936
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002524, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.11 0.11,0.11,0.11,0.12,0.12 0.12,0.13,0.13,0.13), mean=0.114, stddev=0.00532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0284, stddev=0.00325], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.11,0.15,0.16 0.17,0.18,0.18,0.19), mean=0.107, stddev=0.0394], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002878, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.08), mean=0.0455, stddev=0.00703], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.09,0.10,0.10 0.10,0.10,0.10,0.10), mean=0.092, stddev=0.00408], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.07,0.12,0.15 0.17,0.18,0.19,0.20), mean=0.0811, stddev=0.0437], bias-{mean,stddev}=0.0009312,0.003981, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=4.01e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.06,-0.05,-0.03 0.004,0.03,0.10,0.17,0.20 0.24,0.27,0.28,0.35), mean=0.101, stddev=0.0783], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.37,-0.28,-0.14 0.004,0.19,0.48,0.79,0.96 1.1,1.3,1.3,1.6), mean=0.482, stddev=0.372], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.05,0.07 0.09,0.12,0.13,0.21), mean=0.021, stddev=0.0331], oderiv-count=19136
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.10,0.10,0.11,0.11,0.12 0.12,0.12,0.12,0.12), mean=0.109, stddev=0.00462], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0271, stddev=0.00291], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.10,0.14,0.15 0.16,0.17,0.17,0.18), mean=0.103, stddev=0.0365], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0441, stddev=0.0067], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.09,0.09,0.09,0.09 0.10,0.10,0.10,0.10), mean=0.0891, stddev=0.00395], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.04,0.07,0.12,0.14 0.16,0.17,0.18,0.20), mean=0.0785, stddev=0.0422], bias-{mean,stddev}=0.0007317,0.003832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.04,0.05 0.07,0.09,0.10,0.16), mean=0.0187, stddev=0.0245], oderiv-count=47488
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002355, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.10,0.10,0.11,0.11,0.11 0.11,0.12,0.12,0.12), mean=0.106, stddev=0.00459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0265, stddev=0.00287], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.10,0.13,0.15 0.16,0.17,0.17,0.17), mean=0.101, stddev=0.0352], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.043, stddev=0.00649], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.08,0.09,0.09,0.09 0.09,0.09,0.09,0.10), mean=0.0869, stddev=0.00364], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.04,0.07,0.11,0.14 0.16,0.17,0.17,0.19), mean=0.0764, stddev=0.0416], bias-{mean,stddev}=0.0007859,0.003817, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=4.01e+04, self-repaired-proportion=0.0157878, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.07,-0.05,-0.02 -0.002,0.02,0.09,0.15,0.18 0.21,0.25,0.27,0.32), mean=0.088, stddev=0.0722], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.41,-0.28,-0.10 0.05,0.19,0.46,0.76,0.90 1.0,1.1,1.3,1.4), mean=0.465, stddev=0.341]
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.10,0.10,0.11,0.11 0.11,0.11,0.11,0.12), mean=0.102, stddev=0.00419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0255, stddev=0.00268], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.06,0.10,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.0969, stddev=0.0334], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002622, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0415, stddev=0.006], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.08,0.08,0.09,0.09 0.09,0.09,0.09,0.09), mean=0.0838, stddev=0.00318], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.06,0.11,0.14 0.15,0.16,0.17,0.18), mean=0.0732, stddev=0.0411], bias-{mean,stddev}=0.0008545,0.003746, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=5.3e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.04,-0.02,-0.0004 0.01,0.04,0.08,0.14,0.17 0.19,0.21,0.23,0.28), mean=0.0877, stddev=0.0592], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.13,-0.06,0.06 0.16,0.25,0.45,0.68,0.79 0.91,0.99,1.0,1.3), mean=0.465, stddev=0.259]
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.10,0.10,0.10,0.11 0.11,0.11,0.11,0.11), mean=0.101, stddev=0.00377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0252, stddev=0.00261], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.09,0.13,0.14 0.15,0.16,0.16,0.16), mean=0.0961, stddev=0.0325], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002586, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.041, stddev=0.0058], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.08,0.08,0.09,0.09 0.09,0.09,0.09,0.09), mean=0.0827, stddev=0.00284], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.06,0.11,0.13 0.15,0.16,0.17,0.18), mean=0.0719, stddev=0.0409], bias-{mean,stddev}=0.0005118,0.003632, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.41e+03, self-repaired-proportion=0.0146484, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.55,-0.34,-0.30,-0.23 -0.15,-0.05,0.14,0.34,0.45 0.52,0.65,0.79,0.99), mean=0.146, stddev=0.232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-2.0,-1.8,-1.2 -0.72,-0.21,0.60,1.4,2.0 2.5,2.9,3.2,4.0), mean=0.604, stddev=1.09]
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002175, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.09,0.10,0.10,0.10,0.10 0.10,0.10,0.10,0.11), mean=0.0984, stddev=0.00354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0245, stddev=0.00235], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.15,0.15), mean=0.0937, stddev=0.0301], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.002568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.05,0.06,0.06), mean=0.0407, stddev=0.00538], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.08,0.08,0.08,0.09 0.09,0.09,0.09,0.09), mean=0.0821, stddev=0.00303], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.06,0.11,0.13 0.15,0.16,0.17,0.18), mean=0.0711, stddev=0.0413], bias-{mean,stddev}=0.0006571,0.003551, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.18e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.004,0.007,0.02 0.03,0.04,0.07,0.11,0.13 0.15,0.16,0.17,0.19), mean=0.077, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.009,0.06,0.07,0.14 0.20,0.27,0.44,0.59,0.68 0.75,0.81,0.85,1.0), mean=0.437, stddev=0.184]
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.09,0.09,0.10,0.10,0.10 0.10,0.10,0.10,0.10), mean=0.0966, stddev=0.00357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0241, stddev=0.0023], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.09,0.12,0.13 0.14,0.14,0.14,0.15), mean=0.0925, stddev=0.028], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.05,0.05,0.06,0.06), mean=0.0417, stddev=0.00537], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.08,0.08,0.09,0.09 0.09,0.09,0.09,0.09), mean=0.0841, stddev=0.00337], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.06,0.11,0.14 0.15,0.16,0.17,0.18), mean=0.0725, stddev=0.0427], bias-{mean,stddev}=0.0005127,0.003684, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.3e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.01,-0.004,0.01 0.02,0.04,0.08,0.13,0.15 0.17,0.19,0.20,0.23), mean=0.084, stddev=0.0482], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.02,0.02,0.12 0.19,0.28,0.45,0.63,0.72 0.79,0.86,0.91,1.1), mean=0.454, stddev=0.206], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.05,0.07 0.09,0.11,0.12,0.22), mean=0.0225, stddev=0.0341], oderiv-count=8128
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, params-rms=0.002385, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.07,0.08,0.08,0.08 0.08,0.08,0.08,0.08), mean=0.0762, stddev=0.00315], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.038, stddev=0.00334], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.06,0.10,0.12 0.13,0.14,0.14,0.15), mean=0.0678, stddev=0.0351], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.002785, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0441, stddev=0.00634], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.09,0.09,0.09,0.09 0.10,0.10,0.10,0.10), mean=0.089, stddev=0.00381], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.07,0.12,0.14 0.16,0.17,0.17,0.18), mean=0.0797, stddev=0.0399], bias-{mean,stddev}=0.0006977,0.004001, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.03,0.04 0.05,0.07,0.07,0.12), mean=0.0159, stddev=0.0199], oderiv-count=41920
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, params-rms=0.002166, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.06,0.07,0.07,0.07,0.07 0.07,0.08,0.08,0.08), mean=0.0692, stddev=0.00338], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0344, stddev=0.0042], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.05,0.09,0.11 0.12,0.13,0.13,0.14), mean=0.0607, stddev=0.0335], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000177743, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.001535, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0004,0.002,0.005 0.008,0.01,0.02,0.03,0.04 0.04,0.05,0.05,0.07), mean=0.0217, stddev=0.0116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.08,0.09,0.09 0.09,0.09,0.09,0.09), mean=0.0815, stddev=0.0039], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.06,0.11,0.14 0.15,0.17,0.17,0.19), mean=0.0702, stddev=0.0415], bias-{mean,stddev}=-2.415e-06,0.001554, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.001555, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0242, stddev=0.00582], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.05,0.05,0.05,0.05 0.05,0.05,0.05,0.06), mean=0.0497, stddev=0.00203], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.06,0.07 0.08,0.09,0.09,0.10), mean=0.0457, stddev=0.0196], bias-{mean,stddev}=0.0008828,0.00255, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, params-rms=0.001038, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0332, stddev=0.00133], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0163, stddev=0.00289], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.008,0.009 0.01,0.01,0.03,0.04,0.05 0.06,0.06,0.06,0.07), mean=0.0294, stddev=0.0155], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=-655.945, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000888714, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.001302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.001,0.004 0.007,0.01,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.0187, stddev=0.00909], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.07,0.07,0.07,0.07,0.07 0.07,0.07,0.08,0.08), mean=0.0691, stddev=0.00279], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.05,0.09,0.11 0.13,0.14,0.15,0.16), mean=0.0587, stddev=0.0366], bias-{mean,stddev}=2.622e-10,0.001414, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0006,0.002,0.003 0.003,0.005,0.006,0.04), mean=0.00101, stddev=0.00152], oderiv-count=57344

LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.06094 tdnnf2.linear:1.77477 tdnnf2.affine:2.04003 tdnnf3.linear:1.55289 tdnnf3.affine:1.68333 tdnnf4.linear:1.38614 tdnnf4.affine:1.56774 tdnnf5.linear:1.07779 tdnnf5.affine:1.23689 tdnnf6.linear:1.34538 tdnnf6.affine:1.555 tdnnf7.linear:1.29236 tdnnf7.affine:1.47946 tdnnf8.linear:1.23509 tdnnf8.affine:1.43182 tdnnf9.linear:1.20555 tdnnf9.affine:1.39732 tdnnf10.linear:1.15975 tdnnf10.affine:1.34801 tdnnf11.linear:1.14786 tdnnf11.affine:1.32945 tdnnf12.linear:1.11374 tdnnf12.affine:1.31997 tdnnf13.linear:1.09369 tdnnf13.affine:1.35183 prefinal-l:1.22099 prefinal-chain.affine:1.432 prefinal-chain.linear:1.10902 output.affine:1.30736 prefinal-xent.affine:0.800647 prefinal-xent.linear:0.531292 output-xent.affine:1.10935 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:9.69939 tdnnf2.linear:7.32465 tdnnf2.affine:6.78798 tdnnf3.linear:5.9286 tdnnf3.affine:5.495 tdnnf4.linear:5.09141 tdnnf4.affine:5.05278 tdnnf5.linear:3.70674 tdnnf5.affine:3.99412 tdnnf6.linear:4.99341 tdnnf6.affine:5.21226 tdnnf7.linear:4.99741 tdnnf7.affine:5.21854 tdnnf8.linear:4.9439 tdnnf8.affine:5.21751 tdnnf9.linear:5.00525 tdnnf9.affine:5.21702 tdnnf10.linear:4.99638 tdnnf10.affine:5.18808 tdnnf11.linear:5.03318 tdnnf11.affine:5.24008 tdnnf12.linear:5.08526 tdnnf12.affine:5.29549 tdnnf13.linear:5.1763 tdnnf13.affine:5.38596 prefinal-l:6.7322 prefinal-chain.affine:5.22165 prefinal-chain.linear:6.20631 output.affine:15.4499 prefinal-xent.affine:3.93152 prefinal-xent.linear:4.16922 output-xent.affine:28.9484 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.315578 tdnnf2.linear:0.241312 tdnnf2.affine:0.298866 tdnnf3.linear:0.26112 tdnnf3.affine:0.303999 tdnnf4.linear:0.271549 tdnnf4.affine:0.307659 tdnnf5.linear:0.28813 tdnnf5.affine:0.306057 tdnnf6.linear:0.269192 tdnnf6.affine:0.296354 tdnnf7.linear:0.258087 tdnnf7.affine:0.281367 tdnnf8.linear:0.249319 tdnnf8.affine:0.272753 tdnnf9.linear:0.240854 tdnnf9.affine:0.266253 tdnnf10.linear:0.231887 tdnnf10.affine:0.258195 tdnnf11.linear:0.227966 tdnnf11.affine:0.251985 tdnnf12.linear:0.218701 tdnnf12.affine:0.247781 tdnnf13.linear:0.211149 tdnnf13.affine:0.249835 prefinal-l:0.181132 prefinal-chain.affine:0.27302 prefinal-chain.linear:0.178411 output.affine:0.0848451 prefinal-xent.affine:0.202217 prefinal-xent.linear:0.127237 output-xent.affine:0.038344 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:PrintProfile():cu-device.cc:563) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=20 threads=1
# Ended (code 0) at Wed Jul 20 08:18:44 EDT 2022, elapsed time 20 seconds
