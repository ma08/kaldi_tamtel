# nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/9.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/10.mdl 
# Started at Wed Jul 20 03:20:03 EDT 2022
#
nnet3-show-progress --use-gpu=no --verbose=2 telugu_exp/chain_cleaned_1d/tdnn1d_sp/9.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/10.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.006793, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.09,0.12,0.16 0.19,0.21,0.23,0.27), mean=0.087, stddev=0.0509], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.16,0.17,0.20,0.24,0.29 0.31,0.36,0.36,0.39), mean=0.212, stddev=0.0501], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.09,0.10,0.17,0.28,0.34 0.39,0.43,0.44,0.48), mean=0.194, stddev=0.0975], bias-{mean,stddev}=-0.001002,0.03779, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.59e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-0.82,-0.49,-0.21 -0.008,-7e-07,0.10,7.4,11 14,17,19,28), mean=3.25, stddev=4.94], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-11,-7.9,-4.5 -1.2,-0.003,0.15,1.2,4.3 7.2,11,13,25), mean=0.837, stddev=3.63]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-214.715, test-mode=false
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.004247, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.18,0.18,0.19,0.20,0.21 0.21,0.21,0.21,0.22), mean=0.192, stddev=0.0101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.01,0.05,0.06,0.07 0.09,0.09,0.10,0.11), mean=0.041, stddev=0.0251], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.09,0.10,0.16,0.25,0.29 0.31,0.33,0.34,0.36), mean=0.176, stddev=0.0762], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.004646, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.07,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0722, stddev=0.0178], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.14 0.14,0.14,0.15,0.15,0.16 0.16,0.16,0.17,0.17), mean=0.148, stddev=0.00716], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.10,0.19,0.25 0.28,0.31,0.33,0.35), mean=0.129, stddev=0.0737], bias-{mean,stddev}=0.002108,0.03567, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.03,0.08 0.14,0.17,0.21,0.31), mean=0.0211, stddev=0.0476], oderiv-count=66048
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-214.715, test-mode=false
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.004034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.17,0.18,0.18,0.19,0.19 0.19,0.20,0.20,0.20), mean=0.182, stddev=0.00699], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0442, stddev=0.0113], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.12,0.16,0.23,0.26 0.28,0.29,0.29,0.30), mean=0.173, stddev=0.057], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.004018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.12), mean=0.0633, stddev=0.0115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.12 0.12,0.12,0.13,0.13,0.13 0.14,0.14,0.14,0.15), mean=0.128, stddev=0.00479], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.07,0.10,0.16,0.20 0.23,0.24,0.25,0.27), mean=0.117, stddev=0.0531], bias-{mean,stddev}=0.0006353,0.03447, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.03 0.06,0.09,0.12,0.21), mean=0.00811, stddev=0.0246], oderiv-count=41664
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-214.715, test-mode=false
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.003591, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.15 0.16,0.16,0.16,0.17,0.17 0.17,0.17,0.18,0.18), mean=0.162, stddev=0.00609], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.05,0.06,0.06), mean=0.0401, stddev=0.00646], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.11,0.15,0.20,0.22 0.24,0.25,0.25,0.26), mean=0.156, stddev=0.0468], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.003749, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.08,0.10), mean=0.0592, stddev=0.00943], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.12,0.12,0.12,0.12,0.12 0.13,0.13,0.13,0.13), mean=0.12, stddev=0.00406], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.10,0.15,0.18 0.20,0.23,0.24,0.25), mean=0.11, stddev=0.0471], bias-{mean,stddev}=0.0009984,0.03821, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.08e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.79,-0.58,-0.03 0.28,0.89,3.2,6.9,9.7 12,14,17,27), mean=4.2, stddev=3.96], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.0,-3.4,-2.8,-2.0 -1.4,-0.67,0.63,1.9,2.7 3.2,3.8,4.1,6.2), mean=0.62, stddev=1.61]
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.004124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.12 0.12,0.13,0.13,0.14,0.14 0.14,0.14,0.14,0.15), mean=0.132, stddev=0.00528], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0463, stddev=0.00613], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.09,0.12,0.16,0.18 0.19,0.21,0.21,0.21), mean=0.126, stddev=0.0393], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.004335, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.07), mean=0.0486, stddev=0.00631], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.13 0.13,0.13,0.14,0.14,0.14 0.15,0.15,0.15,0.15), mean=0.139, stddev=0.00467], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.10,0.13,0.16,0.18 0.19,0.20,0.20,0.21), mean=0.135, stddev=0.0326], bias-{mean,stddev}=0.0005548,0.03697, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=5.86e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,-0.03,-0.01,0.02 0.07,0.13,0.42,0.99,1.3 1.7,2.2,2.4,3.3), mean=0.588, stddev=0.551], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,-0.15,-0.11,-0.01 0.08,0.19,0.53,0.85,0.97 1.0,1.1,1.1,1.5), mean=0.522, stddev=0.335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.002 0.03,0.07,0.09,0.20), mean=0.00419, stddev=0.0178], oderiv-count=77312
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.003412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.15 0.15,0.15,0.15,0.16,0.16 0.16,0.16,0.16,0.17), mean=0.154, stddev=0.00459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.06), mean=0.0383, stddev=0.00515], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.11,0.14,0.19,0.21 0.21,0.23,0.23,0.23), mean=0.149, stddev=0.0395], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003584, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0567, stddev=0.00857], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.11,0.11,0.11,0.12,0.12 0.12,0.12,0.12,0.13), mean=0.115, stddev=0.00408], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.07,0.10,0.14,0.17 0.19,0.20,0.22,0.23), mean=0.107, stddev=0.0413], bias-{mean,stddev}=-3.873e-05,0.0343, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.003328, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.14 0.14,0.15,0.15,0.15,0.16 0.16,0.16,0.16,0.16), mean=0.151, stddev=0.00481], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.05,0.05,0.05,0.05), mean=0.0374, stddev=0.00447], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.10,0.11,0.14,0.18,0.20 0.21,0.22,0.22,0.23), mean=0.146, stddev=0.0369], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003512, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.06,0.07 0.07,0.08,0.08,0.08), mean=0.0555, stddev=0.0088], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.11,0.11,0.11,0.12,0.12 0.12,0.12,0.12,0.13), mean=0.112, stddev=0.00382], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.07,0.10,0.14,0.16 0.18,0.20,0.20,0.22), mean=0.105, stddev=0.0395], bias-{mean,stddev}=0.001646,0.03648, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.5e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.003,0.02,0.05 0.08,0.14,0.36,0.74,0.98 1.2,1.5,1.7,2.4), mean=0.464, stddev=0.379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.03,0.002,0.07 0.13,0.23,0.52,0.78,0.89 0.95,1.0,1.0,1.1), mean=0.512, stddev=0.28]
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00318, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.14 0.14,0.14,0.14,0.15,0.15 0.15,0.15,0.15,0.15), mean=0.144, stddev=0.00445], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0357, stddev=0.00416], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.14,0.17,0.19 0.20,0.21,0.21,0.22), mean=0.14, stddev=0.0349], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003418, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.07 0.07,0.07,0.08,0.08), mean=0.0541, stddev=0.00824], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.10,0.11,0.11,0.11,0.11 0.12,0.12,0.12,0.12), mean=0.109, stddev=0.00388], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.09,0.13,0.16 0.18,0.19,0.20,0.21), mean=0.103, stddev=0.038], bias-{mean,stddev}=1.801e-05,0.03722, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0,0.05,0.07,0.28), mean=0.00338, stddev=0.0212], oderiv-count=23488
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.003063, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.13 0.13,0.14,0.14,0.14,0.14 0.14,0.15,0.15,0.15), mean=0.139, stddev=0.00416], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0344, stddev=0.00397], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.13,0.17,0.18 0.19,0.20,0.20,0.21), mean=0.135, stddev=0.033], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003335, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0528, stddev=0.0077], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.10,0.10,0.11,0.11,0.11 0.11,0.11,0.11,0.12), mean=0.107, stddev=0.00332], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.09,0.13,0.15 0.17,0.18,0.19,0.21), mean=0.1, stddev=0.0364], bias-{mean,stddev}=0.0006503,0.03634, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.02,0.04,0.06,0.15), mean=0.00288, stddev=0.0128], oderiv-count=38272
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002953, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.13 0.13,0.13,0.13,0.14,0.14 0.14,0.14,0.14,0.14), mean=0.134, stddev=0.00426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0332, stddev=0.00381], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.09,0.10,0.13,0.16,0.17 0.19,0.19,0.19,0.20), mean=0.13, stddev=0.0323], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.06,0.07,0.07,0.08), mean=0.0511, stddev=0.00695], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.10,0.10,0.10,0.11,0.11 0.11,0.11,0.11,0.11), mean=0.103, stddev=0.00294], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.09,0.13,0.15 0.16,0.18,0.18,0.20), mean=0.0971, stddev=0.0347], bias-{mean,stddev}=0.003327,0.03653, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=5.93e+04, self-repaired-proportion=0.114941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.007,0.03,0.06 0.10,0.19,0.47,0.99,1.3 1.6,1.9,2.2,2.9), mean=0.609, stddev=0.498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.07,-0.02,0.06 0.13,0.25,0.54,0.82,0.92 0.98,1.0,1.1,1.2), mean=0.533, stddev=0.294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0,0.11,0.23,1.0), mean=0.0069, stddev=0.0545], oderiv-count=576
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002854, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.12 0.12,0.13,0.13,0.13,0.13 0.13,0.14,0.14,0.14), mean=0.129, stddev=0.00374], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0321, stddev=0.00365], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.12,0.16,0.17 0.18,0.18,0.19,0.19), mean=0.125, stddev=0.0314], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.06,0.07,0.07,0.08), mean=0.0507, stddev=0.00653], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.10,0.10,0.10,0.10,0.11 0.11,0.11,0.11,0.11), mean=0.102, stddev=0.0032], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.09,0.13,0.15 0.16,0.18,0.18,0.20), mean=0.0962, stddev=0.0346], bias-{mean,stddev}=-0.001091,0.03742, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.28e+04, self-repaired-proportion=0.0327637, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.008,0.01,0.02,0.04 0.07,0.13,0.33,0.69,0.92 1.1,1.3,1.5,2.1), mean=0.426, stddev=0.35], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.006,0.03,0.07 0.14,0.23,0.49,0.78,0.88 0.93,0.97,0.99,1.0), mean=0.5, stddev=0.274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0,0.03,0.04,0.16), mean=0.00173, stddev=0.0112], oderiv-count=22400
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00277, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.12 0.12,0.12,0.13,0.13,0.13 0.13,0.13,0.13,0.13), mean=0.125, stddev=0.00364], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0311, stddev=0.00353], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.12,0.15,0.16 0.17,0.18,0.18,0.19), mean=0.122, stddev=0.0305], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.003118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.07), mean=0.0495, stddev=0.00597], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.10,0.10,0.10,0.10 0.10,0.11,0.11,0.11), mean=0.0997, stddev=0.00279], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.09,0.12,0.14 0.16,0.17,0.18,0.20), mean=0.094, stddev=0.0336], bias-{mean,stddev}=-0.0001407,0.03633, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0,0.02,0.06,0.19), mean=0.00144, stddev=0.0116], oderiv-count=14528
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.002652, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.11,0.12,0.12,0.12,0.13 0.13,0.13,0.13,0.13), mean=0.12, stddev=0.0038], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0298, stddev=0.00341], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.08,0.09,0.11,0.15,0.16 0.17,0.17,0.17,0.18), mean=0.116, stddev=0.03], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00306, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0487, stddev=0.00552], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.09,0.10,0.10,0.10,0.10 0.10,0.10,0.10,0.11), mean=0.0979, stddev=0.00288], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.06,0.09,0.12,0.14 0.16,0.17,0.17,0.19), mean=0.0922, stddev=0.0331], bias-{mean,stddev}=0.0003372,0.03613, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, params-rms=0.002906, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.09,0.09,0.10,0.10 0.10,0.10,0.10,0.10), mean=0.0929, stddev=0.00344], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0463, stddev=0.00459], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.08,0.12,0.14 0.15,0.16,0.17,0.18), mean=0.0854, stddev=0.0368], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.003124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.06,0.06,0.07,0.07), mean=0.0495, stddev=0.00667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.10,0.10,0.10,0.10,0.10 0.10,0.11,0.11,0.11), mean=0.0999, stddev=0.00302], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.09,0.12,0.14 0.16,0.17,0.18,0.19), mean=0.0941, stddev=0.0338], bias-{mean,stddev}=0.0005361,0.03704, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, params-rms=0.002539, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.08,0.08,0.09 0.09,0.09,0.09,0.09), mean=0.0812, stddev=0.00402], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.05,0.05,0.06), mean=0.0402, stddev=0.00603], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.06,0.11,0.13 0.14,0.15,0.16,0.16), mean=0.0718, stddev=0.0381], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000226784, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.002046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0004,0.002,0.006 0.01,0.02,0.03,0.04,0.05 0.06,0.06,0.07,0.09), mean=0.029, stddev=0.0151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.10,0.10,0.11,0.11,0.12 0.12,0.12,0.12,0.12), mean=0.109, stddev=0.00551], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.07,0.14,0.18 0.21,0.23,0.25,0.26), mean=0.0925, stddev=0.0571], bias-{mean,stddev}=-6.488e-06,0.002206, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.002536, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.05), mean=0.0405, stddev=0.00307], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.08,0.08,0.08,0.08 0.08,0.08,0.09,0.09), mean=0.0811, stddev=0.002], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.08,0.10,0.11 0.12,0.12,0.12,0.13), mean=0.0781, stddev=0.0221], bias-{mean,stddev}=0.0009718,0.03628, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0,0,0,0.09), mean=0.000621, stddev=0.00689], oderiv-count=4160
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000226784, l2-regularize=0.008, max-change=0.75, params-rms=0.001492, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.05,0.05,0.05 0.05,0.05,0.05,0.05), mean=0.0477, stddev=0.00158], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0237, stddev=0.00254], params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.07 0.08,0.08,0.08,0.08), mean=0.0447, stddev=0.0168], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=-71.5717, test-mode=false
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00113392, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.002043, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.004 0.009,0.02,0.03,0.04,0.05 0.05,0.06,0.06,0.08), mean=0.0295, stddev=0.0141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.10,0.10,0.11,0.11,0.12 0.12,0.12,0.12,0.12), mean=0.108, stddev=0.00533], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.07,0.15,0.18 0.21,0.23,0.24,0.26), mean=0.091, stddev=0.0592], bias-{mean,stddev}=1.214e-09,0.002639, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824

LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.44368 tdnnf2.linear:2.17436 tdnnf2.affine:2.63932 tdnnf3.linear:2.06564 tdnnf3.affine:2.33452 tdnnf4.linear:1.83836 tdnnf4.affine:2.2762 tdnnf5.linear:1.49323 tdnnf5.affine:1.96542 tdnnf6.linear:1.74678 tdnnf6.affine:2.13829 tdnnf7.linear:1.70396 tdnnf7.affine:2.14439 tdnnf8.linear:1.62835 tdnnf8.affine:2.11706 tdnnf9.linear:1.56808 tdnnf9.affine:2.06618 tdnnf10.linear:1.51184 tdnnf10.affine:2.0248 tdnnf11.linear:1.4615 tdnnf11.affine:2.02739 tdnnf12.linear:1.41812 tdnnf12.affine:1.97505 tdnnf13.linear:1.358 tdnnf13.affine:1.94725 prefinal-l:1.48776 prefinal-chain.affine:1.99107 prefinal-chain.linear:1.3 output.affine:1.74323 prefinal-xent.affine:1.7421 prefinal-xent.linear:0.763718 output-xent.affine:1.74284 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.7483 tdnnf2.linear:8.00233 tdnnf2.affine:12.6998 tdnnf3.linear:6.75711 tdnnf3.affine:12.6292 tdnnf4.linear:6.00923 tdnnf4.affine:13.098 tdnnf5.linear:5.01201 tdnnf5.affine:12.5443 tdnnf6.linear:5.68472 tdnnf6.affine:12.6004 tdnnf7.linear:5.7751 tdnnf7.affine:12.9958 tdnnf8.linear:5.73726 tdnnf8.affine:13.0708 tdnnf9.linear:5.72481 tdnnf9.affine:12.9422 tdnnf10.linear:5.71247 tdnnf10.affine:12.9599 tdnnf11.linear:5.67634 tdnnf11.affine:13.1276 tdnnf12.linear:5.7436 tdnnf12.affine:12.9351 tdnnf13.linear:5.76757 tdnnf13.affine:12.8546 prefinal-l:7.35438 prefinal-chain.affine:12.9048 prefinal-chain.linear:6.80921 output.affine:13.5287 prefinal-xent.affine:12.1992 prefinal-xent.linear:4.81005 output-xent.affine:27.9695 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.230153 tdnnf2.linear:0.269962 tdnnf2.affine:0.187418 tdnnf3.linear:0.300364 tdnnf3.affine:0.165644 tdnnf4.linear:0.297859 tdnnf4.affine:0.155049 tdnnf5.linear:0.286216 tdnnf5.affine:0.138985 tdnnf6.linear:0.298849 tdnnf6.affine:0.151752 tdnnf7.linear:0.287517 tdnnf7.affine:0.147455 tdnnf8.linear:0.276355 tdnnf8.affine:0.144658 tdnnf9.linear:0.266994 tdnnf9.affine:0.142631 tdnnf10.linear:0.258179 tdnnf10.affine:0.139554 tdnnf11.linear:0.251102 tdnnf11.affine:0.137983 tdnnf12.linear:0.241098 tdnnf12.affine:0.136446 tdnnf13.linear:0.230322 tdnnf13.affine:0.13528 prefinal-l:0.197269 prefinal-chain.affine:0.137612 prefinal-chain.linear:0.184959 output.affine:0.130967 prefinal-xent.affine:0.126254 prefinal-xent.linear:0.148762 output-xent.affine:0.0627386 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:PrintProfile():cu-device.cc:563) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=20 threads=1
# Ended (code 0) at Wed Jul 20 03:20:23 EDT 2022, elapsed time 20 seconds
