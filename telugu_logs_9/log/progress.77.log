# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/77.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/76.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/77.mdl 
# Started at Wed Jul 20 10:10:04 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/77.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.0192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.10,0.12 0.15,0.19,0.26,0.33,0.40 0.47,0.52,0.57,0.77), mean=0.266, stddev=0.101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.38,0.40 0.42,0.45,0.58,0.72,0.80 0.88,0.94,0.95,1.0), mean=0.596, stddev=0.149], bias-{mean,stddev}=-0.005192,0.01962, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.95e+06, self-repaired-proportion=0.00958163, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.001 0.002,0.003,0.008,0.02,0.03 0.03,0.03,0.03,0.05), mean=0.0119, stddev=0.0098], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.10 0.13,0.18,0.37,0.66,0.80 0.87,0.92,0.94,0.97), mean=0.422, stddev=0.248], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.12,0.16,0.21,0.24 0.27,0.31,0.35,0.42), mean=0.165, stddev=0.0567], oderiv-count=4.53728e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46678.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.0009,0.001 0.002,0.003,0.008,0.02,0.03 0.03,0.03,0.03,0.05), mean=0.0118, stddev=0.00963], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.004,0.005 0.007,0.008,0.02,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0157, stddev=0.00755]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01211, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.548, stddev=0.000457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.10,0.13,0.16,0.17 0.19,0.21,0.22,0.25), mean=0.133, stddev=0.0326], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.13,0.16,0.20,0.24 0.26,0.28,0.29,0.32), mean=0.17, stddev=0.0449], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.32 0.33,0.34,0.35,0.37,0.37 0.38,0.39,0.39,0.40), mean=0.352, stddev=0.0179], bias-{mean,stddev}=-0.0306,0.03343, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.07e+06, self-repaired-proportion=0.000279523, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.01 0.02,0.02,0.03,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.0325, stddev=0.0117], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.11,0.18 0.23,0.30,0.39,0.48,0.54 0.60,0.69,0.73,0.84), mean=0.391, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.08,0.10), mean=0.0407, stddev=0.0107], oderiv-count=4.67488e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46166.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.009 0.01,0.02,0.03,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.0321, stddev=0.0117], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.11), mean=0.0579, stddev=0.0139]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01001, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.453, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.10,0.11,0.13,0.14 0.14,0.15,0.15,0.19), mean=0.112, stddev=0.0176], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.00916, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.16,0.17 0.18,0.20,0.21,0.24), mean=0.145, stddev=0.0221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.27,0.28,0.29,0.31,0.31 0.32,0.32,0.32,0.35), mean=0.293, stddev=0.0151], bias-{mean,stddev}=-0.03187,0.02936, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.13), mean=0.0496, stddev=0.0131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.16,0.20,0.28 0.31,0.35,0.42,0.47,0.50 0.53,0.56,0.58,0.69), mean=0.41, stddev=0.0802], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.05), mean=0.0212, stddev=0.00423], oderiv-count=4.50662e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45654.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.13), mean=0.0491, stddev=0.0131], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.06 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.12,0.18), mean=0.0872, stddev=0.0142]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.008955, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.405, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.17), mean=0.101, stddev=0.0122], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.008492, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.16 0.16,0.17,0.18,0.21), mean=0.135, stddev=0.0167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.25,0.26,0.27,0.28,0.29 0.30,0.30,0.31,0.32), mean=0.271, stddev=0.0161], bias-{mean,stddev}=-0.02442,0.0211, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.12), mean=0.0546, stddev=0.0112], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.31 0.33,0.37,0.42,0.46,0.48 0.50,0.52,0.54,0.60), mean=0.414, stddev=0.0591], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.06), mean=0.0315, stddev=0.00444], oderiv-count=1.50285e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15218, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.05,0.06,0.07 0.07,0.08,0.08,0.11), mean=0.0543, stddev=0.011], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.17), mean=0.0982, stddev=0.0114]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.008501, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27), mean=0.272, stddev=0.000366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.10,0.11 0.11,0.11,0.12,0.14), mean=0.0959, stddev=0.00798], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.008603, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.08,0.10,0.11,0.11 0.12,0.12,0.13,0.22), mean=0.0961, stddev=0.0156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.24,0.25 0.25,0.26,0.27,0.29,0.30 0.30,0.31,0.31,0.31), mean=0.275, stddev=0.0162], bias-{mean,stddev}=-0.02335,0.02188, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.67e+05, self-repaired-proportion=0.00739291, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.001,0.002,0.004 0.006,0.01,0.02,0.03,0.04 0.04,0.04,0.05,0.05), mean=0.0211, stddev=0.0112], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.06,0.07,0.11 0.13,0.19,0.33,0.44,0.49 0.52,0.56,0.60,0.67), mean=0.319, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.07,0.09,0.10 0.11,0.12,0.12,0.15), mean=0.0728, stddev=0.0176], oderiv-count=1.49254e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15218, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.0008,0.002,0.003 0.006,0.01,0.02,0.03,0.04 0.04,0.04,0.05,0.06), mean=0.021, stddev=0.0112], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.005,0.008,0.01 0.02,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0415, stddev=0.0143]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009152, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.414, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.12,0.13,0.14), mean=0.103, stddev=0.0102], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008945, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.19), mean=0.142, stddev=0.015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.32,0.33,0.33,0.34), mean=0.286, stddev=0.0175], bias-{mean,stddev}=-0.03993,0.02553, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.03,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.09), mean=0.0444, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.20,0.25 0.28,0.31,0.38,0.44,0.47 0.49,0.52,0.52,0.55), mean=0.374, stddev=0.0748], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.08), mean=0.0385, stddev=0.00641], oderiv-count=1.46822e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14706, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.03 0.03,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.09), mean=0.0444, stddev=0.0105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.07,0.08,0.09,0.09,0.10 0.10,0.11,0.11,0.15), mean=0.0862, stddev=0.0109]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.412, stddev=0.000405], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.102, stddev=0.0108], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.21), mean=0.141, stddev=0.0133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.25 0.26,0.27,0.28,0.30,0.31 0.31,0.32,0.32,0.33), mean=0.283, stddev=0.0178], bias-{mean,stddev}=-0.0422,0.02662, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0451, stddev=0.0112], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.20,0.24 0.26,0.31,0.37,0.44,0.47 0.49,0.52,0.53,0.56), mean=0.368, stddev=0.0783], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.05,0.06,0.06,0.08), mean=0.0364, stddev=0.00653], oderiv-count=1.32141e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14194, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.045, stddev=0.0112], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.10 0.10,0.11,0.11,0.19), mean=0.0878, stddev=0.0115]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.41, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.16), mean=0.102, stddev=0.0116], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008903, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.19), mean=0.142, stddev=0.0149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.34,0.36), mean=0.284, stddev=0.0193], bias-{mean,stddev}=-0.04483,0.02806, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0447, stddev=0.0119], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.16,0.21 0.25,0.30,0.37,0.42,0.45 0.47,0.50,0.51,0.56), mean=0.358, stddev=0.0791], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.05,0.06,0.06,0.08), mean=0.0351, stddev=0.00711], oderiv-count=1.29088e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13682, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0443, stddev=0.0119], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.19), mean=0.0888, stddev=0.014]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.413, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.17), mean=0.103, stddev=0.0122], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008879, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.17,0.18), mean=0.141, stddev=0.0149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.33,0.34), mean=0.284, stddev=0.018], bias-{mean,stddev}=-0.04277,0.02837, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.99e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.02 0.03,0.04,0.05,0.06,0.06 0.06,0.07,0.07,0.10), mean=0.0454, stddev=0.0125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.16,0.22 0.25,0.30,0.37,0.42,0.46 0.48,0.50,0.51,0.58), mean=0.36, stddev=0.0809], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.05,0.05,0.06,0.08), mean=0.0336, stddev=0.00693], oderiv-count=1.30874e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13170, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0454, stddev=0.0125], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.19), mean=0.0899, stddev=0.0148]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009209, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.417, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.13,0.14,0.14,0.18), mean=0.103, stddev=0.0131], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.16,0.17,0.18,0.18), mean=0.141, stddev=0.0143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.31,0.32,0.32,0.34), mean=0.284, stddev=0.0183], bias-{mean,stddev}=-0.03946,0.02631, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.07,0.07,0.09), mean=0.0465, stddev=0.0122], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.16,0.19,0.23 0.25,0.30,0.37,0.43,0.46 0.49,0.51,0.53,0.56), mean=0.363, stddev=0.0795], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.08), mean=0.0318, stddev=0.00601], oderiv-count=1.30387e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12658, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.02 0.03,0.04,0.05,0.06,0.06 0.07,0.07,0.07,0.09), mean=0.0462, stddev=0.0122], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.15), mean=0.0913, stddev=0.0133]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009239, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.418, stddev=0.000423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.104, stddev=0.0139], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.142, stddev=0.0128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.31,0.32,0.33,0.35), mean=0.284, stddev=0.018], bias-{mean,stddev}=-0.03867,0.02589, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.02 0.03,0.03,0.05,0.06,0.06 0.06,0.07,0.08,0.09), mean=0.0453, stddev=0.013], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.18,0.21 0.24,0.29,0.36,0.43,0.46 0.48,0.51,0.52,0.58), mean=0.356, stddev=0.0832], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.07), mean=0.0318, stddev=0.00616], oderiv-count=1.2455e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12146, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.02,0.02 0.03,0.03,0.05,0.06,0.06 0.06,0.07,0.08,0.09), mean=0.0448, stddev=0.0129], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.16), mean=0.0896, stddev=0.0139]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.421, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.13,0.14,0.15,0.19), mean=0.104, stddev=0.0151], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009095, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.145, stddev=0.0114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.26 0.27,0.27,0.29,0.31,0.31 0.32,0.33,0.33,0.34), mean=0.29, stddev=0.0182], bias-{mean,stddev}=-0.03369,0.02192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0483, stddev=0.0135], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.17,0.18,0.23 0.26,0.30,0.37,0.44,0.47 0.50,0.54,0.55,0.61), mean=0.369, stddev=0.0841], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.08), mean=0.0311, stddev=0.00506], oderiv-count=1.17971e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11634, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.048, stddev=0.0137], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.13), mean=0.0925, stddev=0.0121]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.425, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.13 0.13,0.15,0.16,0.21), mean=0.105, stddev=0.0158], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009512, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.17,0.18,0.18,0.28), mean=0.152, stddev=0.0114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.28,0.29,0.30,0.32,0.33 0.34,0.34,0.35,0.47), mean=0.304, stddev=0.0224], bias-{mean,stddev}=-0.03218,0.01706, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10), mean=0.0498, stddev=0.0138], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.22,0.23,0.26 0.28,0.31,0.38,0.44,0.47 0.50,0.52,0.54,0.62), mean=0.377, stddev=0.0739], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.06), mean=0.0319, stddev=0.00407], oderiv-count=1.13242e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11122, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10), mean=0.0494, stddev=0.0139], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.15), mean=0.0923, stddev=0.0123]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.336861, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.01192, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38), mean=0.381, stddev=0.000518], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.18,0.18,0.19,0.20,0.20 0.21,0.21,0.22,0.25), mean=0.19, stddev=0.0105], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.12,0.13 0.13,0.14,0.15,0.16,0.16 0.17,0.17,0.18,0.19), mean=0.149, stddev=0.0132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.28,0.29,0.30,0.31,0.32 0.32,0.33,0.33,0.34), mean=0.299, stddev=0.013], bias-{mean,stddev}=-0.0372,0.02368, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.91e+05, self-repaired-proportion=0.00039354, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.01,0.02,0.02 0.02,0.03,0.03,0.05,0.05 0.06,0.06,0.07,0.09), mean=0.0359, stddev=0.0124], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.17,0.20 0.22,0.25,0.34,0.43,0.48 0.51,0.53,0.54,0.58), mean=0.343, stddev=0.0965], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.11), mean=0.0412, stddev=0.00632], oderiv-count=1.11104e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11122, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.01,0.02 0.02,0.03,0.03,0.05,0.05 0.06,0.06,0.07,0.09), mean=0.0357, stddev=0.0124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.04,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.08,0.09,0.09,0.12), mean=0.0708, stddev=0.0108]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.01118, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.36 0.36,0.36,0.36,0.36,0.36 0.36,0.36,0.36,0.36), mean=0.358, stddev=0.000299], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.21,0.29), mean=0.178, stddev=0.0125], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11122, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-3e-08,-2e-08 -2e-08,-1e-08,-2e-09,1e-08,2e-08 2e-08,3e-08,3e-08,4e-08), mean=-1.54e-09, stddev=1.44e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.39 0.40,0.40,0.42,0.43,0.44 0.44,0.45,0.46,0.46), mean=0.417, stddev=0.0168]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=9.9043e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01925, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.05,0.13 0.19,0.23,0.29,0.36,0.40 0.45,0.51,0.53,0.75), mean=0.293, stddev=0.094], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0303], bias-{mean,stddev}=0.0002192,0.04385, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.005855, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.03,0.03 0.05,0.08,0.09,0.11,0.11 0.12,0.13,0.14,0.17), mean=0.0903, stddev=0.0248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.17 0.18,0.18,0.18,0.19,0.20 0.21,0.21,0.23,0.26), mean=0.187, stddev=0.0119], bias-{mean,stddev}=-0.04273,0.04528, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.57e+05, self-repaired-proportion=0.0268135, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.001,0.003,0.004 0.005,0.007,0.01,0.04,0.05 0.06,0.07,0.08,0.10), mean=0.0215, stddev=0.0183], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.08,0.11,0.22,0.46,0.58 0.73,0.80,0.81,0.87), mean=0.287, stddev=0.203], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0231, stddev=0.00567], oderiv-count=1.04794e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11122, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.002,0.002,0.004 0.005,0.007,0.01,0.04,0.05 0.06,0.07,0.08,0.10), mean=0.0216, stddev=0.0184], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.18), mean=0.0406, stddev=0.0158]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=9.9043e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.007737, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.25 0.25,0.25,0.25,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.248, stddev=6.1e-05], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.09,0.11,0.14,0.17 0.19,0.21,0.22,0.24), mean=0.119, stddev=0.0344], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11122, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2e-08,-2e-08,-2e-08,-2e-08 -1e-08,-8e-09,1e-09,1e-08,1e-08 2e-08,2e-08,3e-08,4e-08), mean=1.17e-09, stddev=1.05e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.20 0.20,0.21,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.212, stddev=0.00759]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000495215, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03428, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.09 0.17,0.31,0.52,0.68,0.77 0.85,0.91,0.94,1.3), mean=0.501, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.82, stddev=0.0544], bias-{mean,stddev}=2.529e-09,0.05519, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,8e-08,5e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00117], oderiv-count=1.10413e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/76.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/77.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.23646 tdnnf2.linear:1.45573 tdnnf2.affine:1.49258 tdnnf3.linear:1.23237 tdnnf3.affine:1.26923 tdnnf4.linear:1.11547 tdnnf4.affine:1.17926 tdnnf5.linear:0.888992 tdnnf5.affine:0.960599 tdnnf6.linear:1.13965 tdnnf6.affine:1.22448 tdnnf7.linear:1.0777 tdnnf7.affine:1.17116 tdnnf8.linear:1.04265 tdnnf8.affine:1.15429 tdnnf9.linear:1.02814 tdnnf9.affine:1.12733 tdnnf10.linear:1.00749 tdnnf10.affine:1.10378 tdnnf11.linear:0.989796 tdnnf11.affine:1.08069 tdnnf12.linear:0.961751 tdnnf12.affine:1.06939 tdnnf13.linear:0.957381 tdnnf13.affine:1.10899 prefinal-l:1.0872 prefinal-chain.affine:1.16019 prefinal-chain.linear:0.870092 output.affine:0.754027 prefinal-xent.affine:0.635175 prefinal-xent.linear:0.362059 output-xent.affine:0.619917 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:9.13471 tdnnf2.linear:6.20017 tdnnf2.affine:5.82266 tdnnf3.linear:5.12503 tdnnf3.affine:4.89046 tdnnf4.linear:4.58498 tdnnf4.affine:4.46879 tdnnf5.linear:3.07782 tdnnf5.affine:3.27852 tdnnf6.linear:4.68557 tdnnf6.affine:4.82438 tdnnf7.linear:4.65982 tdnnf7.affine:4.81549 tdnnf8.linear:4.63444 tdnnf8.affine:4.86255 tdnnf9.linear:4.6781 tdnnf9.affine:4.8337 tdnnf10.linear:4.71489 tdnnf10.affine:4.79566 tdnnf11.linear:4.73026 tdnnf11.affine:4.78679 tdnnf12.linear:4.75993 tdnnf12.affine:4.83108 tdnnf13.linear:4.81274 tdnnf13.affine:5.00766 prefinal-l:6.10132 prefinal-chain.affine:4.9979 prefinal-chain.linear:5.72304 output.affine:16.5346 prefinal-xent.affine:3.59946 prefinal-xent.linear:3.96109 output-xent.affine:29.2938 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.244272 tdnnf2.linear:0.233694 tdnnf2.affine:0.25548 tdnnf3.linear:0.239758 tdnnf3.affine:0.259033 tdnnf4.linear:0.242627 tdnnf4.affine:0.263309 tdnnf5.linear:0.287895 tdnnf5.affine:0.29199 tdnnf6.linear:0.24221 tdnnf6.affine:0.253238 tdnnf7.linear:0.230715 tdnnf7.affine:0.242831 tdnnf8.linear:0.224291 tdnnf8.affine:0.236765 tdnnf9.linear:0.219189 tdnnf9.affine:0.232823 tdnnf10.linear:0.213097 tdnnf10.affine:0.229706 tdnnf11.linear:0.208578 tdnnf11.affine:0.225244 tdnnf12.linear:0.201361 tdnnf12.affine:0.220718 tdnnf13.linear:0.198298 tdnnf13.affine:0.220734 prefinal-l:0.177558 prefinal-chain.affine:0.231787 prefinal-chain.linear:0.151788 output.affine:0.0456376 prefinal-xent.affine:0.176209 prefinal-xent.linear:0.091284 output-xent.affine:0.0211686 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Wed Jul 20 10:10:04 EDT 2022, elapsed time 0 seconds
