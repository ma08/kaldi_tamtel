# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/97.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/96.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/97.mdl 
# Started at Wed Jul 20 10:58:31 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/97.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.15,0.17 0.18,0.21,0.25,0.31,0.37 0.42,0.48,0.53,0.69), mean=0.265, stddev=0.0781], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.37,0.39 0.42,0.44,0.56,0.70,0.77 0.85,0.89,0.92,1.0), mean=0.579, stddev=0.141], bias-{mean,stddev}=-0.007045,0.01739, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.14e+06, self-repaired-proportion=0.0120468, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.001,0.002 0.002,0.003,0.007,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.00993, stddev=0.00752], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.10 0.14,0.20,0.36,0.63,0.77 0.86,0.90,0.92,0.96), mean=0.412, stddev=0.235], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.14,0.16,0.19,0.23,0.26 0.29,0.34,0.36,0.48), mean=0.199, stddev=0.0497], oderiv-count=4.51181e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46195.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.001,0.002 0.002,0.003,0.007,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.00988, stddev=0.00755], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.03,0.04), mean=0.014, stddev=0.00514]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.511, stddev=0.000423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.09 0.10,0.11,0.12,0.14,0.16 0.17,0.18,0.19,0.22), mean=0.126, stddev=0.0237], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.12,0.13,0.16,0.19,0.21 0.24,0.26,0.28,0.30), mean=0.163, stddev=0.0361], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.30,0.30 0.31,0.32,0.33,0.35,0.35 0.36,0.37,0.37,0.39), mean=0.334, stddev=0.0168], bias-{mean,stddev}=-0.03225,0.03025, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.02e+06, self-repaired-proportion=0.000841506, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.007 0.01,0.02,0.02,0.03,0.04 0.04,0.05,0.05,0.05), mean=0.025, stddev=0.0106], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.11,0.16 0.21,0.25,0.36,0.46,0.53 0.61,0.69,0.71,0.81), mean=0.364, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.07 0.08,0.09,0.09,0.12), mean=0.0526, stddev=0.0127], oderiv-count=4.65312e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45683.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.005,0.007 0.01,0.02,0.02,0.03,0.04 0.04,0.05,0.05,0.05), mean=0.0247, stddev=0.0105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.05,0.06,0.06 0.06,0.06,0.07,0.09), mean=0.0465, stddev=0.0109]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.009508, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.43, stddev=0.000366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.11,0.12,0.13 0.13,0.14,0.15,0.17), mean=0.107, stddev=0.014], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.008828, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.17,0.19,0.19,0.23), mean=0.14, stddev=0.0182], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.26 0.26,0.27,0.28,0.30,0.30 0.31,0.31,0.32,0.34), mean=0.282, stddev=0.0153], bias-{mean,stddev}=-0.03661,0.02866, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.94e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.10), mean=0.0417, stddev=0.0125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.19,0.25 0.28,0.33,0.40,0.46,0.49 0.52,0.55,0.58,0.70), mean=0.392, stddev=0.0863], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.05), mean=0.0258, stddev=0.00537], oderiv-count=4.31309e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45171.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.10), mean=0.0415, stddev=0.0124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.06,0.07,0.08,0.09,0.09 0.09,0.10,0.11,0.15), mean=0.0757, stddev=0.0126]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.008576, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.388, stddev=0.000386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.15), mean=0.0965, stddev=0.0102], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.008236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.16,0.17,0.19), mean=0.131, stddev=0.0141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.24 0.24,0.25,0.26,0.28,0.28 0.29,0.30,0.30,0.31), mean=0.263, stddev=0.0155], bias-{mean,stddev}=-0.02663,0.01972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.05,0.06,0.06 0.06,0.07,0.08,0.10), mean=0.0501, stddev=0.0104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.25,0.27,0.31 0.33,0.36,0.42,0.46,0.48 0.50,0.52,0.53,0.58), mean=0.411, stddev=0.0595], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.05,0.05,0.05,0.07), mean=0.0365, stddev=0.0051], oderiv-count=1.51834e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15057.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.07,0.10), mean=0.0496, stddev=0.0104], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.10,0.10 0.11,0.11,0.11,0.14), mean=0.0894, stddev=0.0104]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.008205, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26), mean=0.263, stddev=0.00015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.09,0.10,0.10 0.10,0.11,0.11,0.19), mean=0.0925, stddev=0.00724], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.008115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.18), mean=0.0908, stddev=0.0133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.24,0.25,0.26,0.27,0.28 0.28,0.29,0.29,0.29), mean=0.259, stddev=0.014], bias-{mean,stddev}=-0.02875,0.01954, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.44e+05, self-repaired-proportion=0.00910839, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0007,0.001,0.003 0.004,0.006,0.01,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0159, stddev=0.00998], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.09 0.12,0.16,0.27,0.41,0.46 0.50,0.55,0.60,0.65), mean=0.284, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.07,0.09,0.11,0.12 0.12,0.13,0.14,0.17), mean=0.0891, stddev=0.02], oderiv-count=1.44429e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15057.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.001,0.002 0.004,0.006,0.01,0.02,0.03 0.03,0.04,0.04,0.05), mean=0.0156, stddev=0.00993], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.01 0.01,0.02,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0325, stddev=0.0133]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.394, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.11 0.11,0.12,0.12,0.13), mean=0.098, stddev=0.00893], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008618, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.16,0.17,0.19), mean=0.137, stddev=0.0121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.24,0.25 0.25,0.26,0.27,0.29,0.30 0.31,0.31,0.32,0.32), mean=0.275, stddev=0.0179], bias-{mean,stddev}=-0.04511,0.02435, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.038, stddev=0.00968], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.16,0.20,0.23 0.26,0.30,0.36,0.42,0.45 0.47,0.50,0.51,0.56), mean=0.358, stddev=0.0756], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0458, stddev=0.00776], oderiv-count=1.44608e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14545.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.05 0.05,0.05,0.06,0.07), mean=0.0378, stddev=0.00966], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.06,0.07,0.08,0.08,0.09 0.09,0.09,0.09,0.12), mean=0.075, stddev=0.0103]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.391, stddev=0.000323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0973, stddev=0.00942], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.13,0.14,0.15 0.15,0.16,0.16,0.19), mean=0.135, stddev=0.0108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.24 0.25,0.25,0.27,0.29,0.29 0.30,0.30,0.31,0.32), mean=0.271, stddev=0.0181], bias-{mean,stddev}=-0.04672,0.02516, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.54e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0387, stddev=0.0103], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.18,0.22 0.25,0.29,0.36,0.42,0.46 0.48,0.51,0.52,0.56), mean=0.356, stddev=0.0793], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.09), mean=0.0428, stddev=0.00762], oderiv-count=1.32698e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14033.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0385, stddev=0.0104], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.06,0.07,0.08,0.08,0.09 0.09,0.10,0.10,0.16), mean=0.0764, stddev=0.0112]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008533, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.386, stddev=0.000657], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.10,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.096, stddev=0.00989], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008443, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.11,0.11 0.12,0.13,0.13,0.14,0.15 0.15,0.16,0.16,0.20), mean=0.135, stddev=0.0119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.24 0.24,0.25,0.27,0.28,0.29 0.30,0.31,0.32,0.39), mean=0.269, stddev=0.0199], bias-{mean,stddev}=-0.04907,0.02643, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.18e+05, self-repaired-proportion=7.26069e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.02,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0382, stddev=0.011], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.14,0.19 0.24,0.28,0.35,0.41,0.44 0.46,0.49,0.50,0.54), mean=0.343, stddev=0.0811], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.07,0.07,0.09), mean=0.0406, stddev=0.00843], oderiv-count=1.31712e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13521.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.02 0.02,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0379, stddev=0.011], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.18), mean=0.0776, stddev=0.0143]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008565, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.388, stddev=0.000211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.10,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0963, stddev=0.0105], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.16), mean=0.133, stddev=0.012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.24 0.24,0.25,0.26,0.28,0.29 0.30,0.31,0.31,0.32), mean=0.267, stddev=0.0181], bias-{mean,stddev}=-0.04654,0.02641, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.71e+05, self-repaired-proportion=0.000407542, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.009,0.01,0.02 0.02,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.09), mean=0.0391, stddev=0.0112], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.15,0.20 0.24,0.29,0.35,0.42,0.45 0.47,0.49,0.51,0.56), mean=0.347, stddev=0.0817], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.07,0.09), mean=0.038, stddev=0.00801], oderiv-count=1.29568e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13009.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.009,0.01,0.02 0.02,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.09), mean=0.0389, stddev=0.0113], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.07,0.08,0.09,0.09 0.10,0.11,0.12,0.20), mean=0.0787, stddev=0.0148]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008585, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.389, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.10,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0965, stddev=0.0115], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00834, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.17), mean=0.133, stddev=0.0118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.24,0.25,0.26,0.28,0.29 0.30,0.30,0.30,0.32), mean=0.266, stddev=0.0182], bias-{mean,stddev}=-0.04256,0.02405, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.11e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.08), mean=0.0406, stddev=0.011], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.17,0.21 0.25,0.29,0.36,0.42,0.45 0.48,0.50,0.52,0.57), mean=0.353, stddev=0.0791], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.05,0.05,0.06,0.09), mean=0.0354, stddev=0.00661], oderiv-count=1.25011e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12497.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0403, stddev=0.011], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0808, stddev=0.0125]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008611, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.39, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.13,0.13,0.16), mean=0.0967, stddev=0.012], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00835, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.15,0.15,0.16,0.17), mean=0.133, stddev=0.0112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.24,0.25,0.27,0.28,0.29 0.30,0.31,0.31,0.34), mean=0.267, stddev=0.0184], bias-{mean,stddev}=-0.04098,0.02362, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.33e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0398, stddev=0.0117], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.16,0.20 0.24,0.28,0.35,0.41,0.44 0.47,0.50,0.51,0.59), mean=0.345, stddev=0.0824], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.05,0.05,0.06,0.08), mean=0.0351, stddev=0.00662], oderiv-count=1.1888e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11985.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0391, stddev=0.0116], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.15), mean=0.0805, stddev=0.0132]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008721, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.395, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.18), mean=0.0978, stddev=0.0134], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008575, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.12,0.13,0.14,0.15,0.15 0.15,0.16,0.16,0.17), mean=0.137, stddev=0.0102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.24,0.25 0.25,0.26,0.27,0.29,0.30 0.31,0.31,0.32,0.32), mean=0.274, stddev=0.0187], bias-{mean,stddev}=-0.03534,0.01995, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0433, stddev=0.0123], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.17,0.19,0.22 0.25,0.29,0.37,0.43,0.46 0.49,0.52,0.53,0.58), mean=0.361, stddev=0.0813], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.09), mean=0.0338, stddev=0.00522], oderiv-count=1.18605e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11473.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0427, stddev=0.0123], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.07 0.07,0.08,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0844, stddev=0.0114]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008841, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.4, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.10,0.11,0.12 0.13,0.14,0.15,0.18), mean=0.0989, stddev=0.0147], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008944, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.13,0.14,0.15,0.15 0.16,0.16,0.16,0.18), mean=0.143, stddev=0.00961], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.25 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.33,0.34), mean=0.285, stddev=0.0204], bias-{mean,stddev}=-0.03319,0.0159, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.2e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.06 0.07,0.07,0.08,0.10), mean=0.0452, stddev=0.0129], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.23,0.25 0.27,0.31,0.38,0.44,0.47 0.49,0.52,0.54,0.65), mean=0.374, stddev=0.0739], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0347, stddev=0.00417], oderiv-count=1.05818e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10961.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.06 0.07,0.07,0.08,0.10), mean=0.0444, stddev=0.0129], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.11,0.13), mean=0.0849, stddev=0.0121]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.492063, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.01113, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.36 0.36,0.36,0.36,0.36,0.36 0.36,0.36,0.36,0.36), mean=0.356, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.17,0.17,0.18,0.19,0.19 0.19,0.20,0.20,0.24), mean=0.178, stddev=0.00974], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009093, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.12,0.13 0.13,0.14,0.15,0.15,0.16 0.16,0.17,0.17,0.18), mean=0.145, stddev=0.0117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.27 0.27,0.28,0.29,0.30,0.31 0.31,0.32,0.33,0.34), mean=0.291, stddev=0.0134], bias-{mean,stddev}=-0.04449,0.02327, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.01,0.02 0.02,0.02,0.03,0.04,0.05 0.05,0.06,0.07,0.09), mean=0.0343, stddev=0.0119], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.14,0.16,0.19 0.22,0.25,0.32,0.41,0.46 0.49,0.51,0.53,0.57), mean=0.329, stddev=0.0908], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.11), mean=0.0457, stddev=0.00707], oderiv-count=1.09216e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10961.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.01,0.02 0.02,0.02,0.03,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0341, stddev=0.0119], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.04,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.08,0.09,0.09,0.12), mean=0.0694, stddev=0.0109]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.01091, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35), mean=0.349, stddev=0.000193], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.15 0.16,0.16,0.17,0.18,0.19 0.19,0.20,0.20,0.28), mean=0.174, stddev=0.0124], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10961.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-3e-08,-2e-08 -2e-08,-1e-08,9e-10,1e-08,2e-08 2e-08,3e-08,3e-08,5e-08), mean=5.8e-10, stddev=1.45e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.37 0.37,0.38,0.39,0.40,0.41 0.42,0.43,0.43,0.44), mean=0.391, stddev=0.0158]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=7.76253e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.05,0.13 0.19,0.24,0.30,0.36,0.40 0.46,0.51,0.55,0.76), mean=0.297, stddev=0.0953], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,0.98,0.99 1.0,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.04, stddev=0.0285], bias-{mean,stddev}=0.0002267,0.0438, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.005553, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.03 0.05,0.07,0.09,0.10,0.11 0.11,0.12,0.13,0.17), mean=0.0859, stddev=0.0226], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.16 0.17,0.17,0.18,0.18,0.19 0.20,0.20,0.22,0.25), mean=0.177, stddev=0.0116], bias-{mean,stddev}=-0.04762,0.04763, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.13e+05, self-repaired-proportion=0.0298672, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.001,0.002,0.003 0.004,0.006,0.01,0.04,0.05 0.06,0.07,0.08,0.11), mean=0.0214, stddev=0.0191], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.07,0.10,0.21,0.45,0.57 0.73,0.80,0.81,0.87), mean=0.278, stddev=0.204], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0251, stddev=0.00631], oderiv-count=1.09926e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10961.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.001,0.002,0.003 0.004,0.006,0.01,0.04,0.05 0.06,0.07,0.08,0.11), mean=0.0212, stddev=0.0191], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.17), mean=0.0397, stddev=0.0164]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=7.76253e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.007642, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.24,0.24 0.24,0.24,0.24,0.24,0.24 0.24,0.24,0.24,0.24), mean=0.245, stddev=0.000122], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.08,0.09,0.11,0.14,0.17 0.20,0.21,0.22,0.24), mean=0.117, stddev=0.0359], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10961.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-2e-08,-2e-08 -1e-08,-7e-09,-4e-10,7e-09,1e-08 1e-08,2e-08,2e-08,2e-08), mean=-6.11e-10, stddev=9.14e-09], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.18,0.19 0.19,0.19,0.20,0.21,0.21 0.21,0.21,0.22,0.22), mean=0.199, stddev=0.00777]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000388127, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03437, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.09 0.16,0.30,0.53,0.69,0.78 0.85,0.92,0.95,1.4), mean=0.502, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.83, stddev=0.0555], bias-{mean,stddev}=2.315e-09,0.05684, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-08,3e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00117], oderiv-count=1.0992e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/96.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/97.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.9793 tdnnf2.linear:1.32179 tdnnf2.affine:1.33608 tdnnf3.linear:1.14023 tdnnf3.affine:1.16164 tdnnf4.linear:1.02905 tdnnf4.affine:1.07459 tdnnf5.linear:0.811659 tdnnf5.affine:0.878201 tdnnf6.linear:1.04718 tdnnf6.affine:1.1206 tdnnf7.linear:0.999517 tdnnf7.affine:1.07854 tdnnf8.linear:0.96464 tdnnf8.affine:1.04513 tdnnf9.linear:0.93301 tdnnf9.affine:1.00627 tdnnf10.linear:0.90574 tdnnf10.affine:0.974801 tdnnf11.linear:0.890766 tdnnf11.affine:0.960747 tdnnf12.linear:0.864741 tdnnf12.affine:0.957166 tdnnf13.linear:0.868164 tdnnf13.affine:0.991764 prefinal-l:0.983741 prefinal-chain.affine:1.03714 prefinal-chain.linear:0.779043 output.affine:0.626243 prefinal-xent.affine:0.569196 prefinal-xent.linear:0.325273 output-xent.affine:0.508174 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:8.85811 tdnnf2.linear:5.7866 tdnnf2.affine:5.52897 tdnnf3.linear:4.86798 tdnnf3.affine:4.75862 tdnnf4.linear:4.39115 tdnnf4.affine:4.34792 tdnnf5.linear:2.97062 tdnnf5.affine:3.1415 tdnnf6.linear:4.45502 tdnnf6.affine:4.70732 tdnnf7.linear:4.42264 tdnnf7.affine:4.66184 tdnnf8.linear:4.36911 tdnnf8.affine:4.67639 tdnnf9.linear:4.38514 tdnnf9.affine:4.60924 tdnnf10.linear:4.39574 tdnnf10.affine:4.54753 tdnnf11.linear:4.4089 tdnnf11.affine:4.53541 tdnnf12.linear:4.46533 tdnnf12.affine:4.57853 tdnnf13.linear:4.52643 tdnnf13.affine:4.72826 prefinal-l:5.69959 prefinal-chain.affine:4.92504 prefinal-chain.linear:5.58478 output.affine:16.7473 prefinal-xent.affine:3.5676 prefinal-xent.linear:3.9126 output-xent.affine:29.3759 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.222962 tdnnf2.linear:0.22779 tdnnf2.affine:0.241061 tdnnf3.linear:0.233563 tdnnf3.affine:0.243642 tdnnf4.linear:0.233742 tdnnf4.affine:0.246506 tdnnf5.linear:0.271576 tdnnf5.affine:0.278527 tdnnf6.linear:0.234372 tdnnf6.affine:0.237636 tdnnf7.linear:0.225355 tdnnf7.affine:0.230891 tdnnf8.linear:0.219988 tdnnf8.affine:0.222794 tdnnf9.linear:0.212082 tdnnf9.affine:0.217585 tdnnf10.linear:0.205256 tdnnf10.affine:0.213675 tdnnf11.linear:0.201204 tdnnf11.affine:0.211078 tdnnf12.linear:0.193001 tdnnf12.affine:0.208385 tdnnf13.linear:0.191222 tdnnf13.affine:0.209129 prefinal-l:0.172144 prefinal-chain.affine:0.210587 prefinal-chain.linear:0.139369 output.affine:0.0374165 prefinal-xent.affine:0.15953 prefinal-xent.linear:0.0831312 output-xent.affine:0.0172944 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Wed Jul 20 10:58:31 EDT 2022, elapsed time 0 seconds
