# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/29.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/28.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/29.mdl 
# Started at Wed Jul 20 08:16:27 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/29.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02033, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.07,0.26,0.36,0.47 0.57,0.65,0.71,0.99), mean=0.252, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.44,0.47,0.61,0.76,0.87 0.98,1.0,1.0,1.1), mean=0.629, stddev=0.167], bias-{mean,stddev}=0.005167,0.03081, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.1e+06, self-repaired-proportion=0.159381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-06 0.0001,0.0004,0.02,0.04,0.05 0.06,0.06,0.06,0.08), mean=0.0212, stddev=0.0207], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.003 0.05,0.08,0.40,0.81,0.89 0.93,0.95,0.96,1.0), mean=0.437, stddev=0.341], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.10,0.16,0.20 0.23,0.28,0.31,0.38), mean=0.114, stddev=0.0612], oderiv-count=4.58739e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45721.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,8e-06 0.0001,0.0004,0.02,0.04,0.05 0.05,0.06,0.06,0.08), mean=0.0209, stddev=0.0204], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.0007,0.002,0.02,0.04,0.04 0.05,0.05,0.06,0.09), mean=0.021, stddev=0.0176]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.65,0.65,0.65,0.65 0.65,0.65,0.65,0.65,0.65 0.65,0.65,0.65,0.65), mean=0.65, stddev=0.000386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.15,0.19,0.22 0.25,0.27,0.30,0.35), mean=0.156, stddev=0.0466], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.11,0.13,0.18,0.24,0.28 0.32,0.36,0.38,0.42), mean=0.19, stddev=0.0674], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.37,0.38,0.40,0.42,0.43 0.44,0.45,0.46,0.46), mean=0.403, stddev=0.0232], bias-{mean,stddev}=-0.03016,0.06263, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.16e+06, self-repaired-proportion=0.000877064, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.01,0.02 0.03,0.04,0.06,0.08,0.09 0.09,0.10,0.11,0.12), mean=0.06, stddev=0.0225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.13,0.19 0.25,0.31,0.43,0.58,0.68 0.74,0.79,0.81,0.87), mean=0.444, stddev=0.161], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.05,0.06,0.08), mean=0.0246, stddev=0.00844], oderiv-count=4.6441e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45209.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.01,0.02 0.03,0.04,0.06,0.08,0.09 0.09,0.10,0.11,0.13), mean=0.0594, stddev=0.0223], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.03,0.04,0.05 0.06,0.07,0.10,0.12,0.13 0.14,0.15,0.16,0.19), mean=0.0969, stddev=0.0273]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.526, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.24), mean=0.129, stddev=0.0255], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.13,0.16,0.19,0.20 0.22,0.23,0.25,0.31), mean=0.159, stddev=0.0327], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.30,0.31,0.32,0.34,0.35 0.35,0.36,0.36,0.38), mean=0.325, stddev=0.0177], bias-{mean,stddev}=-0.02308,0.05468, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.12,0.19), mean=0.0741, stddev=0.023], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.26 0.30,0.35,0.45,0.55,0.60 0.64,0.68,0.71,0.80), mean=0.449, stddev=0.115], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.009,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.05), mean=0.0143, stddev=0.00352], oderiv-count=4.63238e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=44697.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.13,0.19), mean=0.0736, stddev=0.0225], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.24), mean=0.121, stddev=0.0217]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.00997, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.451, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.16,0.19), mean=0.112, stddev=0.0162], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.12,0.13,0.15,0.17,0.18 0.19,0.20,0.21,0.25), mean=0.148, stddev=0.0245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.27 0.28,0.28,0.30,0.31,0.32 0.33,0.34,0.34,0.37), mean=0.3, stddev=0.0179], bias-{mean,stddev}=-0.01578,0.05052, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.04 0.05,0.06,0.08,0.09,0.11 0.11,0.12,0.13,0.18), mean=0.0757, stddev=0.0235], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.22,0.26 0.29,0.34,0.45,0.54,0.60 0.63,0.68,0.71,0.80), mean=0.446, stddev=0.116], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.07), mean=0.0229, stddev=0.00468], oderiv-count=1.51315e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14899.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.03,0.04 0.05,0.06,0.08,0.09,0.10 0.11,0.12,0.13,0.18), mean=0.0752, stddev=0.023], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.09,0.10 0.10,0.11,0.13,0.14,0.15 0.16,0.16,0.17,0.26), mean=0.126, stddev=0.0197]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01033, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33,0.33 0.33,0.33,0.33,0.33), mean=0.331, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.25), mean=0.116, stddev=0.0127], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.08 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.17,0.21), mean=0.115, stddev=0.0219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.28,0.29 0.30,0.31,0.33,0.35,0.36 0.37,0.37,0.37,0.38), mean=0.329, stddev=0.0216], bias-{mean,stddev}=-0.01289,0.0467, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.00826203, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.002,0.003,0.009 0.02,0.02,0.04,0.06,0.07 0.08,0.09,0.10,0.11), mean=0.0443, stddev=0.0223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.07,0.12 0.18,0.25,0.41,0.58,0.66 0.72,0.76,0.79,0.87), mean=0.412, stddev=0.178], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.05,0.06 0.07,0.08,0.09,0.12), mean=0.0412, stddev=0.0135], oderiv-count=1.53651e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14899.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.001,0.003,0.008 0.02,0.02,0.04,0.06,0.07 0.08,0.09,0.09,0.11), mean=0.0436, stddev=0.0217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.007,0.01,0.03 0.05,0.06,0.07,0.09,0.09 0.10,0.10,0.11,0.15), mean=0.0723, stddev=0.0198]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.442, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.11, stddev=0.0132], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.15,0.17,0.18 0.19,0.20,0.20,0.24), mean=0.152, stddev=0.0218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.28 0.28,0.29,0.30,0.32,0.33 0.34,0.35,0.35,0.38), mean=0.307, stddev=0.0189], bias-{mean,stddev}=-0.02649,0.05044, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.23e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.10,0.11,0.12,0.16), mean=0.0685, stddev=0.022], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.21,0.23 0.28,0.33,0.43,0.52,0.57 0.62,0.66,0.67,0.79), mean=0.426, stddev=0.114], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0248, stddev=0.00544], oderiv-count=1.47949e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14387.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.10,0.11,0.12,0.15), mean=0.068, stddev=0.0215], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.08,0.09 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.21), mean=0.118, stddev=0.0166]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00978, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.443, stddev=0.000854], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.18), mean=0.11, stddev=0.0133], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.15,0.17,0.18 0.19,0.20,0.20,0.26), mean=0.151, stddev=0.0212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.28,0.28,0.30,0.32,0.33 0.34,0.34,0.35,0.36), mean=0.304, stddev=0.0203], bias-{mean,stddev}=-0.02722,0.0557, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.75e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.12,0.14), mean=0.0681, stddev=0.0239], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.19,0.23 0.26,0.31,0.42,0.53,0.60 0.64,0.68,0.70,0.74), mean=0.424, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06), mean=0.0242, stddev=0.00626], oderiv-count=1.4391e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13875.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.12,0.14), mean=0.0678, stddev=0.0232], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.08 0.10,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.24), mean=0.117, stddev=0.0171]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009675, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.438, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.19), mean=0.108, stddev=0.0146], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.11,0.12 0.12,0.13,0.15,0.17,0.18 0.18,0.19,0.20,0.26), mean=0.15, stddev=0.0202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.26 0.28,0.29,0.30,0.32,0.33 0.33,0.34,0.35,0.36), mean=0.302, stddev=0.0203], bias-{mean,stddev}=-0.02951,0.05649, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.1e+05, self-repaired-proportion=0.00115585, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.02,0.03 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.14), mean=0.0661, stddev=0.0247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.15,0.20 0.24,0.29,0.41,0.53,0.58 0.62,0.66,0.69,0.75), mean=0.412, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.07), mean=0.0244, stddev=0.00701], oderiv-count=1.40646e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13363.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.02,0.03 0.03,0.05,0.07,0.09,0.10 0.11,0.12,0.12,0.15), mean=0.0657, stddev=0.0241], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.06,0.06,0.08 0.09,0.10,0.12,0.13,0.14 0.15,0.16,0.16,0.33), mean=0.116, stddev=0.0218]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009776, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.442, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.19), mean=0.11, stddev=0.015], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009466, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.11,0.12 0.13,0.13,0.15,0.17,0.18 0.18,0.19,0.19,0.23), mean=0.15, stddev=0.0189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.27,0.27 0.28,0.29,0.30,0.32,0.33 0.34,0.34,0.35,0.36), mean=0.302, stddev=0.0199], bias-{mean,stddev}=-0.02839,0.05613, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.2e+05, self-repaired-proportion=0.000354781, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.12,0.16), mean=0.0661, stddev=0.0251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.15,0.20 0.24,0.30,0.42,0.53,0.58 0.62,0.66,0.68,0.78), mean=0.413, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06), mean=0.0237, stddev=0.00682], oderiv-count=1.29658e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12851.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.03 0.03,0.04,0.07,0.09,0.10 0.11,0.11,0.12,0.15), mean=0.0657, stddev=0.0245], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.08 0.09,0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.22), mean=0.113, stddev=0.0206]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009768, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.442, stddev=0.000518], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.18), mean=0.11, stddev=0.0147], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009485, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.13,0.13,0.15,0.17,0.18 0.18,0.19,0.20,0.22), mean=0.151, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.28,0.29,0.30,0.32,0.33 0.34,0.34,0.35,0.37), mean=0.303, stddev=0.0206], bias-{mean,stddev}=-0.02304,0.05529, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0689, stddev=0.0252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.17,0.21 0.25,0.30,0.42,0.54,0.59 0.63,0.67,0.71,0.77), mean=0.423, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0223, stddev=0.00588], oderiv-count=1.23872e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12339.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.12,0.15), mean=0.0685, stddev=0.0245], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.08 0.09,0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.18), mean=0.116, stddev=0.0186]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009834, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.445, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.19), mean=0.11, stddev=0.0151], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009549, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.12,0.12 0.13,0.14,0.15,0.17,0.17 0.18,0.19,0.19,0.21), mean=0.152, stddev=0.017], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.27 0.28,0.29,0.30,0.32,0.33 0.34,0.35,0.36,0.38), mean=0.305, stddev=0.0204], bias-{mean,stddev}=-0.02666,0.05593, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.26e+05, self-repaired-proportion=0.000976562, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.02,0.02,0.03 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.066, stddev=0.0256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.15,0.19 0.23,0.29,0.41,0.53,0.59 0.63,0.67,0.69,0.78), mean=0.41, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.0226, stddev=0.00616], oderiv-count=1.19878e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11827.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.02,0.02,0.03 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.12,0.14), mean=0.0655, stddev=0.0249], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.06,0.07,0.08 0.09,0.10,0.11,0.13,0.13 0.14,0.15,0.15,0.16), mean=0.112, stddev=0.0195]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009946, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.45, stddev=0.000366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.16,0.20), mean=0.111, stddev=0.0158], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009747, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.14,0.16,0.17,0.17 0.18,0.19,0.19,0.21), mean=0.155, stddev=0.016], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.29,0.29,0.31,0.33,0.34 0.35,0.35,0.35,0.36), mean=0.311, stddev=0.0195], bias-{mean,stddev}=-0.02349,0.05328, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.13,0.14), mean=0.0694, stddev=0.0258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.17,0.21 0.25,0.30,0.42,0.54,0.59 0.64,0.68,0.70,0.78), mean=0.42, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.05), mean=0.0218, stddev=0.00491], oderiv-count=1.17248e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11315.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.13,0.14), mean=0.069, stddev=0.0253], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.17), mean=0.116, stddev=0.018]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01012, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.458, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.16,0.22), mean=0.113, stddev=0.0159], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.16,0.17,0.18 0.18,0.19,0.19,0.21), mean=0.158, stddev=0.0157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.31,0.34,0.34 0.35,0.36,0.36,0.37), mean=0.317, stddev=0.0198], bias-{mean,stddev}=-0.02589,0.05206, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.03,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.15), mean=0.0733, stddev=0.0261], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.20,0.24 0.28,0.32,0.43,0.53,0.58 0.62,0.66,0.68,0.74), mean=0.425, stddev=0.118], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.05), mean=0.0209, stddev=0.00413], oderiv-count=1.08205e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10803.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.03,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0725, stddev=0.0256], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.09 0.10,0.11,0.12,0.13,0.14 0.15,0.15,0.16,0.18), mean=0.119, stddev=0.018]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, params-rms=0.01317, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.421, stddev=0.000211], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.19,0.20,0.21,0.22,0.23 0.23,0.24,0.24,0.27), mean=0.21, stddev=0.0125], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009605, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.10,0.12,0.13 0.13,0.14,0.15,0.17,0.17 0.18,0.18,0.19,0.20), mean=0.153, stddev=0.0186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.29,0.29,0.31,0.32,0.33 0.33,0.34,0.34,0.34), mean=0.307, stddev=0.0145], bias-{mean,stddev}=-0.02199,0.05258, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.02e+05, self-repaired-proportion=0.00714753, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.01,0.02,0.02 0.03,0.03,0.06,0.08,0.09 0.10,0.11,0.12,0.13), mean=0.0579, stddev=0.0253], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.12,0.15,0.19 0.22,0.27,0.41,0.56,0.62 0.67,0.72,0.73,0.82), mean=0.418, stddev=0.154], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0268, stddev=0.00562], oderiv-count=1.12314e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10803.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.01,0.02,0.02 0.03,0.03,0.05,0.08,0.09 0.10,0.11,0.12,0.13), mean=0.0569, stddev=0.0248], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.06,0.07 0.08,0.08,0.10,0.11,0.11 0.12,0.12,0.12,0.15), mean=0.0947, stddev=0.0168]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, params-rms=0.01214, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39), mean=0.389, stddev=0.00044], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.18,0.18,0.19,0.21,0.21 0.22,0.22,0.22,0.25), mean=0.194, stddev=0.0139], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10803.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-4e-08,-3e-08 -2e-08,-2e-08,-2e-09,1e-08,2e-08 2e-08,3e-08,4e-08,6e-08), mean=-1.21e-09, stddev=1.7e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.45,0.46,0.47 0.48,0.49,0.51,0.52,0.53 0.54,0.55,0.57,0.58), mean=0.505, stddev=0.0226]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000177743, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.04,0.11 0.17,0.22,0.28,0.33,0.37 0.41,0.45,0.48,0.85), mean=0.273, stddev=0.0864], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.86,0.87,0.89 0.90,0.92,0.95,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.95, stddev=0.0372], bias-{mean,stddev}=0.0001663,0.04568, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.006584, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.08,0.11,0.12,0.13 0.14,0.15,0.15,0.20), mean=0.102, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.19 0.20,0.20,0.21,0.22,0.22 0.23,0.24,0.24,0.26), mean=0.21, stddev=0.0109], bias-{mean,stddev}=-0.02749,0.05878, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.05e+05, self-repaired-proportion=0.0116749, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.003,0.004,0.006 0.009,0.01,0.03,0.06,0.07 0.09,0.10,0.10,0.12), mean=0.0364, stddev=0.0256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.06,0.08 0.11,0.15,0.34,0.59,0.71 0.78,0.83,0.85,0.93), mean=0.373, stddev=0.225], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.02,0.03,0.03,0.03), mean=0.016, stddev=0.00479], oderiv-count=1.0713e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10803.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.003,0.004,0.006 0.009,0.01,0.03,0.06,0.07 0.08,0.10,0.10,0.11), mean=0.0356, stddev=0.025], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.02,0.03 0.04,0.04,0.06,0.07,0.07 0.08,0.09,0.09,0.23), mean=0.0567, stddev=0.0184]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000177743, l2-regularize=0.008, max-change=0.75, params-rms=0.008155, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26), mean=0.261, stddev=0.00015], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.11,0.12,0.14,0.16 0.17,0.18,0.19,0.23), mean=0.129, stddev=0.0219], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10803.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-2e-08,-2e-08 -1e-08,-9e-09,1e-10,1e-08,1e-08 2e-08,2e-08,3e-08,3e-08), mean=4.6e-10, stddev=1.11e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.24 0.25,0.25,0.26,0.27,0.27 0.27,0.28,0.28,0.28), mean=0.258, stddev=0.00971]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000888714, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.07 0.15,0.28,0.52,0.68,0.77 0.84,0.91,0.93,1.3), mean=0.491, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.7 1.7,1.7,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.0604], bias-{mean,stddev}=3.867e-09,0.05886, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-07,4e-05,0.0001 0.0002,0.0004,0.0007,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00102, stddev=0.00117], oderiv-count=1.1472e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/28.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/29.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.06241 tdnnf2.linear:1.78735 tdnnf2.affine:2.05858 tdnnf3.linear:1.56405 tdnnf3.affine:1.69604 tdnnf4.linear:1.40657 tdnnf4.affine:1.58509 tdnnf5.linear:1.09824 tdnnf5.affine:1.2505 tdnnf6.linear:1.36697 tdnnf6.affine:1.56278 tdnnf7.linear:1.30359 tdnnf7.affine:1.48569 tdnnf8.linear:1.23854 tdnnf8.affine:1.44015 tdnnf9.linear:1.21601 tdnnf9.affine:1.4054 tdnnf10.linear:1.17242 tdnnf10.affine:1.35923 tdnnf11.linear:1.15861 tdnnf11.affine:1.34246 tdnnf12.linear:1.12318 tdnnf12.affine:1.32499 tdnnf13.linear:1.09816 tdnnf13.affine:1.35347 prefinal-l:1.22781 prefinal-chain.affine:1.43836 prefinal-chain.linear:1.10582 output.affine:1.31653 prefinal-xent.affine:0.801548 prefinal-xent.linear:0.540757 output-xent.affine:1.12124 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:9.69946 tdnnf2.linear:7.35468 tdnnf2.affine:6.82589 tdnnf3.linear:5.94705 tdnnf3.affine:5.53729 tdnnf4.linear:5.10455 tdnnf4.affine:5.09571 tdnnf5.linear:3.74062 tdnnf5.affine:4.04138 tdnnf6.linear:4.99785 tdnnf6.affine:5.2471 tdnnf7.linear:5.00745 tdnnf7.affine:5.25813 tdnnf8.linear:4.95385 tdnnf8.affine:5.24952 tdnnf9.linear:5.00532 tdnnf9.affine:5.2481 tdnnf10.linear:5.00137 tdnnf10.affine:5.22089 tdnnf11.linear:5.03523 tdnnf11.affine:5.27591 tdnnf12.linear:5.0925 tdnnf12.affine:5.32718 tdnnf13.linear:5.17971 tdnnf13.affine:5.41088 prefinal-l:6.74087 prefinal-chain.affine:5.24501 prefinal-chain.linear:6.2161 output.affine:15.4088 prefinal-xent.affine:3.95934 prefinal-xent.linear:4.17559 output-xent.affine:28.9315 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.315688 tdnnf2.linear:0.242464 tdnnf2.affine:0.300025 tdnnf3.linear:0.262109 tdnnf3.affine:0.304096 tdnnf4.linear:0.275168 tdnnf4.affine:0.308502 tdnnf5.linear:0.290974 tdnnf5.affine:0.305382 tdnnf6.linear:0.273866 tdnnf6.affine:0.295973 tdnnf7.linear:0.260142 tdnnf7.affine:0.280104 tdnnf8.linear:0.250061 tdnnf8.affine:0.272161 tdnnf9.linear:0.242817 tdnnf9.affine:0.265677 tdnnf10.linear:0.234384 tdnnf10.affine:0.258275 tdnnf11.linear:0.230119 tdnnf11.affine:0.252182 tdnnf12.linear:0.22045 tdnnf12.affine:0.2469 tdnnf13.linear:0.211765 tdnnf13.affine:0.248722 prefinal-l:0.181844 prefinal-chain.affine:0.272361 prefinal-chain.linear:0.177395 output.affine:0.0856961 prefinal-xent.affine:0.200745 prefinal-xent.linear:0.129162 output-xent.affine:0.0387893 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Wed Jul 20 08:16:28 EDT 2022, elapsed time 1 seconds
