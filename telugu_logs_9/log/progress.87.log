# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/87.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/86.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/87.mdl 
# Started at Wed Jul 20 10:33:48 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/87.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01889, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.15 0.17,0.20,0.25,0.31,0.39 0.44,0.51,0.56,0.75), mean=0.266, stddev=0.0879], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.39 0.42,0.45,0.57,0.71,0.80 0.86,0.91,0.93,1.0), mean=0.587, stddev=0.145], bias-{mean,stddev}=-0.006128,0.01859, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.17e+06, self-repaired-proportion=0.00954598, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.002,0.003,0.008,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0109, stddev=0.00852], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.10 0.14,0.19,0.36,0.65,0.80 0.87,0.93,0.94,0.97), mean=0.421, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.10,0.11 0.12,0.14,0.17,0.22,0.24 0.28,0.32,0.34,0.45), mean=0.181, stddev=0.0523], oderiv-count=4.58874e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47657.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0009,0.001,0.002 0.002,0.003,0.008,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0109, stddev=0.00854], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.005,0.006 0.007,0.009,0.01,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.0147, stddev=0.00605]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.529, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.10,0.11,0.13,0.15,0.17 0.18,0.20,0.20,0.23), mean=0.129, stddev=0.0275], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.13,0.16,0.20,0.22 0.25,0.27,0.29,0.31), mean=0.167, stddev=0.0402], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.31 0.32,0.33,0.34,0.36,0.36 0.37,0.37,0.38,0.39), mean=0.342, stddev=0.017], bias-{mean,stddev}=-0.03157,0.0319, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.14e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.008 0.01,0.02,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0285, stddev=0.0112], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.11,0.16 0.21,0.28,0.38,0.47,0.53 0.60,0.69,0.74,0.82), mean=0.377, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.07,0.08,0.08,0.11), mean=0.0462, stddev=0.0114], oderiv-count=4.55418e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47145.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.008 0.01,0.02,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0282, stddev=0.0113], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.07,0.08,0.11), mean=0.0518, stddev=0.0125]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.00976, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.442, stddev=0.000211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.17), mean=0.109, stddev=0.0155], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.20,0.22), mean=0.143, stddev=0.0199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.26 0.27,0.27,0.29,0.30,0.31 0.31,0.32,0.32,0.35), mean=0.288, stddev=0.0153], bias-{mean,stddev}=-0.03423,0.02882, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.04,0.05,0.06,0.06 0.06,0.07,0.07,0.12), mean=0.0457, stddev=0.0126], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.17,0.20,0.26 0.30,0.34,0.41,0.47,0.50 0.52,0.55,0.57,0.68), mean=0.403, stddev=0.0823], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.0234, stddev=0.00477], oderiv-count=4.60973e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46633.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.02 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.12), mean=0.0455, stddev=0.0127], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.16), mean=0.0819, stddev=0.0132]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.008784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.398, stddev=0.000299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.11 0.12,0.13,0.13,0.16), mean=0.0988, stddev=0.011], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.008367, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.12,0.12,0.13,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.133, stddev=0.0151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.24 0.25,0.25,0.27,0.28,0.29 0.30,0.30,0.30,0.31), mean=0.267, stddev=0.0158], bias-{mean,stddev}=-0.02568,0.02026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.11), mean=0.0521, stddev=0.0107], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.27,0.30 0.33,0.37,0.42,0.46,0.49 0.50,0.52,0.54,0.62), mean=0.414, stddev=0.0594], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0342, stddev=0.00482], oderiv-count=1.53331e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15544.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.11), mean=0.0521, stddev=0.0108], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.09,0.10,0.11 0.11,0.12,0.12,0.17), mean=0.0936, stddev=0.0108]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.008303, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27), mean=0.266, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.09,0.09,0.10,0.10 0.11,0.11,0.11,0.13), mean=0.0936, stddev=0.00732], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.008353, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.20), mean=0.0934, stddev=0.0144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.23,0.24 0.25,0.26,0.27,0.28,0.29 0.29,0.29,0.30,0.31), mean=0.267, stddev=0.0149], bias-{mean,stddev}=-0.02615,0.02068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.00705173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.001,0.002,0.003 0.005,0.008,0.02,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0181, stddev=0.0105], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.06,0.08,0.10 0.13,0.17,0.30,0.43,0.48 0.51,0.55,0.59,0.65), mean=0.302, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.07,0.08,0.10,0.11 0.12,0.12,0.13,0.14), mean=0.0816, stddev=0.0185], oderiv-count=1.50362e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15544.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.001,0.002,0.003 0.005,0.008,0.02,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.018, stddev=0.0105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.006,0.008,0.01 0.02,0.02,0.04,0.05,0.05 0.06,0.06,0.06,0.08), mean=0.0365, stddev=0.0135]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008937, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.404, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.14), mean=0.101, stddev=0.00958], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008781, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.14, stddev=0.0133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.25 0.26,0.27,0.28,0.30,0.30 0.31,0.32,0.33,0.33), mean=0.28, stddev=0.0181], bias-{mean,stddev}=-0.0426,0.02492, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.08), mean=0.0409, stddev=0.01], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.18,0.20,0.24 0.27,0.30,0.37,0.43,0.46 0.48,0.50,0.52,0.56), mean=0.366, stddev=0.0747], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.05,0.06,0.07,0.09), mean=0.0421, stddev=0.00708], oderiv-count=1.47654e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15032.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.08), mean=0.0408, stddev=0.0101], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.09 0.09,0.10,0.10,0.13), mean=0.0798, stddev=0.0105]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008875, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.402, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.14), mean=0.0999, stddev=0.0103], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008678, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.16,0.17,0.20), mean=0.138, stddev=0.012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.25,0.26,0.28,0.29,0.30 0.31,0.31,0.31,0.32), mean=0.277, stddev=0.0181], bias-{mean,stddev}=-0.04447,0.02576, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.042, stddev=0.0106], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.19,0.23 0.27,0.30,0.37,0.43,0.46 0.49,0.51,0.53,0.55), mean=0.363, stddev=0.0774], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0392, stddev=0.00689], oderiv-count=1.42854e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14520.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0418, stddev=0.0107], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.07,0.08,0.09,0.09 0.10,0.10,0.10,0.17), mean=0.0819, stddev=0.011]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008788, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.398, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.15), mean=0.0988, stddev=0.0108], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008717, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.16,0.16,0.17,0.30), mean=0.139, stddev=0.015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.25,0.26,0.28,0.29,0.30 0.31,0.32,0.34,0.55), mean=0.278, stddev=0.0253], bias-{mean,stddev}=-0.04698,0.02717, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.79e+05, self-repaired-proportion=0.000313375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.06,0.07,0.10), mean=0.0419, stddev=0.0119], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.15,0.20 0.24,0.29,0.36,0.42,0.45 0.47,0.49,0.49,0.56), mean=0.351, stddev=0.08], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0376, stddev=0.00777], oderiv-count=1.34266e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14008.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.01,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.06,0.07,0.10), mean=0.0414, stddev=0.0119], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.12,0.20), mean=0.0833, stddev=0.0148]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008851, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.401, stddev=0.000423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.11 0.12,0.13,0.13,0.16), mean=0.0995, stddev=0.0114], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008622, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.11 0.12,0.13,0.14,0.15,0.15 0.16,0.16,0.17,0.18), mean=0.137, stddev=0.0131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.25,0.26,0.27,0.29,0.30 0.31,0.32,0.32,0.33), mean=0.275, stddev=0.0182], bias-{mean,stddev}=-0.04479,0.0274, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.9e+05, self-repaired-proportion=0.000976562, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.03,0.03 0.04,0.05,14840016896.0,45748424704.0,69179752448.0 87575912448.0,105954787328.0,125364559872.0,243395117056.0), mean=2.51e+10, stddev=3.1e+10], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.16,0.21 0.25,0.29,0.36,0.42,0.45 0.48,0.50,0.51,0.57), mean=0.355, stddev=0.0803], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.05,0.06,0.07,0.09), mean=0.0356, stddev=0.00749], oderiv-count=1.29248e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13496.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0425, stddev=0.0119], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.19), mean=0.085, stddev=0.0148]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008912, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.403, stddev=0.000323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.17), mean=0.1, stddev=0.0123], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008616, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.16,0.17,0.18), mean=0.137, stddev=0.013], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.24,0.25 0.25,0.26,0.27,0.29,0.30 0.31,0.31,0.32,0.33), mean=0.275, stddev=0.0184], bias-{mean,stddev}=-0.04131,0.02513, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0437, stddev=0.0115], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.18,0.22 0.26,0.29,0.36,0.43,0.45 0.48,0.51,0.52,0.55), mean=0.358, stddev=0.0784], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.06,0.08), mean=0.0335, stddev=0.00628], oderiv-count=1.20256e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12984.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0437, stddev=0.0115], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.13), mean=0.0866, stddev=0.0128]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.008927, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40,0.40 0.40,0.40,0.40,0.40), mean=0.404, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.17), mean=0.1, stddev=0.0131], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008623, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.15 0.16,0.16,0.16,0.18), mean=0.137, stddev=0.0119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.25,0.26,0.27,0.29,0.30 0.31,0.31,0.32,0.34), mean=0.275, stddev=0.0182], bias-{mean,stddev}=-0.04006,0.0247, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0428, stddev=0.0123], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.17,0.20 0.24,0.29,0.36,0.43,0.45 0.48,0.50,0.52,0.58), mean=0.353, stddev=0.082], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.05,0.05,0.06,0.08), mean=0.0334, stddev=0.0064], oderiv-count=1.2311e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12472.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0428, stddev=0.0123], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.07,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.17), mean=0.0862, stddev=0.0134]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.408, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.13,0.14,0.14,0.19), mean=0.101, stddev=0.0142], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.12 0.13,0.13,0.14,0.15,0.15 0.16,0.16,0.17,0.19), mean=0.141, stddev=0.0105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.25 0.26,0.26,0.28,0.30,0.31 0.32,0.32,0.32,0.33), mean=0.282, stddev=0.0186], bias-{mean,stddev}=-0.03495,0.02091, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.78e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.02 0.03,0.03,0.05,0.06,0.06 0.07,0.07,0.08,0.10), mean=0.0461, stddev=0.0131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.17,0.19,0.23 0.25,0.30,0.37,0.43,0.47 0.50,0.52,0.55,0.60), mean=0.366, stddev=0.0824], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.08), mean=0.0323, stddev=0.00501], oderiv-count=1.14752e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11960.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.10), mean=0.0458, stddev=0.013], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.06,0.07 0.08,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.14), mean=0.0892, stddev=0.0115]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00912, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.413, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.13,0.14,0.15,0.19), mean=0.102, stddev=0.0152], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.13 0.13,0.14,0.15,0.16,0.16 0.16,0.17,0.17,0.19), mean=0.147, stddev=0.00997], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.26 0.27,0.28,0.29,0.31,0.32 0.33,0.33,0.34,0.35), mean=0.295, stddev=0.0202], bias-{mean,stddev}=-0.03276,0.01623, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.09), mean=0.0478, stddev=0.0132], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.23,0.26 0.28,0.31,0.38,0.44,0.47 0.49,0.52,0.53,0.63), mean=0.375, stddev=0.0719], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.06), mean=0.0331, stddev=0.00409], oderiv-count=1.11507e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11448.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0477, stddev=0.0132], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.08,0.08,0.09,0.10,0.10 0.11,0.11,0.12,0.12), mean=0.0897, stddev=0.0119]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.425044, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.01151, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.37,0.37 0.37,0.37,0.37,0.37,0.37 0.37,0.37,0.37,0.37), mean=0.368, stddev=0.000122], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.17,0.18,0.18,0.19,0.20 0.20,0.21,0.21,0.24), mean=0.184, stddev=0.01], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009229, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.12,0.13 0.13,0.14,0.15,0.16,0.16 0.17,0.17,0.17,0.18), mean=0.147, stddev=0.0124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.27 0.28,0.29,0.29,0.30,0.31 0.32,0.32,0.33,0.34), mean=0.295, stddev=0.0128], bias-{mean,stddev}=-0.04097,0.02329, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.01,0.02 0.02,0.02,0.03,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0352, stddev=0.0122], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.17,0.19 0.22,0.25,0.33,0.42,0.47 0.50,0.52,0.53,0.57), mean=0.336, stddev=0.0928], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.11), mean=0.0434, stddev=0.00661], oderiv-count=1.10534e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11448.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.01,0.02 0.02,0.03,0.03,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0354, stddev=0.0121], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.04,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.09,0.09,0.09,0.11), mean=0.0709, stddev=0.0107]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.01104, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35), mean=0.353, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.16,0.17,0.18,0.19,0.19 0.19,0.20,0.20,0.29), mean=0.176, stddev=0.0124], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11448.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-3e-08,-3e-08,-3e-08 -2e-08,-1e-08,-3e-10,1e-08,2e-08 2e-08,3e-08,3e-08,5e-08), mean=2.85e-10, stddev=1.56e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.38 0.39,0.39,0.40,0.42,0.42 0.43,0.44,0.44,0.45), mean=0.404, stddev=0.0158]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=8.76826e-05, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.05,0.13 0.19,0.24,0.30,0.36,0.40 0.45,0.51,0.54,0.75), mean=0.296, stddev=0.0947], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.98 0.99,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.03, stddev=0.0294], bias-{mean,stddev}=0.0002234,0.0438, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.005691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.03,0.03 0.05,0.08,0.09,0.10,0.11 0.12,0.13,0.13,0.17), mean=0.0879, stddev=0.0236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.17 0.17,0.17,0.18,0.19,0.19 0.20,0.21,0.22,0.25), mean=0.182, stddev=0.012], bias-{mean,stddev}=-0.04527,0.04645, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.24e+05, self-repaired-proportion=0.0286048, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.001,0.002,0.004 0.005,0.006,0.01,0.04,0.05 0.06,0.07,0.08,0.11), mean=0.0215, stddev=0.0187], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.08,0.10,0.21,0.46,0.57 0.73,0.80,0.81,0.87), mean=0.283, stddev=0.204], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0242, stddev=0.00597], oderiv-count=1.05754e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11448.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.001,0.002,0.003 0.005,0.006,0.01,0.04,0.05 0.06,0.07,0.08,0.11), mean=0.0215, stddev=0.0186], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.16), mean=0.0404, stddev=0.0159]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=8.76826e-05, l2-regularize=0.008, max-change=0.75, params-rms=0.007695, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.25 0.25,0.25,0.25,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.246, stddev=8.63e-05], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.08 0.08,0.09,0.11,0.14,0.17 0.20,0.21,0.22,0.24), mean=0.118, stddev=0.0353], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11448.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-2e-08,-2e-08,-2e-08 -1e-08,-9e-09,6e-11,9e-09,1e-08 1e-08,2e-08,2e-08,3e-08), mean=5.96e-11, stddev=9.84e-09], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.19,0.19 0.20,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.22), mean=0.207, stddev=0.00757]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000438413, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03435, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.08 0.17,0.31,0.52,0.68,0.77 0.85,0.91,0.95,1.3), mean=0.502, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.82, stddev=0.0549], bias-{mean,stddev}=3.993e-09,0.05597, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-08,3e-05,0.0002 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00116], oderiv-count=1.13683e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/86.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/87.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.11707 tdnnf2.linear:1.40667 tdnnf2.affine:1.41759 tdnnf3.linear:1.19225 tdnnf3.affine:1.22337 tdnnf4.linear:1.08924 tdnnf4.affine:1.14105 tdnnf5.linear:0.865566 tdnnf5.affine:0.924609 tdnnf6.linear:1.11025 tdnnf6.affine:1.18312 tdnnf7.linear:1.04565 tdnnf7.affine:1.12602 tdnnf8.linear:1.00269 tdnnf8.affine:1.10062 tdnnf9.linear:0.983747 tdnnf9.affine:1.07218 tdnnf10.linear:0.96262 tdnnf10.affine:1.04294 tdnnf11.linear:0.94609 tdnnf11.affine:1.02665 tdnnf12.linear:0.925454 tdnnf12.affine:1.01872 tdnnf13.linear:0.919517 tdnnf13.affine:1.0548 prefinal-l:1.04234 prefinal-chain.affine:1.09895 prefinal-chain.linear:0.820079 output.affine:0.690681 prefinal-xent.affine:0.605479 prefinal-xent.linear:0.34229 output-xent.affine:0.56862 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:8.9855 tdnnf2.linear:5.98527 tdnnf2.affine:5.66756 tdnnf3.linear:4.99725 tdnnf3.affine:4.82626 tdnnf4.linear:4.49739 tdnnf4.affine:4.40997 tdnnf5.linear:3.0059 tdnnf5.affine:3.20664 tdnnf6.linear:4.57573 tdnnf6.affine:4.76537 tdnnf7.linear:4.54377 tdnnf7.affine:4.73778 tdnnf8.linear:4.49966 tdnnf8.affine:4.78898 tdnnf9.linear:4.53159 tdnnf9.affine:4.72361 tdnnf10.linear:4.5627 tdnnf10.affine:4.67481 tdnnf11.linear:4.5705 tdnnf11.affine:4.66461 tdnnf12.linear:4.61583 tdnnf12.affine:4.70958 tdnnf13.linear:4.66949 tdnnf13.affine:4.86687 prefinal-l:5.8937 prefinal-chain.affine:4.96027 prefinal-chain.linear:5.6508 output.affine:16.6545 prefinal-xent.affine:3.57753 prefinal-xent.linear:3.93968 output-xent.affine:29.3563 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.235157 tdnnf2.linear:0.234208 tdnnf2.affine:0.249411 tdnnf3.linear:0.237988 tdnnf3.affine:0.25308 tdnnf4.linear:0.241724 tdnnf4.affine:0.258418 tdnnf5.linear:0.287219 tdnnf5.affine:0.287521 tdnnf6.linear:0.24196 tdnnf6.affine:0.247703 tdnnf7.linear:0.229379 tdnnf7.affine:0.237075 tdnnf8.linear:0.221784 tdnnf8.affine:0.228972 tdnnf9.linear:0.215928 tdnnf9.affine:0.226204 tdnnf10.linear:0.210041 tdnnf10.affine:0.22247 tdnnf11.linear:0.206155 tdnnf11.affine:0.21938 tdnnf12.linear:0.199782 tdnnf12.affine:0.215677 tdnnf13.linear:0.196259 tdnnf13.affine:0.216018 prefinal-l:0.176166 prefinal-chain.affine:0.221082 prefinal-chain.linear:0.144799 output.affine:0.0415025 prefinal-xent.affine:0.168971 prefinal-xent.linear:0.0868163 output-xent.affine:0.0193782 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Wed Jul 20 10:33:48 EDT 2022, elapsed time 0 seconds
