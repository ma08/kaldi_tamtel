# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/38.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/37.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/38.mdl 
# Started at Wed Jul 20 08:34:00 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/38.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.07,0.10,0.26,0.36,0.45 0.55,0.65,0.69,0.99), mean=0.257, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.39,0.42 0.44,0.47,0.60,0.76,0.86 0.96,1.0,1.0,1.1), mean=0.627, stddev=0.165], bias-{mean,stddev}=0.001798,0.02706, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.24e+06, self-repaired-proportion=0.0563103, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,8e-05,0.0001,0.0002 0.0003,0.0009,0.02,0.04,0.04 0.05,0.05,0.05,0.08), mean=0.018, stddev=0.0172], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.06 0.07,0.10,0.39,0.75,0.85 0.91,0.94,0.95,0.98), mean=0.427, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.11,0.16,0.21 0.24,0.29,0.35,0.41), mean=0.121, stddev=0.0632], oderiv-count=4.7015e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45768.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,3e-05,5e-05,0.0001 0.0003,0.0008,0.01,0.04,0.04 0.05,0.05,0.05,0.08), mean=0.0178, stddev=0.0171], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0003,0.0004,0.0009 0.001,0.003,0.02,0.04,0.04 0.04,0.05,0.05,0.08), mean=0.0198, stddev=0.0155]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01394, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63,0.63 0.63,0.63,0.63,0.63), mean=0.631, stddev=0.000423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.15,0.19,0.21 0.24,0.27,0.29,0.34), mean=0.151, stddev=0.0466], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01224, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.11,0.13,0.18,0.24,0.28 0.31,0.34,0.36,0.38), mean=0.185, stddev=0.0635], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.35 0.36,0.37,0.39,0.41,0.42 0.43,0.43,0.44,0.45), mean=0.391, stddev=0.0213], bias-{mean,stddev}=-0.02959,0.04859, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.11e+06, self-repaired-proportion=0.000703862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.01,0.02 0.03,0.04,0.05,0.07,0.07 0.08,0.08,0.09,0.10), mean=0.0518, stddev=0.0176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.13,0.20 0.26,0.33,0.42,0.54,0.60 0.66,0.71,0.74,0.81), mean=0.429, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.04 0.04,0.05,0.05,0.09), mean=0.0264, stddev=0.00842], oderiv-count=4.50298e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45256.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.009,0.02 0.03,0.04,0.05,0.06,0.07 0.08,0.08,0.09,0.10), mean=0.051, stddev=0.0176], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.03,0.05 0.06,0.07,0.09,0.10,0.12 0.13,0.14,0.14,0.17), mean=0.086, stddev=0.0236]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01121, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.508, stddev=0.000546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.12,0.15,0.16 0.17,0.18,0.18,0.21), mean=0.124, stddev=0.0247], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009832, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.13,0.15,0.18,0.20 0.21,0.23,0.24,0.30), mean=0.154, stddev=0.0309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.31,0.33,0.34 0.34,0.35,0.35,0.38), mean=0.314, stddev=0.0172], bias-{mean,stddev}=-0.02446,0.04059, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.04,0.05,0.07,0.08,0.09 0.09,0.10,0.11,0.19), mean=0.0669, stddev=0.0177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.24,0.29 0.33,0.36,0.44,0.51,0.55 0.59,0.61,0.63,0.73), mean=0.439, stddev=0.0903], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.05), mean=0.015, stddev=0.00333], oderiv-count=4.51104e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=44744.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.04,0.05,0.07,0.08,0.09 0.09,0.10,0.11,0.19), mean=0.0662, stddev=0.0178], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.08 0.09,0.10,0.11,0.13,0.13 0.14,0.16,0.17,0.25), mean=0.112, stddev=0.0194]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.009713, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.44, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.19), mean=0.109, stddev=0.0159], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.12,0.12,0.14,0.16,0.17 0.18,0.20,0.21,0.23), mean=0.143, stddev=0.0227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.26 0.27,0.28,0.29,0.30,0.31 0.32,0.32,0.33,0.34), mean=0.289, stddev=0.0172], bias-{mean,stddev}=-0.01812,0.03395, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.05,0.05,0.07,0.08,0.09 0.09,0.10,0.10,0.15), mean=0.068, stddev=0.0161], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.24,0.27,0.29 0.33,0.36,0.44,0.50,0.54 0.56,0.60,0.63,0.68), mean=0.434, stddev=0.0829], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0237, stddev=0.00388], oderiv-count=1.54106e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14914.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.05,0.05,0.07,0.08,0.09 0.09,0.10,0.10,0.16), mean=0.0678, stddev=0.0162], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.10,0.12,0.13,0.14 0.14,0.15,0.16,0.24), mean=0.118, stddev=0.0163]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.009595, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.31,0.31 0.31,0.31,0.31,0.31,0.31 0.31,0.31,0.31,0.31), mean=0.307, stddev=0.00044], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.13,0.13,0.18), mean=0.108, stddev=0.0112], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.009705, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.08,0.09,0.11,0.13,0.13 0.14,0.15,0.16,0.22), mean=0.108, stddev=0.0204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.27 0.28,0.29,0.31,0.32,0.34 0.34,0.35,0.36,0.36), mean=0.31, stddev=0.0209], bias-{mean,stddev}=-0.01577,0.03384, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.88e+05, self-repaired-proportion=0.00749085, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.001,0.004,0.008 0.01,0.02,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0352, stddev=0.016], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.08,0.13 0.18,0.25,0.39,0.51,0.58 0.62,0.67,0.69,0.78), mean=0.383, stddev=0.15], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.07,0.09,0.09,0.11), mean=0.0465, stddev=0.0132], oderiv-count=1.50394e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14914.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.001,0.003,0.008 0.01,0.02,0.04,0.05,0.05 0.06,0.07,0.07,0.09), mean=0.035, stddev=0.0159], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.02,0.03 0.04,0.05,0.06,0.08,0.08 0.09,0.09,0.10,0.14), mean=0.0627, stddev=0.0173]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009633, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.436, stddev=0.000423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.108, stddev=0.0129], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009378, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.15,0.17,0.17 0.18,0.19,0.20,0.23), mean=0.149, stddev=0.0204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.28,0.28,0.30,0.31,0.32 0.33,0.34,0.34,0.36), mean=0.3, stddev=0.0189], bias-{mean,stddev}=-0.03018,0.03652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.15), mean=0.0605, stddev=0.0155], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.20,0.23,0.26 0.29,0.33,0.41,0.49,0.52 0.55,0.58,0.60,0.65), mean=0.407, stddev=0.0889], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0269, stddev=0.00505], oderiv-count=1.52947e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14402.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.14), mean=0.0597, stddev=0.0153], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.13,0.14,0.21), mean=0.108, stddev=0.0134]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009642, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.436, stddev=0.000273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.12 0.13,0.14,0.14,0.19), mean=0.108, stddev=0.0133], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00929, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.15,0.16,0.17 0.18,0.19,0.19,0.26), mean=0.147, stddev=0.0191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.26 0.27,0.28,0.30,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.297, stddev=0.02], bias-{mean,stddev}=-0.03205,0.04009, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.06,0.07,0.08 0.09,0.09,0.10,0.12), mean=0.0594, stddev=0.0165], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.22,0.24 0.27,0.32,0.40,0.49,0.53 0.56,0.59,0.60,0.68), mean=0.403, stddev=0.0966], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.07), mean=0.0263, stddev=0.00567], oderiv-count=1.4391e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13890.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.06,0.07,0.08 0.09,0.09,0.10,0.12), mean=0.0592, stddev=0.0163], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.08 0.09,0.10,0.11,0.12,0.12 0.13,0.13,0.14,0.22), mean=0.108, stddev=0.0138]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00955, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.432, stddev=0.000457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.11,0.12,0.13 0.13,0.14,0.15,0.20), mean=0.107, stddev=0.0144], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00929, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.12,0.13,0.15,0.16,0.17 0.18,0.19,0.19,0.25), mean=0.147, stddev=0.0189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.27,0.28,0.30,0.31,0.32 0.33,0.34,0.35,0.36), mean=0.297, stddev=0.0201], bias-{mean,stddev}=-0.03382,0.04126, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.03 0.04,0.04,0.06,0.07,0.08 0.09,0.09,0.10,0.13), mean=0.0587, stddev=0.0179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.18,0.22 0.25,0.31,0.40,0.49,0.52 0.55,0.58,0.59,0.64), mean=0.395, stddev=0.101], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06), mean=0.026, stddev=0.00617], oderiv-count=1.4231e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13378.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.03 0.04,0.04,0.06,0.07,0.08 0.09,0.09,0.10,0.13), mean=0.0586, stddev=0.0177], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.08 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.27), mean=0.109, stddev=0.0176]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009684, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.438, stddev=0.000386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.19), mean=0.109, stddev=0.0149], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009306, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.12,0.13,0.15,0.16,0.17 0.18,0.18,0.19,0.22), mean=0.148, stddev=0.018], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.27,0.28,0.29,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.297, stddev=0.0199], bias-{mean,stddev}=-0.0333,0.04143, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.03,0.04,0.06,0.07,0.08 0.09,0.09,0.09,0.12), mean=0.0585, stddev=0.0179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.18,0.21 0.25,0.30,0.40,0.48,0.52 0.55,0.58,0.59,0.66), mean=0.394, stddev=0.102], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.06), mean=0.0254, stddev=0.00611], oderiv-count=1.37843e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12866.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.03 0.03,0.04,0.06,0.07,0.08 0.09,0.09,0.09,0.12), mean=0.0583, stddev=0.0179], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.08 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.21), mean=0.107, stddev=0.0171]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009704, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.439, stddev=0.000946], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.19), mean=0.109, stddev=0.0148], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009351, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.13,0.15,0.16,0.17 0.18,0.19,0.19,0.22), mean=0.149, stddev=0.0182], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.27,0.28,0.30,0.31,0.32 0.33,0.34,0.34,0.36), mean=0.299, stddev=0.0198], bias-{mean,stddev}=-0.02868,0.04004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.04,0.06,0.08,0.08 0.09,0.10,0.10,0.11), mean=0.061, stddev=0.0184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.18,0.23 0.27,0.31,0.40,0.49,0.53 0.56,0.59,0.61,0.68), mean=0.401, stddev=0.102], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.024, stddev=0.00533], oderiv-count=1.28077e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12354.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.04,0.06,0.08,0.08 0.09,0.10,0.10,0.12), mean=0.0607, stddev=0.0182], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.17), mean=0.11, stddev=0.016]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.443, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.16,0.20), mean=0.11, stddev=0.0155], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009406, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.12 0.13,0.14,0.15,0.16,0.17 0.18,0.18,0.19,0.21), mean=0.15, stddev=0.0158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.28,0.28,0.30,0.32,0.32 0.33,0.35,0.36,0.37), mean=0.3, stddev=0.0199], bias-{mean,stddev}=-0.03005,0.04027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.08 0.09,0.10,0.10,0.11), mean=0.0586, stddev=0.0189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.17,0.21 0.24,0.30,0.40,0.49,0.53 0.55,0.58,0.61,0.67), mean=0.391, stddev=0.107], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0243, stddev=0.00557], oderiv-count=1.23366e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11842.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.02,0.03 0.03,0.04,0.06,0.07,0.08 0.09,0.10,0.10,0.11), mean=0.0585, stddev=0.0188], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.08 0.09,0.09,0.11,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.107, stddev=0.0167]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.447, stddev=0.000299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.16,0.21), mean=0.111, stddev=0.0163], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.00964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.15,0.17,0.17 0.18,0.19,0.19,0.21), mean=0.154, stddev=0.015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.28,0.29,0.31,0.33,0.33 0.34,0.35,0.35,0.36), mean=0.308, stddev=0.0193], bias-{mean,stddev}=-0.02654,0.0373, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.22e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.04,0.04,0.06,0.08,0.09 0.09,0.10,0.11,0.13), mean=0.0619, stddev=0.0195], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.17,0.19,0.23 0.26,0.31,0.40,0.50,0.54 0.57,0.61,0.64,0.68), mean=0.401, stddev=0.105], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.0237, stddev=0.00478], oderiv-count=1.16026e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11330.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.03 0.04,0.05,0.06,0.08,0.09 0.09,0.10,0.11,0.13), mean=0.0622, stddev=0.0197], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.16), mean=0.11, stddev=0.0157]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.454, stddev=0.000273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.16,0.17,0.22), mean=0.112, stddev=0.0167], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01001, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.14,0.15,0.16,0.17,0.18 0.18,0.19,0.20,0.50), mean=0.159, stddev=0.0198], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.28 0.29,0.30,0.31,0.34,0.34 0.35,0.36,0.36,0.77), mean=0.318, stddev=0.0345], bias-{mean,stddev}=-0.02944,0.03521, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.05e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.06,0.08,0.09 0.10,0.10,0.11,0.14), mean=0.0647, stddev=0.02], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.22,0.25 0.28,0.32,0.41,0.49,0.52 0.56,0.59,0.61,0.67), mean=0.405, stddev=0.0955], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.05), mean=0.0233, stddev=0.00401], oderiv-count=1.09274e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.03,0.03 0.04,0.05,0.06,0.08,0.09 0.10,0.11,0.11,0.18), mean=0.0646, stddev=0.0205], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.29), mean=0.112, stddev=0.0175]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, params-rms=0.01302, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.417, stddev=0.00044], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.19,0.20,0.21,0.22,0.22 0.23,0.23,0.24,0.28), mean=0.208, stddev=0.0127], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009531, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.12,0.13 0.13,0.14,0.15,0.16,0.17 0.18,0.18,0.18,0.19), mean=0.151, stddev=0.018], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.28,0.28 0.29,0.29,0.30,0.32,0.32 0.33,0.33,0.34,0.34), mean=0.305, stddev=0.0142], bias-{mean,stddev}=-0.02669,0.03863, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7e+05, self-repaired-proportion=0.0035508, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.02,0.02 0.03,0.03,0.05,0.07,0.07 0.08,0.08,0.09,0.11), mean=0.0481, stddev=0.0184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.17,0.20 0.23,0.27,0.38,0.52,0.57 0.60,0.63,0.65,0.69), mean=0.393, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.08), mean=0.0301, stddev=0.00552], oderiv-count=1.12691e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.01,0.02,0.02 0.02,0.03,0.05,0.06,0.07 0.08,0.08,0.09,0.10), mean=0.0474, stddev=0.0181], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.06,0.06 0.07,0.08,0.09,0.10,0.10 0.10,0.10,0.11,0.13), mean=0.0851, stddev=0.0136]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, params-rms=0.01189, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38), mean=0.38, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.22,0.26), mean=0.19, stddev=0.0139], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-3e-08 -2e-08,-1e-08,1e-09,1e-08,2e-08 3e-08,3e-08,3e-08,4e-08), mean=9.55e-10, stddev=1.6e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.45,0.45 0.46,0.47,0.48,0.50,0.51 0.52,0.53,0.53,0.54), mean=0.484, stddev=0.0202]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000159284, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.04,0.11 0.18,0.22,0.28,0.34,0.38 0.42,0.47,0.49,0.78), mean=0.279, stddev=0.0877], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.89,0.90,0.91 0.93,0.94,0.97,1.0,1.0 1.0,1.0,1.0,1.1), mean=0.972, stddev=0.0358], bias-{mean,stddev}=0.0001849,0.04547, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.006451, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.03,0.04 0.06,0.08,0.10,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.0993, stddev=0.0282], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.19 0.19,0.20,0.21,0.21,0.22 0.23,0.23,0.24,0.25), mean=0.206, stddev=0.0106], bias-{mean,stddev}=-0.03261,0.05115, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.62e+05, self-repaired-proportion=0.0147747, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.003,0.004,0.005 0.007,0.01,0.02,0.05,0.06 0.07,0.08,0.09,0.11), mean=0.0292, stddev=0.0213], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.05,0.07 0.10,0.13,0.30,0.54,0.65 0.75,0.80,0.82,0.90), mean=0.342, stddev=0.213], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0179, stddev=0.00486], oderiv-count=1.15334e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.002,0.003,0.005 0.007,0.01,0.02,0.05,0.06 0.07,0.08,0.09,0.11), mean=0.0287, stddev=0.0209], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.21), mean=0.0492, stddev=0.0166]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000159284, l2-regularize=0.008, max-change=0.75, params-rms=0.00804, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26), mean=0.257, stddev=0.000122], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.12,0.14,0.16 0.18,0.19,0.20,0.24), mean=0.126, stddev=0.0261], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=10818.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-2e-08,-2e-08,-2e-08 -1e-08,-8e-09,-4e-10,8e-09,1e-08 2e-08,2e-08,2e-08,4e-08), mean=-1.12e-10, stddev=1.01e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.23 0.23,0.24,0.24,0.25,0.26 0.26,0.26,0.26,0.27), mean=0.245, stddev=0.0087]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000796421, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03394, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.07 0.16,0.30,0.51,0.68,0.77 0.85,0.91,0.94,1.3), mean=0.494, stddev=0.225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.8, stddev=0.0571], bias-{mean,stddev}=5.887e-09,0.05703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-08,5e-05,0.0001 0.0002,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00102, stddev=0.00117], oderiv-count=1.12992e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/37.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/38.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.88349 tdnnf2.linear:1.67619 tdnnf2.affine:1.90029 tdnnf3.linear:1.43661 tdnnf3.affine:1.55845 tdnnf4.linear:1.2946 tdnnf4.affine:1.45267 tdnnf5.linear:1.01687 tdnnf5.affine:1.15308 tdnnf6.linear:1.28274 tdnnf6.affine:1.46158 tdnnf7.linear:1.21778 tdnnf7.affine:1.39828 tdnnf8.linear:1.1607 tdnnf8.affine:1.35955 tdnnf9.linear:1.13933 tdnnf9.affine:1.32349 tdnnf10.linear:1.11673 tdnnf10.affine:1.28996 tdnnf11.linear:1.0978 tdnnf11.affine:1.26745 tdnnf12.linear:1.07074 tdnnf12.affine:1.26498 tdnnf13.linear:1.05053 tdnnf13.affine:1.47049 prefinal-l:1.18354 prefinal-chain.affine:1.37656 prefinal-chain.linear:1.03908 output.affine:1.16936 prefinal-xent.affine:0.765665 prefinal-xent.linear:0.489001 output-xent.affine:0.984727 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:9.6533 tdnnf2.linear:7.13905 tdnnf2.affine:6.52629 tdnnf3.linear:5.74183 tdnnf3.affine:5.25735 tdnnf4.linear:4.97304 tdnnf4.affine:4.79217 tdnnf5.linear:3.47393 tdnnf5.affine:3.71105 tdnnf6.linear:4.93203 tdnnf6.affine:5.03534 tdnnf7.linear:4.93658 tdnnf7.affine:5.03196 tdnnf8.linear:4.88951 tdnnf8.affine:5.05363 tdnnf9.linear:4.95846 tdnnf9.affine:5.05899 tdnnf10.linear:4.9683 tdnnf10.affine:5.04068 tdnnf11.linear:5.00952 tdnnf11.affine:5.07711 tdnnf12.linear:5.0627 tdnnf12.affine:5.14824 tdnnf13.linear:5.1361 tdnnf13.affine:5.33131 prefinal-l:6.66416 prefinal-chain.affine:5.10581 prefinal-chain.linear:6.0858 output.affine:15.7485 prefinal-xent.affine:3.83139 prefinal-xent.linear:4.11628 output-xent.affine:29.0131 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.298316 tdnnf2.linear:0.233757 tdnnf2.affine:0.289775 tdnnf3.linear:0.249211 tdnnf3.affine:0.29495 tdnnf4.linear:0.25962 tdnnf4.affine:0.301683 tdnnf5.linear:0.291046 tdnnf5.affine:0.308715 tdnnf6.linear:0.259539 tdnnf6.affine:0.289582 tdnnf7.linear:0.246122 tdnnf7.affine:0.277016 tdnnf8.linear:0.236876 tdnnf8.affine:0.268336 tdnnf9.linear:0.229301 tdnnf9.affine:0.26102 tdnnf10.linear:0.224557 tdnnf10.affine:0.255401 tdnnf11.linear:0.219256 tdnnf11.affine:0.249114 tdnnf12.linear:0.211528 tdnnf12.affine:0.245353 tdnnf13.linear:0.204353 tdnnf13.affine:0.277946 prefinal-l:0.177355 prefinal-chain.affine:0.269187 prefinal-chain.linear:0.1702 output.affine:0.0744002 prefinal-xent.affine:0.199419 prefinal-xent.linear:0.118602 output-xent.affine:0.0339585 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Wed Jul 20 08:34:00 EDT 2022, elapsed time 0 seconds
