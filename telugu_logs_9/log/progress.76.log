# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/76.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/75.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/76.mdl 
# Started at Wed Jul 20 10:08:04 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/76.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.10,0.12 0.14,0.19,0.26,0.33,0.40 0.47,0.53,0.57,0.77), mean=0.266, stddev=0.103], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.42,0.45,0.57,0.73,0.80 0.88,0.94,0.95,1.0), mean=0.597, stddev=0.149], bias-{mean,stddev}=-0.005012,0.02009, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.02e+06, self-repaired-proportion=0.0123004, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0008,0.001,0.001 0.002,0.003,0.008,0.02,0.03 0.03,0.03,0.03,0.05), mean=0.012, stddev=0.0101], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.10 0.13,0.18,0.37,0.67,0.81 0.87,0.93,0.94,0.96), mean=0.421, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.12,0.16,0.20,0.24 0.27,0.32,0.35,0.43), mean=0.165, stddev=0.0575], oderiv-count=4.82694e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46739.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.001 0.002,0.003,0.008,0.02,0.03 0.03,0.03,0.03,0.05), mean=0.012, stddev=0.01], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.003,0.004,0.005 0.006,0.008,0.02,0.02,0.03 0.03,0.03,0.04,0.05), mean=0.0159, stddev=0.00788]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55,0.55 0.55,0.55,0.55,0.55), mean=0.551, stddev=0.000299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.10,0.13,0.16,0.18 0.19,0.21,0.22,0.25), mean=0.134, stddev=0.0332], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.13,0.16,0.20,0.24 0.26,0.28,0.30,0.32), mean=0.171, stddev=0.0453], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.32 0.33,0.34,0.35,0.37,0.38 0.38,0.39,0.39,0.40), mean=0.353, stddev=0.018], bias-{mean,stddev}=-0.03036,0.03356, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.11e+06, self-repaired-proportion=0.000213397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.006,0.01 0.02,0.02,0.03,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.033, stddev=0.0118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.11,0.18 0.24,0.30,0.39,0.48,0.54 0.61,0.69,0.75,0.84), mean=0.392, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.07,0.08,0.11), mean=0.0405, stddev=0.0108], oderiv-count=4.55891e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46227.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.006,0.01 0.02,0.02,0.03,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.0327, stddev=0.0119], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.06,0.07,0.07 0.08,0.08,0.09,0.11), mean=0.0586, stddev=0.0141]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.454, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.10,0.11,0.13,0.14 0.14,0.15,0.16,0.19), mean=0.112, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009182, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.16,0.17 0.18,0.20,0.21,0.24), mean=0.145, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.27,0.27 0.27,0.28,0.29,0.31,0.31 0.32,0.32,0.32,0.35), mean=0.293, stddev=0.0149], bias-{mean,stddev}=-0.03167,0.02933, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.03e+06, self-repaired-proportion=0.000333807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.13), mean=0.0498, stddev=0.013], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.17,0.21,0.28 0.31,0.35,0.42,0.47,0.51 0.53,0.56,0.58,0.70), mean=0.412, stddev=0.0796], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.05), mean=0.0211, stddev=0.00426], oderiv-count=4.33805e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45715.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.14), mean=0.0496, stddev=0.0131], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.19), mean=0.0878, stddev=0.0142]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.008979, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.406, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.16), mean=0.101, stddev=0.0123], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.008512, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.12,0.12,0.13,0.15,0.16 0.16,0.18,0.18,0.21), mean=0.135, stddev=0.0168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.25,0.26,0.27,0.28,0.29 0.30,0.31,0.31,0.32), mean=0.272, stddev=0.0163], bias-{mean,stddev}=-0.02428,0.02118, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.12), mean=0.0548, stddev=0.0113], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.27,0.31 0.34,0.37,0.42,0.46,0.48 0.50,0.52,0.54,0.56), mean=0.415, stddev=0.059], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.06), mean=0.0314, stddev=0.00444], oderiv-count=1.48307e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15238.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.06,0.07 0.07,0.08,0.08,0.12), mean=0.0549, stddev=0.0115], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.13,0.13,0.19), mean=0.0982, stddev=0.0121]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.008529, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27,0.27 0.27,0.27,0.27,0.27), mean=0.273, stddev=0.000228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.10,0.11 0.11,0.11,0.12,0.14), mean=0.0962, stddev=0.00805], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.008634, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.10,0.11,0.11 0.12,0.13,0.13,0.22), mean=0.0964, stddev=0.0158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.25,0.26,0.28,0.29,0.30 0.30,0.31,0.31,0.31), mean=0.276, stddev=0.0166], bias-{mean,stddev}=-0.02308,0.02227, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0.00785214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.001,0.002,0.004 0.006,0.01,0.02,0.03,0.04 0.04,0.04,0.05,0.06), mean=0.0213, stddev=0.0112], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.06,0.07,0.11 0.13,0.19,0.32,0.44,0.49 0.52,0.56,0.61,0.68), mean=0.321, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.07,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.0726, stddev=0.0176], oderiv-count=1.56006e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15238.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.001,0.001,0.004 0.006,0.01,0.02,0.03,0.04 0.04,0.04,0.05,0.06), mean=0.021, stddev=0.0112], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.005,0.007,0.01 0.02,0.03,0.04,0.05,0.06 0.06,0.06,0.07,0.10), mean=0.0414, stddev=0.0141]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00919, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.416, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.103, stddev=0.0104], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.20), mean=0.143, stddev=0.0152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.26 0.26,0.27,0.29,0.30,0.31 0.32,0.33,0.33,0.34), mean=0.287, stddev=0.0177], bias-{mean,stddev}=-0.03966,0.02553, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.03,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.09), mean=0.0446, stddev=0.0105], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.20,0.25 0.28,0.31,0.38,0.44,0.47 0.49,0.51,0.52,0.55), mean=0.374, stddev=0.0746], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.09), mean=0.0383, stddev=0.00641], oderiv-count=1.43469e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14726.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.03 0.03,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.09), mean=0.0446, stddev=0.0105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.08,0.09,0.09,0.10 0.10,0.11,0.11,0.16), mean=0.0861, stddev=0.0106]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.413, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.103, stddev=0.011], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008889, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.21), mean=0.142, stddev=0.0134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.25 0.26,0.27,0.28,0.30,0.31 0.31,0.32,0.33,0.33), mean=0.284, stddev=0.0181], bias-{mean,stddev}=-0.04205,0.0268, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.03 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0452, stddev=0.0113], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.20,0.23 0.27,0.31,0.37,0.43,0.47 0.49,0.52,0.53,0.56), mean=0.368, stddev=0.0782], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.05,0.06,0.06,0.09), mean=0.0366, stddev=0.00664], oderiv-count=1.48083e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14214.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.03 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.10), mean=0.045, stddev=0.0113], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.10 0.10,0.11,0.11,0.19), mean=0.0875, stddev=0.0118]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.411, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.16), mean=0.102, stddev=0.0118], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.19), mean=0.142, stddev=0.0151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.34,0.38), mean=0.285, stddev=0.0199], bias-{mean,stddev}=-0.04455,0.02816, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.44e+05, self-repaired-proportion=7.62939e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.10), mean=0.0448, stddev=0.012], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.16,0.20 0.25,0.30,0.37,0.42,0.45 0.47,0.50,0.51,0.57), mean=0.357, stddev=0.079], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.05,0.06,0.06,0.08), mean=0.0353, stddev=0.00722], oderiv-count=1.32589e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13702.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.02 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.10), mean=0.0449, stddev=0.0121], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.20), mean=0.0899, stddev=0.0149]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41,0.41 0.41,0.41,0.41,0.41), mean=0.415, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.17), mean=0.103, stddev=0.0122], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008897, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.17,0.19), mean=0.142, stddev=0.0151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.33,0.34), mean=0.284, stddev=0.0182], bias-{mean,stddev}=-0.04262,0.0285, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.02 0.03,0.04,0.05,0.06,0.06 0.06,0.07,0.07,0.10), mean=0.0456, stddev=0.0125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.16,0.22 0.25,0.30,0.37,0.43,0.46 0.49,0.50,0.52,0.58), mean=0.359, stddev=0.0809], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.04,0.04 0.05,0.06,0.06,0.08), mean=0.0335, stddev=0.00698], oderiv-count=1.26381e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13190.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.10), mean=0.0457, stddev=0.0125], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.20), mean=0.0905, stddev=0.0151]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.418, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.12 0.13,0.14,0.14,0.18), mean=0.104, stddev=0.0132], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008906, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.17,0.17,0.17,0.19), mean=0.142, stddev=0.0145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.31,0.32,0.33,0.34), mean=0.284, stddev=0.0184], bias-{mean,stddev}=-0.03927,0.02651, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.07,0.07,0.09), mean=0.0467, stddev=0.0123], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.17,0.19,0.22 0.26,0.29,0.37,0.43,0.46 0.49,0.52,0.53,0.56), mean=0.363, stddev=0.0798], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.04 0.04,0.05,0.05,0.08), mean=0.0315, stddev=0.00601], oderiv-count=1.30982e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12678.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.06 0.07,0.07,0.07,0.09), mean=0.0468, stddev=0.0122], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0923, stddev=0.0133]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009268, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.419, stddev=0.000173], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.104, stddev=0.0139], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.008912, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.142, stddev=0.013], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.26,0.27,0.28,0.30,0.31 0.31,0.32,0.33,0.35), mean=0.285, stddev=0.018], bias-{mean,stddev}=-0.03842,0.02591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.03,0.05,0.06,0.06 0.07,0.07,0.08,0.09), mean=0.0454, stddev=0.0129], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.17,0.21 0.24,0.29,0.36,0.43,0.46 0.48,0.51,0.52,0.59), mean=0.356, stddev=0.0836], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.07), mean=0.0316, stddev=0.00603], oderiv-count=1.19104e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12166.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.03,0.05,0.06,0.06 0.07,0.07,0.08,0.09), mean=0.0456, stddev=0.013], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.17), mean=0.091, stddev=0.014]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42,0.42 0.42,0.42,0.42,0.42), mean=0.422, stddev=0.000122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.12 0.13,0.14,0.15,0.20), mean=0.104, stddev=0.0152], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.14,0.15,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.146, stddev=0.0114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.26 0.27,0.27,0.29,0.31,0.32 0.32,0.33,0.33,0.34), mean=0.291, stddev=0.0185], bias-{mean,stddev}=-0.03362,0.02203, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0486, stddev=0.0136], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.17,0.19,0.23 0.26,0.30,0.37,0.44,0.48 0.50,0.53,0.56,0.60), mean=0.369, stddev=0.0848], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.08), mean=0.0309, stddev=0.00501], oderiv-count=1.16973e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11654.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0486, stddev=0.0136], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.07 0.08,0.09,0.09,0.10,0.11 0.11,0.12,0.12,0.13), mean=0.0945, stddev=0.0122]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.00943, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.427, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.13 0.13,0.15,0.16,0.21), mean=0.105, stddev=0.016], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.17,0.18,0.18,0.30), mean=0.152, stddev=0.0118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.28,0.29,0.30,0.32,0.33 0.34,0.34,0.35,0.49), mean=0.305, stddev=0.0234], bias-{mean,stddev}=-0.03218,0.01712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10), mean=0.0501, stddev=0.0138], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.22,0.24,0.26 0.29,0.31,0.38,0.44,0.47 0.49,0.53,0.55,0.63), mean=0.379, stddev=0.0734], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.06), mean=0.0318, stddev=0.00402], oderiv-count=1.12851e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11142.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10), mean=0.0495, stddev=0.0138], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0929, stddev=0.012]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.328042, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, params-rms=0.01196, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38,0.38 0.38,0.38,0.38,0.38), mean=0.383, stddev=0.000386], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.17 0.18,0.18,0.19,0.20,0.20 0.21,0.21,0.22,0.25), mean=0.191, stddev=0.0106], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.009382, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.12,0.13 0.13,0.14,0.15,0.16,0.16 0.17,0.17,0.18,0.18), mean=0.15, stddev=0.0134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.27,0.28 0.29,0.29,0.30,0.31,0.32 0.32,0.33,0.33,0.34), mean=0.3, stddev=0.013], bias-{mean,stddev}=-0.03692,0.02389, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.41e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.02,0.02 0.02,0.03,0.03,0.05,0.05 0.06,0.06,0.07,0.09), mean=0.0358, stddev=0.0125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.17,0.20 0.22,0.25,0.34,0.43,0.48 0.51,0.54,0.54,0.58), mean=0.343, stddev=0.0976], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.05,0.06,0.11), mean=0.0411, stddev=0.00622], oderiv-count=1.13139e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11142.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.01,0.01,0.02 0.02,0.02,0.03,0.05,0.05 0.06,0.06,0.07,0.09), mean=0.0355, stddev=0.0125], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.04,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.08,0.09,0.09,0.12), mean=0.0706, stddev=0.011]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, params-rms=0.0112, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.36,0.36 0.36,0.36,0.36,0.36,0.36 0.36,0.36,0.36,0.36), mean=0.358, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.21,0.29), mean=0.179, stddev=0.0126], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11142.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4e-08,-4e-08,-3e-08,-2e-08 -2e-08,-1e-08,-5e-10,1e-08,2e-08 2e-08,3e-08,3e-08,4e-08), mean=2.04e-11, stddev=1.48e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.39 0.40,0.40,0.42,0.43,0.44 0.45,0.46,0.46,0.47), mean=0.418, stddev=0.0179]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000100257, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.05,0.13 0.19,0.23,0.29,0.36,0.40 0.45,0.50,0.53,0.75), mean=0.293, stddev=0.0939], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,0.97 0.98,1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.02, stddev=0.0304], bias-{mean,stddev}=0.0002187,0.04385, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.005875, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.03,0.03 0.05,0.08,0.10,0.11,0.12 0.12,0.13,0.14,0.17), mean=0.0906, stddev=0.0249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.17,0.17 0.18,0.18,0.19,0.19,0.20 0.21,0.21,0.23,0.26), mean=0.188, stddev=0.0119], bias-{mean,stddev}=-0.0425,0.04525, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.41e+05, self-repaired-proportion=0.0262582, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.001,0.003,0.004 0.005,0.007,0.01,0.04,0.05 0.06,0.07,0.08,0.10), mean=0.0217, stddev=0.0183], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.08,0.11,0.22,0.47,0.58 0.73,0.80,0.82,0.88), mean=0.289, stddev=0.204], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0229, stddev=0.00561], oderiv-count=1.10451e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11142.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.001,0.002,0.004 0.005,0.007,0.01,0.04,0.05 0.06,0.07,0.08,0.10), mean=0.0214, stddev=0.0182], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.17), mean=0.0403, stddev=0.0154]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000100257, l2-regularize=0.008, max-change=0.75, params-rms=0.007747, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.25,0.25 0.25,0.25,0.25,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.248, stddev=6.1e-05], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.09,0.11,0.14,0.17 0.19,0.21,0.22,0.24), mean=0.119, stddev=0.0343], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11142.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-2e-08,-2e-08 -9e-09,-7e-09,9e-10,9e-09,1e-08 2e-08,2e-08,2e-08,2e-08), mean=9.01e-10, stddev=9.69e-09], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.20 0.20,0.21,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.212, stddev=0.00776]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000501285, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03427, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.08 0.17,0.31,0.52,0.68,0.77 0.85,0.91,0.95,1.3), mean=0.501, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.8,1.8,1.9,1.9 1.9,1.9,1.9,1.9), mean=1.82, stddev=0.0543], bias-{mean,stddev}=3.108e-09,0.05506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-09,2e-05,0.0001 0.0003,0.0004,0.0008,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00104, stddev=0.00117], oderiv-count=1.10566e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/75.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/76.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.25872 tdnnf2.linear:1.46489 tdnnf2.affine:1.50878 tdnnf3.linear:1.23605 tdnnf3.affine:1.28213 tdnnf4.linear:1.11147 tdnnf4.affine:1.18769 tdnnf5.linear:0.894002 tdnnf5.affine:0.96806 tdnnf6.linear:1.1542 tdnnf6.affine:1.23977 tdnnf7.linear:1.08702 tdnnf7.affine:1.18619 tdnnf8.linear:1.05101 tdnnf8.affine:1.16034 tdnnf9.linear:1.03149 tdnnf9.affine:1.13349 tdnnf10.linear:1.01159 tdnnf10.affine:1.10216 tdnnf11.linear:0.989249 tdnnf11.affine:1.08215 tdnnf12.linear:0.966781 tdnnf12.affine:1.07354 tdnnf13.linear:0.959057 tdnnf13.affine:1.11067 prefinal-l:1.08605 prefinal-chain.affine:1.16548 prefinal-chain.linear:0.86688 output.affine:0.770057 prefinal-xent.affine:0.639051 prefinal-xent.linear:0.364844 output-xent.affine:0.636714 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:9.1556 tdnnf2.linear:6.22922 tdnnf2.affine:5.84225 tdnnf3.linear:5.14006 tdnnf3.affine:4.89986 tdnnf4.linear:4.59748 tdnnf4.affine:4.47864 tdnnf5.linear:3.0879 tdnnf5.affine:3.28984 tdnnf6.linear:4.70522 tdnnf6.affine:4.83528 tdnnf7.linear:4.67112 tdnnf7.affine:4.82296 tdnnf8.linear:4.64866 tdnnf8.affine:4.87523 tdnnf9.linear:4.69067 tdnnf9.affine:4.842 tdnnf10.linear:4.72786 tdnnf10.affine:4.80519 tdnnf11.linear:4.74544 tdnnf11.affine:4.79787 tdnnf12.linear:4.77625 tdnnf12.affine:4.84503 tdnnf13.linear:4.828 tdnnf13.affine:5.02411 prefinal-l:6.12305 prefinal-chain.affine:5.00543 prefinal-chain.linear:5.7323 output.affine:16.5221 prefinal-xent.affine:3.60468 prefinal-xent.linear:3.96629 output-xent.affine:29.2847 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.246344 tdnnf2.linear:0.234137 tdnnf2.affine:0.257278 tdnnf3.linear:0.239591 tdnnf3.affine:0.261172 tdnnf4.linear:0.241176 tdnnf4.affine:0.264836 tdnnf5.linear:0.288768 tdnnf5.affine:0.293591 tdnnf6.linear:0.244822 tdnnf6.affine:0.25603 tdnnf7.linear:0.231919 tdnnf7.affine:0.245431 tdnnf8.linear:0.225451 tdnnf8.affine:0.237528 tdnnf9.linear:0.219203 tdnnf9.affine:0.233538 tdnnf10.linear:0.213323 tdnnf10.affine:0.228652 tdnnf11.linear:0.207785 tdnnf11.affine:0.224923 tdnnf12.linear:0.20176 tdnnf12.affine:0.220959 tdnnf13.linear:0.197968 tdnnf13.affine:0.220364 prefinal-l:0.176761 prefinal-chain.affine:0.232675 prefinal-chain.linear:0.150922 output.affine:0.0466391 prefinal-xent.affine:0.177153 prefinal-xent.linear:0.091967 output-xent.affine:0.0217404 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Wed Jul 20 10:08:05 EDT 2022, elapsed time 1 seconds
