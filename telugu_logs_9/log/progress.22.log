# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/22.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/21.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/22.mdl 
# Started at Wed Jul 20 03:44:21 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/22.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.0202, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.26,0.36,0.46 0.56,0.65,0.70,1.0), mean=0.253, stddev=0.161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.40,0.42 0.44,0.48,0.60,0.75,0.86 0.96,1.0,1.0,1.1), mean=0.625, stddev=0.165], bias-{mean,stddev}=0.004883,0.04991, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.02e+06, self-repaired-proportion=0.375138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,5e-05,0.02,0.05,0.07 0.09,0.11,0.13,0.20), mean=0.0289, stddev=0.0322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.42,0.90,0.95 0.99,1.0,1.0,1.0), mean=0.448, stddev=0.39], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.09,0.15,0.18 0.22,0.27,0.30,0.40), mean=0.107, stddev=0.0576], oderiv-count=4.5721e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46549.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 2e-16,4e-05,0.02,0.05,0.07 0.08,0.10,0.12,0.19), mean=0.0277, stddev=0.0305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-10,0.0005,0.02,0.04,0.05 0.05,0.06,0.06,0.11), mean=0.0225, stddev=0.0198]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01477, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.67,0.67,0.67 0.67,0.67,0.67,0.67,0.67 0.67,0.67,0.67,0.67), mean=0.668, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.10 0.11,0.12,0.16,0.19,0.22 0.25,0.28,0.31,0.35), mean=0.161, stddev=0.0458], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.11,0.13,0.19,0.25,0.29 0.33,0.36,0.39,0.42), mean=0.198, stddev=0.069], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.38 0.39,0.40,0.42,0.44,0.45 0.46,0.46,0.47,0.48), mean=0.418, stddev=0.0221], bias-{mean,stddev}=-0.02892,0.08688, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.95e+06, self-repaired-proportion=0.00319734, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.01,0.02 0.03,0.04,0.07,0.10,0.11 0.13,0.14,0.15,0.19), mean=0.0719, stddev=0.0331], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.10,0.15 0.21,0.28,0.44,0.65,0.77 0.83,0.88,0.89,0.93), mean=0.462, stddev=0.204], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.04,0.05,0.05,0.08), mean=0.0227, stddev=0.00856], oderiv-count=4.37613e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46037.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.006,0.01,0.01 0.03,0.04,0.07,0.10,0.11 0.12,0.13,0.14,0.18), mean=0.0706, stddev=0.0318], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.03,0.04,0.05 0.07,0.08,0.11,0.13,0.14 0.16,0.17,0.17,0.21), mean=0.107, stddev=0.0317]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01196, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54,0.54 0.54,0.54,0.54,0.54), mean=0.541, stddev=0.000546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.11,0.13,0.15,0.17 0.18,0.19,0.20,0.24), mean=0.133, stddev=0.0259], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.17,0.20,0.21 0.23,0.24,0.25,0.31), mean=0.168, stddev=0.0335], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.31 0.32,0.33,0.34,0.36,0.37 0.37,0.38,0.38,0.39), mean=0.343, stddev=0.0181], bias-{mean,stddev}=-0.01944,0.08071, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.98e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.13 0.15,0.16,0.17,0.21), mean=0.0848, stddev=0.0349], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.18,0.22 0.26,0.32,0.46,0.60,0.69 0.75,0.80,0.81,0.88), mean=0.465, stddev=0.16], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.01,0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.05), mean=0.0136, stddev=0.00413], oderiv-count=4.68211e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=45525.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.13 0.14,0.16,0.16,0.20), mean=0.0831, stddev=0.0337], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.07,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.18,0.23), mean=0.129, stddev=0.0251]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.47,0.47), mean=0.463, stddev=0.00108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.13,0.14 0.14,0.15,0.16,0.21), mean=0.115, stddev=0.0164], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.009975, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.11,0.12 0.13,0.14,0.16,0.18,0.19 0.20,0.21,0.22,0.25), mean=0.157, stddev=0.0258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.30,0.30,0.32,0.33,0.34 0.35,0.35,0.36,0.38), mean=0.319, stddev=0.0171], bias-{mean,stddev}=-0.01132,0.08127, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.92e+05, self-repaired-proportion=0.00585938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.01,0.02,0.03 0.04,0.05,0.08,0.12,0.14 0.16,0.18,0.19,0.24), mean=0.0878, stddev=0.0389], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.12,0.15,0.21 0.25,0.31,0.45,0.60,0.70 0.76,0.81,0.84,0.92), mean=0.463, stddev=0.168], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.05,0.09), mean=0.022, stddev=0.00711], oderiv-count=1.51462e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15175.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.02,0.02,0.03 0.04,0.05,0.08,0.12,0.13 0.16,0.17,0.18,0.23), mean=0.0864, stddev=0.0373], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.07,0.09 0.11,0.12,0.14,0.15,0.16 0.17,0.18,0.19,0.24), mean=0.134, stddev=0.026]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.0109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35,0.35 0.35,0.35,0.35,0.35), mean=0.349, stddev=0.000532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.17), mean=0.123, stddev=0.0124], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.01144, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.09 0.10,0.11,0.13,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.128, stddev=0.0219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.32,0.33 0.34,0.35,0.37,0.38,0.39 0.40,0.40,0.41,0.41), mean=0.366, stddev=0.0204], bias-{mean,stddev}=-0.009816,0.0739, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.99e+05, self-repaired-proportion=0.0173303, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.002,0.003,0.008 0.02,0.03,0.05,0.09,0.11 0.13,0.15,0.17,0.20), mean=0.0589, stddev=0.0377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.06,0.10 0.15,0.23,0.42,0.66,0.77 0.83,0.87,0.90,0.97), mean=0.443, stddev=0.223], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04,0.05 0.06,0.08,0.09,0.11), mean=0.0363, stddev=0.0139], oderiv-count=1.46381e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15175.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.002,0.004,0.008 0.02,0.03,0.05,0.09,0.11 0.13,0.14,0.16,0.19), mean=0.0571, stddev=0.0358], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.03 0.05,0.07,0.09,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0836, stddev=0.0243]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.446, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.17), mean=0.111, stddev=0.013], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.13,0.14,0.16,0.18,0.19 0.20,0.21,0.21,0.25), mean=0.16, stddev=0.022], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.29 0.30,0.31,0.32,0.34,0.34 0.35,0.36,0.37,0.39), mean=0.323, stddev=0.0176], bias-{mean,stddev}=-0.02123,0.07759, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.62e+05, self-repaired-proportion=0.000976562, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.13 0.15,0.17,0.18,0.26), mean=0.0819, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.13,0.15,0.19 0.24,0.30,0.44,0.58,0.65 0.71,0.76,0.79,0.91), mean=0.445, stddev=0.156], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0228, stddev=0.00657], oderiv-count=1.43539e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14663.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.13 0.14,0.16,0.17,0.25), mean=0.08, stddev=0.0353], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.06,0.07,0.09 0.10,0.11,0.13,0.15,0.16 0.16,0.17,0.18,0.19), mean=0.128, stddev=0.0235]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009933, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.45, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.20), mean=0.112, stddev=0.0132], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.16,0.18,0.19 0.19,0.21,0.21,0.26), mean=0.159, stddev=0.0213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.32,0.34,0.35 0.35,0.36,0.36,0.37), mean=0.32, stddev=0.0198], bias-{mean,stddev}=-0.0199,0.08501, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.52e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.05,0.08,0.11,0.14 0.16,0.18,0.19,0.24), mean=0.0822, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.22,0.29,0.43,0.61,0.68 0.74,0.80,0.83,0.90), mean=0.447, stddev=0.171], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.07), mean=0.0226, stddev=0.00751], oderiv-count=1.41325e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14151.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.05,0.08,0.11,0.13 0.16,0.17,0.18,0.23), mean=0.0807, stddev=0.0389], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.10,0.11,0.13,0.15,0.16 0.16,0.17,0.18,0.23), mean=0.127, stddev=0.0244]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.444, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.18), mean=0.11, stddev=0.0143], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009954, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.158, stddev=0.0201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.29,0.30,0.32,0.33,0.34 0.35,0.36,0.36,0.38), mean=0.318, stddev=0.0199], bias-{mean,stddev}=-0.02338,0.08551, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.9e+05, self-repaired-proportion=0.00400142, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.01,0.02,0.02 0.03,0.04,0.07,0.11,0.13 0.16,0.18,0.19,0.23), mean=0.0795, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.10,0.12,0.16 0.21,0.28,0.43,0.59,0.66 0.73,0.79,0.82,0.86), mean=0.436, stddev=0.173], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.04,0.05,0.05,0.07), mean=0.0228, stddev=0.00817], oderiv-count=1.33747e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13639.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.01,0.02,0.02 0.03,0.04,0.07,0.11,0.13 0.15,0.17,0.18,0.22), mean=0.078, stddev=0.0388], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.06,0.06,0.08 0.09,0.10,0.13,0.15,0.16 0.16,0.17,0.18,0.27), mean=0.125, stddev=0.0275]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009876, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.447, stddev=0.000712], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.19), mean=0.111, stddev=0.0146], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009956, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.158, stddev=0.0193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.32,0.33,0.35 0.35,0.36,0.36,0.37), mean=0.318, stddev=0.0193], bias-{mean,stddev}=-0.02191,0.08413, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.39e+05, self-repaired-proportion=0.00292969, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.01,0.02,0.02 0.03,0.04,0.07,0.11,0.13 0.15,0.18,0.18,0.25), mean=0.0789, stddev=0.0401], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.09,0.12,0.16 0.20,0.28,0.43,0.60,0.67 0.73,0.79,0.82,0.90), mean=0.437, stddev=0.175], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.04,0.04,0.05,0.08), mean=0.0222, stddev=0.00797], oderiv-count=1.35258e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13127.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.01,0.02,0.02 0.03,0.04,0.07,0.11,0.13 0.15,0.17,0.18,0.24), mean=0.0777, stddev=0.0386], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.06,0.07 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.17,0.21), mean=0.122, stddev=0.0262]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.447, stddev=0.000863], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.19), mean=0.111, stddev=0.0142], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.009981, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.13,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.159, stddev=0.0191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.30,0.32,0.34,0.34 0.35,0.36,0.36,0.38), mean=0.319, stddev=0.0205], bias-{mean,stddev}=-0.01462,0.08419, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.92e+05, self-repaired-proportion=0.000976562, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.02,0.03 0.03,0.05,0.08,0.12,0.14 0.16,0.18,0.19,0.24), mean=0.0831, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.14,0.18 0.22,0.29,0.44,0.62,0.69 0.74,0.80,0.83,0.89), mean=0.452, stddev=0.175], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.07), mean=0.0207, stddev=0.00686], oderiv-count=1.26131e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12615.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.03 0.03,0.05,0.08,0.12,0.14 0.15,0.17,0.18,0.23), mean=0.0819, stddev=0.0394], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.08 0.09,0.11,0.13,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.126, stddev=0.025]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.009919, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45,0.45 0.45,0.45,0.45,0.45), mean=0.449, stddev=0.000423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.19), mean=0.111, stddev=0.0144], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.16, stddev=0.0174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.30,0.30,0.32,0.34,0.35 0.36,0.37,0.37,0.39), mean=0.321, stddev=0.0206], bias-{mean,stddev}=-0.022,0.08551, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.47e+05, self-repaired-proportion=0.0029037, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.01,0.02,0.02 0.03,0.04,0.07,0.12,0.14 0.15,0.17,0.18,0.23), mean=0.0791, stddev=0.0407], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.10,0.12,0.16 0.20,0.27,0.43,0.59,0.68 0.74,0.79,0.81,0.89), mean=0.434, stddev=0.178], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.021, stddev=0.00711], oderiv-count=1.16467e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12103.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.01,0.02,0.02 0.03,0.04,0.07,0.11,0.13 0.15,0.16,0.18,0.22), mean=0.0777, stddev=0.0392], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.05,0.06,0.07 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.17,0.18), mean=0.121, stddev=0.0259]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.456, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.10,0.10,0.11,0.12,0.13 0.14,0.15,0.16,0.21), mean=0.113, stddev=0.0152], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.18 0.19,0.20,0.20,0.22), mean=0.162, stddev=0.0165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.29 0.30,0.31,0.32,0.34,0.35 0.36,0.37,0.37,0.37), mean=0.325, stddev=0.0197], bias-{mean,stddev}=-0.01859,0.08266, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.73e+05, self-repaired-proportion=3.47531e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.03,0.05,0.08,0.12,0.14 0.16,0.18,0.19,0.22), mean=0.0818, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.13,0.18 0.22,0.28,0.44,0.60,0.68 0.75,0.79,0.81,0.89), mean=0.443, stddev=0.173], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.03 0.03,0.04,0.04,0.06), mean=0.0201, stddev=0.00591], oderiv-count=1.16314e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11591.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.03,0.05,0.08,0.11,0.14 0.15,0.17,0.18,0.21), mean=0.0808, stddev=0.039], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.08 0.09,0.10,0.13,0.14,0.15 0.16,0.17,0.17,0.19), mean=0.124, stddev=0.0244]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.464, stddev=0.000273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.13,0.13 0.14,0.15,0.16,0.22), mean=0.115, stddev=0.0148], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.18 0.19,0.20,0.20,0.22), mean=0.163, stddev=0.0157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.30,0.31,0.33,0.34,0.35 0.36,0.37,0.37,0.38), mean=0.327, stddev=0.0197], bias-{mean,stddev}=-0.01981,0.08133, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.41e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.03 0.04,0.05,0.08,0.12,0.14 0.16,0.18,0.19,0.22), mean=0.0858, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.15,0.20 0.24,0.30,0.44,0.59,0.66 0.71,0.76,0.79,0.85), mean=0.446, stddev=0.159], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.06), mean=0.0188, stddev=0.00491], oderiv-count=1.07686e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11079.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.03 0.04,0.05,0.08,0.12,0.14 0.16,0.17,0.18,0.21), mean=0.0847, stddev=0.0388], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.09 0.10,0.11,0.13,0.15,0.16 0.16,0.17,0.17,0.20), mean=0.129, stddev=0.0237]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, params-rms=0.01332, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.42,0.42,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.426, stddev=0.000828], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.19 0.20,0.20,0.21,0.22,0.23 0.23,0.24,0.24,0.27), mean=0.213, stddev=0.012], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.13,0.13 0.14,0.15,0.16,0.17,0.18 0.18,0.19,0.19,0.20), mean=0.159, stddev=0.017], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.30,0.31,0.32,0.33,0.34 0.34,0.35,0.35,0.36), mean=0.32, stddev=0.0146], bias-{mean,stddev}=-0.01672,0.08022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.45e+05, self-repaired-proportion=0.00976562, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,0.006,0.02,0.02 0.03,0.04,0.06,0.11,0.13 0.15,0.17,0.19,0.22), mean=0.0724, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.06,0.12,0.16 0.20,0.26,0.43,0.62,0.71 0.77,0.83,0.86,0.94), mean=0.443, stddev=0.193], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.024, stddev=0.00619], oderiv-count=1.0759e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11079.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,0.006,0.01,0.02 0.03,0.04,0.06,0.10,0.12 0.14,0.17,0.18,0.21), mean=0.0713, stddev=0.0388], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.04,0.06,0.07 0.08,0.09,0.11,0.13,0.13 0.14,0.14,0.15,0.19), mean=0.108, stddev=0.0229]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, params-rms=0.01233, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.39,0.39 0.39,0.39,0.39,0.39,0.39 0.39,0.39,0.40,0.40), mean=0.395, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.17 0.18,0.19,0.20,0.21,0.21 0.22,0.22,0.23,0.24), mean=0.197, stddev=0.0137], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11079.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-4e-08,-4e-08,-3e-08 -2e-08,-2e-08,-2e-10,2e-08,2e-08 3e-08,4e-08,5e-08,5e-08), mean=-3.52e-10, stddev=1.84e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.47,0.47,0.48 0.49,0.50,0.52,0.54,0.55 0.56,0.56,0.57,0.61), mean=0.519, stddev=0.0239]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000193566, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01741, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.01,0.03,0.10 0.16,0.21,0.27,0.33,0.36 0.40,0.44,0.46,0.89), mean=0.265, stddev=0.0857], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.83,0.84,0.86 0.88,0.89,0.92,0.96,0.98 0.99,0.99,1.0,1.0), mean=0.924, stddev=0.0386], bias-{mean,stddev}=0.0001449,0.04544, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.007145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.09,0.11,0.13,0.14 0.14,0.15,0.16,0.22), mean=0.112, stddev=0.0212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.21 0.21,0.22,0.23,0.24,0.24 0.25,0.26,0.26,0.29), mean=0.228, stddev=0.0117], bias-{mean,stddev}=-0.01958,0.0784, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.21e+05, self-repaired-proportion=0.0159568, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,0.003,0.005,0.008 0.01,0.02,0.04,0.09,0.11 0.13,0.14,0.15,0.22), mean=0.051, stddev=0.0386], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.04,0.06,0.09 0.12,0.17,0.38,0.67,0.77 0.83,0.90,0.92,0.99), mean=0.414, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.008,0.009,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0135, stddev=0.00472], oderiv-count=1.11712e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11079.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-35,0.004,0.005,0.007 0.01,0.02,0.04,0.08,0.11 0.12,0.14,0.15,0.20), mean=0.0493, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-19,0.02,0.03,0.04 0.04,0.05,0.07,0.09,0.09 0.10,0.11,0.11,0.25), mean=0.0698, stddev=0.0231]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000193566, l2-regularize=0.008, max-change=0.75, params-rms=0.008239, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26,0.26 0.26,0.26,0.26,0.26), mean=0.264, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.15 0.16,0.17,0.18,0.22), mean=0.131, stddev=0.0176], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11079.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-2e-08,-2e-08 -2e-08,-1e-08,-7e-11,8e-09,1e-08 2e-08,2e-08,2e-08,3e-08), mean=-6.14e-10, stddev=1.15e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.25 0.26,0.26,0.27,0.28,0.29 0.29,0.29,0.29,0.30), mean=0.271, stddev=0.0114]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00096783, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03362, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.06 0.13,0.26,0.52,0.68,0.77 0.84,0.90,0.93,1.3), mean=0.486, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.7 1.7,1.7,1.8,1.8,1.9 1.9,1.9,1.9,1.9), mean=1.79, stddev=0.0662], bias-{mean,stddev}=5.324e-09,0.06057, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,2e-08,3e-05,0.0001 0.0002,0.0004,0.0007,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.00101, stddev=0.00117], oderiv-count=1.13018e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/21.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/22.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.14922 tdnnf2.linear:1.86556 tdnnf2.affine:2.16388 tdnnf3.linear:1.66726 tdnnf3.affine:1.79819 tdnnf4.linear:1.49515 tdnnf4.affine:1.68518 tdnnf5.linear:1.15427 tdnnf5.affine:1.31007 tdnnf6.linear:1.42028 tdnnf6.affine:1.6352 tdnnf7.linear:1.37053 tdnnf7.affine:1.56405 tdnnf8.linear:1.3026 tdnnf8.affine:1.50217 tdnnf9.linear:1.2703 tdnnf9.affine:1.45923 tdnnf10.linear:1.22718 tdnnf10.affine:1.41064 tdnnf11.linear:1.20038 tdnnf11.affine:1.3954 tdnnf12.linear:1.17511 tdnnf12.affine:1.37945 tdnnf13.linear:1.13891 tdnnf13.affine:1.39633 prefinal-l:1.26916 prefinal-chain.affine:1.47109 prefinal-chain.linear:1.15562 output.affine:1.44508 prefinal-xent.affine:0.839545 prefinal-xent.linear:0.59009 output-xent.affine:1.26008 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:9.72143 tdnnf2.linear:7.56102 tdnnf2.affine:7.31393 tdnnf3.linear:6.12227 tdnnf3.affine:6.09784 tdnnf4.linear:5.23628 tdnnf4.affine:5.74255 tdnnf5.linear:3.94674 tdnnf5.affine:4.78025 tdnnf6.linear:5.05024 tdnnf6.affine:5.78115 tdnnf7.linear:5.08584 tdnnf7.affine:5.84504 tdnnf8.linear:5.01817 tdnnf8.affine:5.83279 tdnnf9.linear:5.05653 tdnnf9.affine:5.80732 tdnnf10.linear:5.05483 tdnnf10.affine:5.79594 tdnnf11.linear:5.07844 tdnnf11.affine:5.86561 tdnnf12.linear:5.15857 tdnnf12.affine:5.87819 tdnnf13.linear:5.24527 tdnnf13.affine:5.88306 prefinal-l:6.82134 prefinal-chain.affine:5.76139 prefinal-chain.linear:6.31539 output.affine:15 prefinal-xent.affine:4.4799 prefinal-xent.linear:4.2184 output-xent.affine:28.7666 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.323259 tdnnf2.linear:0.245869 tdnnf2.affine:0.291174 tdnnf3.linear:0.270382 tdnnf3.affine:0.28737 tdnnf4.linear:0.283551 tdnnf4.affine:0.284458 tdnnf5.linear:0.289108 tdnnf5.affine:0.262976 tdnnf6.linear:0.27999 tdnnf6.affine:0.2749 tdnnf7.linear:0.267837 tdnnf7.affine:0.259769 tdnnf8.linear:0.258279 tdnnf8.affine:0.249994 tdnnf9.linear:0.250117 tdnnf9.affine:0.243996 tdnnf10.linear:0.241781 tdnnf10.affine:0.236258 tdnnf11.linear:0.235434 tdnnf11.affine:0.231024 tdnnf12.linear:0.226767 tdnnf12.affine:0.228405 tdnnf13.linear:0.216302 tdnnf13.affine:0.231577 prefinal-l:0.185692 prefinal-chain.affine:0.248641 prefinal-chain.linear:0.182585 output.affine:0.0968329 prefinal-xent.affine:0.180411 prefinal-xent.linear:0.139878 output-xent.affine:0.043812 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Wed Jul 20 03:44:22 EDT 2022, elapsed time 1 seconds
