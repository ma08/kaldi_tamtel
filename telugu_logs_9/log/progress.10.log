# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/10.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/9.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/10.mdl 
# Started at Wed Jul 20 03:20:03 EDT 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/10.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 2824
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9032208
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=2824
output-node name=output input=output.affine dim=2824 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=2824
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=2824 output-dim=2824
output-node name=output-xent input=output-xent.log-softmax dim=2824 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.005753, bias-{mean,stddev}=-0.001002,0.01283
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02359, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.26 0.27,0.28,0.33,0.38,0.43 0.50,0.57,0.60,0.76), mean=0.341, stddev=0.0771], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.63,0.63,0.63 0.64,0.65,0.72,0.83,0.89 1.0,1.0,1.0,1.2), mean=0.746, stddev=0.112], bias-{mean,stddev}=-0.003179,0.2493, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.19e+06, self-repaired-proportion=0.742709, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.22,0.34 0.45,0.57,0.63,0.99), mean=0.107, stddev=0.157], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.48,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.481, stddev=0.454], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.07,0.09,0.13,0.16 0.19,0.24,0.26,0.39), mean=0.101, stddev=0.0448], oderiv-count=4.62227e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47034.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.20,0.32 0.42,0.53,0.59,0.93), mean=0.0999, stddev=0.147], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.06,0.06 0.07,0.08,0.08,0.10), mean=0.0286, stddev=0.0268]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01563, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71,0.71 0.71,0.71,0.71,0.71), mean=0.707, stddev=0.000244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.13,0.14,0.17,0.20,0.22 0.24,0.27,0.28,0.34), mean=0.173, stddev=0.0372], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01966, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.27,0.28,0.30,0.34,0.37 0.39,0.42,0.44,0.49), mean=0.312, stddev=0.0415], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.59,0.60 0.60,0.61,0.63,0.64,0.65 0.66,0.67,0.67,0.68), mean=0.629, stddev=0.0195], bias-{mean,stddev}=-0.007982,0.2418, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.16e+06, self-repaired-proportion=0.0841346, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0002,0.0007,0.006 0.02,0.04,0.11,0.27,0.35 0.40,0.45,0.56,0.97), mean=0.156, stddev=0.134], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.003,0.01,0.05 0.10,0.19,0.48,0.82,0.91 0.94,0.95,0.97,1.0), mean=0.493, stddev=0.293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.008,0.01,0.02,0.03,0.04 0.05,0.05,0.06,0.08), mean=0.0197, stddev=0.0125], oderiv-count=4.54432e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46522.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,0.0001,0.0007,0.006 0.02,0.04,0.11,0.26,0.33 0.38,0.42,0.51,0.90), mean=0.148, stddev=0.124], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.004,0.008,0.03 0.07,0.11,0.17,0.22,0.24 0.26,0.28,0.30,0.35), mean=0.165, stddev=0.0656]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.60,0.60,0.60 0.60,0.60,0.60,0.60,0.60 0.60,0.60,0.60,0.60), mean=0.597, stddev=0.000828], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.14,0.17,0.18 0.19,0.21,0.21,0.25), mean=0.148, stddev=0.0227], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01867, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.27,0.28,0.30,0.32,0.33 0.34,0.35,0.35,0.39), mean=0.298, stddev=0.0217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.56,0.57 0.58,0.58,0.60,0.61,0.62 0.63,0.63,0.63,0.65), mean=0.597, stddev=0.0168], bias-{mean,stddev}=-0.006851,0.2578, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.14e+06, self-repaired-proportion=0.0203406, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.009,0.01,0.02 0.04,0.06,0.14,0.29,0.40 0.47,0.52,0.55,0.89), mean=0.178, stddev=0.139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.05,0.06,0.10 0.14,0.22,0.49,0.75,0.87 0.91,0.93,0.94,0.98), mean=0.494, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.007,0.01,0.01,0.02 0.02,0.03,0.04,0.06), mean=0.0112, stddev=0.00639], oderiv-count=4.61818e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46010.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,0.009,0.01,0.02 0.03,0.05,0.13,0.27,0.37 0.44,0.49,0.52,0.83), mean=0.169, stddev=0.13], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.07,0.10 0.12,0.15,0.21,0.26,0.29 0.31,0.33,0.33,0.36), mean=0.204, stddev=0.0663]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53,0.53 0.53,0.53,0.53,0.53), mean=0.531, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.15 0.16,0.17,0.17,0.23), mean=0.132, stddev=0.0143], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.01831, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.26 0.27,0.28,0.29,0.31,0.32 0.32,0.33,0.33,0.35), mean=0.292, stddev=0.018], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.55,0.56 0.57,0.57,0.59,0.60,0.60 0.61,0.62,0.62,0.63), mean=0.586, stddev=0.0145], bias-{mean,stddev}=0.001319,0.2859, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.94e+05, self-repaired-proportion=0.0413194, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.01,0.02,0.03 0.04,0.07,0.15,0.30,0.42 0.53,0.60,0.67,1.1), mean=0.196, stddev=0.158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.03,0.05,0.09 0.15,0.23,0.49,0.76,0.87 0.92,0.95,0.97,1.0), mean=0.498, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.009 0.009,0.01,0.01,0.02,0.03 0.03,0.04,0.04,0.10), mean=0.0166, stddev=0.009], oderiv-count=1.58432e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15336.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.008,0.01,0.03 0.04,0.06,0.14,0.29,0.39 0.50,0.57,0.63,1.0), mean=0.186, stddev=0.148], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.07,0.08,0.11 0.13,0.16,0.22,0.28,0.31 0.33,0.36,0.36,0.44), mean=0.224, stddev=0.0692]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.01384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44,0.44 0.44,0.44,0.44,0.44), mean=0.443, stddev=0.000503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.17 0.18,0.18,0.18,0.20), mean=0.156, stddev=0.0116], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.02508, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.27,0.28,0.30,0.31 0.32,0.32,0.33,0.33), mean=0.283, stddev=0.0204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.76,0.76,0.77 0.78,0.79,0.80,0.82,0.83 0.84,0.84,0.84,0.86), mean=0.802, stddev=0.0197], bias-{mean,stddev}=-0.002126,0.2705, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.0728044, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.003,0.007,0.02 0.03,0.05,0.12,0.29,0.39 0.49,0.60,0.66,0.93), mean=0.173, stddev=0.155], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.02,0.03,0.08 0.11,0.20,0.47,0.79,0.88 0.94,0.97,0.99,1.0), mean=0.487, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.009,0.01 0.01,0.01,0.02,0.03,0.03 0.04,0.06,0.07,0.10), mean=0.0201, stddev=0.0116], oderiv-count=1.47898e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15336.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.003,0.005,0.01 0.02,0.04,0.12,0.27,0.36 0.46,0.56,0.62,0.87), mean=0.163, stddev=0.145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.04,0.08 0.10,0.12,0.19,0.25,0.27 0.29,0.31,0.33,0.35), mean=0.185, stddev=0.0687]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.502, stddev=0.000669], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.12,0.13,0.14 0.14,0.15,0.15,0.17), mean=0.125, stddev=0.0109], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.27,0.28,0.29,0.31,0.31 0.32,0.33,0.33,0.34), mean=0.293, stddev=0.015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.56,0.56 0.57,0.58,0.59,0.60,0.61 0.61,0.62,0.62,0.66), mean=0.587, stddev=0.0149], bias-{mean,stddev}=-0.01249,0.2618, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.62e+05, self-repaired-proportion=0.0178018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.02,0.03 0.05,0.07,0.16,0.30,0.39 0.46,0.56,0.60,1.0), mean=0.192, stddev=0.143], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.05,0.07,0.11 0.17,0.25,0.47,0.71,0.80 0.87,0.91,0.94,0.99), mean=0.481, stddev=0.236], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.008 0.008,0.009,0.01,0.02,0.02 0.03,0.03,0.04,0.07), mean=0.0148, stddev=0.007], oderiv-count=1.49523e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14824.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.01,0.02,0.03 0.05,0.07,0.15,0.28,0.36 0.44,0.53,0.57,0.96), mean=0.182, stddev=0.135], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.07,0.09,0.12 0.14,0.17,0.24,0.30,0.33 0.35,0.38,0.39,0.46), mean=0.237, stddev=0.0724]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.51, stddev=0.000646], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.20), mean=0.127, stddev=0.0114], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0184, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.28,0.28,0.29,0.31,0.31 0.32,0.32,0.33,0.35), mean=0.294, stddev=0.0149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.56,0.56 0.57,0.58,0.59,0.60,0.61 0.62,0.62,0.63,0.63), mean=0.589, stddev=0.016], bias-{mean,stddev}=-2.875e-05,0.2797, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.61e+05, self-repaired-proportion=0.0218547, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.03 0.04,0.07,0.16,0.32,0.42 0.52,0.63,0.70,0.99), mean=0.202, stddev=0.158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.11 0.15,0.23,0.49,0.75,0.83 0.90,0.94,0.96,0.99), mean=0.491, stddev=0.251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.008,0.009,0.01,0.02,0.02 0.03,0.04,0.04,0.07), mean=0.0147, stddev=0.00773], oderiv-count=1.44192e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14312.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.04,0.06,0.15,0.30,0.40 0.49,0.59,0.66,0.93), mean=0.192, stddev=0.149], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.09,0.12 0.13,0.17,0.24,0.31,0.33 0.36,0.38,0.39,0.43), mean=0.237, stddev=0.0748]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01121, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.507, stddev=0.000691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.11,0.12,0.12,0.14,0.14 0.15,0.16,0.16,0.19), mean=0.126, stddev=0.0123], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01837, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.27,0.28,0.29,0.31,0.31 0.32,0.33,0.33,0.34), mean=0.293, stddev=0.0151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.55,0.56 0.57,0.57,0.59,0.60,0.61 0.62,0.62,0.63,0.64), mean=0.587, stddev=0.0172], bias-{mean,stddev}=-0.01203,0.2834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.04e+05, self-repaired-proportion=0.0321227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.01,0.02,0.02 0.04,0.06,0.15,0.30,0.42 0.51,0.63,0.68,0.89), mean=0.195, stddev=0.155], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.06,0.09 0.14,0.23,0.47,0.72,0.83 0.91,0.94,0.97,0.99), mean=0.482, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.008,0.009,0.01,0.02,0.03 0.03,0.04,0.05,0.08), mean=0.0152, stddev=0.00852], oderiv-count=1.32e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13800.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.009,0.01,0.02 0.04,0.06,0.14,0.28,0.39 0.48,0.59,0.64,0.83), mean=0.184, stddev=0.146], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.07,0.08,0.10 0.13,0.16,0.23,0.30,0.32 0.35,0.37,0.39,0.42), mean=0.229, stddev=0.0757]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.506, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.19), mean=0.126, stddev=0.0123], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01838, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.28,0.28,0.29,0.31,0.31 0.32,0.32,0.33,0.34), mean=0.294, stddev=0.0144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.55,0.56 0.57,0.57,0.59,0.60,0.61 0.62,0.62,0.63,0.64), mean=0.588, stddev=0.0176], bias-{mean,stddev}=-0.007671,0.2776, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.68e+05, self-repaired-proportion=0.0299583, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.01,0.01,0.03 0.04,0.06,0.16,0.31,0.41 0.49,0.61,0.66,0.97), mean=0.195, stddev=0.152], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.05,0.10 0.14,0.24,0.49,0.74,0.83 0.89,0.93,0.95,0.99), mean=0.485, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.008,0.009,0.01,0.02,0.02 0.03,0.04,0.04,0.08), mean=0.0144, stddev=0.00794], oderiv-count=1.29139e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13288.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,0.01,0.01,0.02 0.03,0.06,0.15,0.29,0.38 0.46,0.57,0.63,0.91), mean=0.184, stddev=0.142], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.07,0.08,0.11 0.13,0.16,0.23,0.30,0.32 0.34,0.36,0.38,0.42), mean=0.228, stddev=0.074]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.505, stddev=0.000457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.12,0.13,0.14 0.15,0.16,0.16,0.20), mean=0.126, stddev=0.0121], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.28,0.28,0.29,0.30,0.31 0.32,0.33,0.33,0.34), mean=0.294, stddev=0.0142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.56,0.56 0.56,0.57,0.59,0.60,0.61 0.62,0.63,0.64,0.64), mean=0.588, stddev=0.0182], bias-{mean,stddev}=0.0147,0.278, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.82e+05, self-repaired-proportion=0.0343822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.01,0.02,0.03 0.04,0.07,0.16,0.33,0.44 0.51,0.62,0.69,0.91), mean=0.206, stddev=0.159], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.05,0.07,0.11 0.16,0.25,0.50,0.77,0.85 0.91,0.96,0.96,1.0), mean=0.505, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.008,0.01,0.02,0.02 0.03,0.03,0.04,0.08), mean=0.0136, stddev=0.00718], oderiv-count=1.30227e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12776.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.01,0.02,0.03 0.04,0.07,0.15,0.31,0.41 0.48,0.58,0.65,0.85), mean=0.195, stddev=0.149], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.07,0.09,0.11 0.13,0.16,0.23,0.30,0.33 0.35,0.36,0.38,0.41), mean=0.232, stddev=0.0731]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50,0.50 0.50,0.50,0.50,0.50), mean=0.502, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.11,0.12,0.13,0.14 0.15,0.15,0.16,0.18), mean=0.125, stddev=0.0124], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01838, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.27,0.28,0.29,0.31,0.31 0.32,0.32,0.33,0.35), mean=0.294, stddev=0.0146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.55,0.56 0.56,0.57,0.59,0.60,0.61 0.62,0.62,0.63,0.64), mean=0.588, stddev=0.0186], bias-{mean,stddev}=-0.01756,0.2854, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.79e+05, self-repaired-proportion=0.0292606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.01,0.02,0.03 0.04,0.06,0.15,0.31,0.41 0.49,0.58,0.64,0.89), mean=0.19, stddev=0.153], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.04,0.06,0.10 0.14,0.21,0.47,0.73,0.85 0.91,0.94,0.95,1.0), mean=0.479, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.008,0.009,0.01,0.02,0.02 0.03,0.04,0.04,0.07), mean=0.014, stddev=0.00758], oderiv-count=1.16243e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12264.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.009,0.01,0.03 0.04,0.06,0.14,0.29,0.39 0.47,0.55,0.60,0.84), mean=0.18, stddev=0.144], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.06,0.08,0.10 0.12,0.15,0.22,0.29,0.32 0.33,0.35,0.36,0.39), mean=0.22, stddev=0.0726]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.508, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.16,0.16,0.21), mean=0.126, stddev=0.0128], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.01837, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.28,0.28,0.29,0.31,0.31 0.32,0.32,0.33,0.34), mean=0.294, stddev=0.0141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.56,0.56 0.56,0.57,0.59,0.60,0.61 0.62,0.62,0.63,0.63), mean=0.587, stddev=0.0177], bias-{mean,stddev}=-0.01007,0.2774, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.12e+05, self-repaired-proportion=0.0289609, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.01,0.02,0.03 0.04,0.06,0.15,0.31,0.41 0.51,0.61,0.65,0.91), mean=0.192, stddev=0.153], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.05,0.07,0.11 0.15,0.24,0.48,0.74,0.85 0.90,0.95,0.96,0.99), mean=0.486, stddev=0.252], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.007 0.007,0.008,0.01,0.02,0.02 0.02,0.03,0.03,0.07), mean=0.013, stddev=0.00629], oderiv-count=1.14042e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11752.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.01,0.02,0.03 0.04,0.06,0.14,0.29,0.39 0.48,0.57,0.61,0.85), mean=0.181, stddev=0.144], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.08,0.09,0.11 0.13,0.15,0.22,0.28,0.31 0.33,0.35,0.36,0.41), mean=0.218, stddev=0.0698]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51,0.51 0.51,0.51,0.51,0.51), mean=0.51, stddev=0.000488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.21), mean=0.127, stddev=0.0122], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.27,0.28,0.29,0.30,0.31 0.31,0.32,0.32,0.35), mean=0.292, stddev=0.0136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.54,0.55,0.56 0.56,0.57,0.58,0.60,0.61 0.62,0.62,0.63,0.63), mean=0.585, stddev=0.0179], bias-{mean,stddev}=-0.005718,0.275, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.74e+05, self-repaired-proportion=0.0184815, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.01,0.02,0.03 0.05,0.07,0.16,0.32,0.42 0.50,0.60,0.65,0.82), mean=0.197, stddev=0.151], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.06,0.07,0.12 0.17,0.24,0.48,0.75,0.83 0.89,0.93,0.95,0.99), mean=0.49, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.03,0.06), mean=0.0115, stddev=0.00493], oderiv-count=1.14547e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11240.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.02,0.03 0.04,0.06,0.14,0.30,0.40 0.47,0.57,0.61,0.77), mean=0.186, stddev=0.141], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.09,0.12 0.13,0.16,0.22,0.29,0.32 0.34,0.36,0.37,0.42), mean=0.226, stddev=0.07]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, params-rms=0.01436, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46,0.46 0.46,0.46,0.46,0.46), mean=0.46, stddev=0.000897], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.24,0.24 0.25,0.25,0.26,0.26), mean=0.229, stddev=0.0123], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01834, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.27 0.28,0.28,0.29,0.30,0.31 0.31,0.32,0.32,0.33), mean=0.293, stddev=0.0129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.55,0.56,0.56 0.57,0.57,0.59,0.60,0.61 0.61,0.61,0.62,0.63), mean=0.587, stddev=0.0139], bias-{mean,stddev}=-0.005906,0.2765, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.57e+05, self-repaired-proportion=0.0610599, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,0.006,0.01,0.02 0.03,0.05,0.13,0.29,0.40 0.49,0.63,0.70,0.88), mean=0.176, stddev=0.157], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.03,0.05,0.09 0.13,0.21,0.47,0.77,0.88 0.94,0.97,0.98,1.0), mean=0.488, stddev=0.276], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.008 0.008,0.009,0.01,0.02,0.02 0.03,0.03,0.04,0.05), mean=0.0151, stddev=0.00693], oderiv-count=1.11686e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11240.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-22,0.003,0.01,0.02 0.03,0.05,0.12,0.27,0.37 0.46,0.59,0.66,0.82), mean=0.166, stddev=0.147], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-12,0.03,0.06,0.09 0.10,0.13,0.19,0.25,0.27 0.29,0.31,0.31,0.37), mean=0.188, stddev=0.0651]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, params-rms=0.0133, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43,0.43 0.43,0.43,0.43,0.43), mean=0.426, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.22,0.23 0.23,0.24,0.24,0.25), mean=0.212, stddev=0.014], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11240.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-5e-08,-5e-08,-4e-08 -3e-08,-2e-08,-3e-09,1e-08,2e-08 3e-08,3e-08,4e-08,5e-08), mean=-3.2e-09, stddev=1.98e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.48,0.49,0.50 0.51,0.52,0.54,0.56,0.57 0.57,0.58,0.60,0.63), mean=0.539, stddev=0.0235]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.000224038, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.008,0.02,0.07 0.12,0.18,0.24,0.30,0.33 0.36,0.40,0.42,0.89), mean=0.236, stddev=0.0846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.72,0.74,0.76 0.78,0.80,0.83,0.87,0.88 0.89,0.90,0.92,0.96), mean=0.832, stddev=0.0411], bias-{mean,stddev}=8.665e-05,0.04352, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.01712, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.25 0.25,0.26,0.27,0.29,0.29 0.30,0.30,0.31,0.32), mean=0.273, stddev=0.0146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.52,0.53 0.53,0.54,0.55,0.56,0.57 0.57,0.58,0.58,0.59), mean=0.548, stddev=0.0135], bias-{mean,stddev}=-0.0006841,0.2652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.85e+05, self-repaired-proportion=0.0737141, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,0.007,0.01,0.02 0.03,0.05,0.12,0.27,0.39 0.46,0.58,0.64,1.0), mean=0.166, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.03,0.05,0.09 0.13,0.21,0.46,0.79,0.90 0.96,0.98,0.99,1.0), mean=0.494, stddev=0.281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00569, stddev=0.00241], oderiv-count=1.08973e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11240.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-34,0.006,0.01,0.02 0.03,0.04,0.11,0.25,0.37 0.43,0.55,0.60,0.94), mean=0.156, stddev=0.139], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-18,0.05,0.06,0.08 0.10,0.12,0.17,0.23,0.25 0.26,0.28,0.28,0.34), mean=0.171, stddev=0.0583]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000224038, l2-regularize=0.008, max-change=0.75, params-rms=0.009395, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.30,0.30 0.30,0.30,0.30,0.30,0.30 0.30,0.30,0.30,0.30), mean=0.301, stddev=0.000173], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.13,0.14,0.15,0.16,0.17 0.17,0.18,0.18,0.19), mean=0.15, stddev=0.0141], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11240.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-3e-08,-3e-08,-2e-08 -2e-08,-1e-08,-2e-10,1e-08,2e-08 2e-08,2e-08,3e-08,3e-08), mean=-4.21e-10, stddev=1.28e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.30,0.31 0.31,0.32,0.34,0.36,0.36 0.37,0.38,0.39,0.39), mean=0.34, stddev=0.0196]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=2824, learning-rate=0.00112019, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03262, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.09,0.19,0.50,0.68,0.77 0.84,0.90,0.93,1.3), mean=0.46, stddev=0.247], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.5,1.5 1.6,1.6,1.7,1.8,1.9 1.9,1.9,1.9,2.0), mean=1.73, stddev=0.113], bias-{mean,stddev}=9.12e-09,0.06787, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=2824, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-07,4e-05,0.0001 0.0002,0.0003,0.0007,0.001,0.002 0.003,0.004,0.004,0.04), mean=0.000987, stddev=0.00118], oderiv-count=1.11526e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/9.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/10.mdl 
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.44368 tdnnf2.linear:2.17436 tdnnf2.affine:2.63932 tdnnf3.linear:2.06564 tdnnf3.affine:2.33452 tdnnf4.linear:1.83836 tdnnf4.affine:2.2762 tdnnf5.linear:1.49323 tdnnf5.affine:1.96542 tdnnf6.linear:1.74678 tdnnf6.affine:2.13829 tdnnf7.linear:1.70396 tdnnf7.affine:2.14439 tdnnf8.linear:1.62835 tdnnf8.affine:2.11706 tdnnf9.linear:1.56808 tdnnf9.affine:2.06618 tdnnf10.linear:1.51184 tdnnf10.affine:2.0248 tdnnf11.linear:1.4615 tdnnf11.affine:2.02739 tdnnf12.linear:1.41812 tdnnf12.affine:1.97505 tdnnf13.linear:1.358 tdnnf13.affine:1.94725 prefinal-l:1.48776 prefinal-chain.affine:1.99107 prefinal-chain.linear:1.3 output.affine:1.74323 prefinal-xent.affine:1.7421 prefinal-xent.linear:0.763718 output-xent.affine:1.74284 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.7483 tdnnf2.linear:8.00233 tdnnf2.affine:12.6998 tdnnf3.linear:6.75711 tdnnf3.affine:12.6292 tdnnf4.linear:6.00923 tdnnf4.affine:13.098 tdnnf5.linear:5.01201 tdnnf5.affine:12.5443 tdnnf6.linear:5.68472 tdnnf6.affine:12.6004 tdnnf7.linear:5.7751 tdnnf7.affine:12.9958 tdnnf8.linear:5.73726 tdnnf8.affine:13.0708 tdnnf9.linear:5.72481 tdnnf9.affine:12.9422 tdnnf10.linear:5.71247 tdnnf10.affine:12.9599 tdnnf11.linear:5.67634 tdnnf11.affine:13.1276 tdnnf12.linear:5.7436 tdnnf12.affine:12.9351 tdnnf13.linear:5.76757 tdnnf13.affine:12.8546 prefinal-l:7.35438 prefinal-chain.affine:12.9048 prefinal-chain.linear:6.80921 output.affine:13.5287 prefinal-xent.affine:12.1992 prefinal-xent.linear:4.81005 output-xent.affine:27.9695 ]
LOG (nnet3-show-progress[5.5.1035~1-3dd90]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.230153 tdnnf2.linear:0.269962 tdnnf2.affine:0.187418 tdnnf3.linear:0.300364 tdnnf3.affine:0.165644 tdnnf4.linear:0.297859 tdnnf4.affine:0.155049 tdnnf5.linear:0.286216 tdnnf5.affine:0.138985 tdnnf6.linear:0.298849 tdnnf6.affine:0.151752 tdnnf7.linear:0.287517 tdnnf7.affine:0.147455 tdnnf8.linear:0.276355 tdnnf8.affine:0.144658 tdnnf9.linear:0.266994 tdnnf9.affine:0.142631 tdnnf10.linear:0.258179 tdnnf10.affine:0.139554 tdnnf11.linear:0.251102 tdnnf11.affine:0.137983 tdnnf12.linear:0.241098 tdnnf12.affine:0.136446 tdnnf13.linear:0.230322 tdnnf13.affine:0.13528 prefinal-l:0.197269 prefinal-chain.affine:0.137612 prefinal-chain.linear:0.184959 output.affine:0.130967 prefinal-xent.affine:0.126254 prefinal-xent.linear:0.148762 output-xent.affine:0.0627386 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Wed Jul 20 03:20:03 EDT 2022, elapsed time 0 seconds
